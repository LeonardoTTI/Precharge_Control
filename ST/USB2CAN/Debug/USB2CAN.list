
USB2CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007ea0  08007ea0  00008ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f08  08007f08  00009184  2**0
                  CONTENTS
  4 .ARM          00000000  08007f08  08007f08  00009184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f08  08007f08  00009184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f08  08007f08  00008f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00008f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08007f10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000184  08008094  00009184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  08008094  000093d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001180e  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003286  00000000  00000000  0001a9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  0001eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb71  00000000  00000000  0001f6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013122  00000000  00000000  0003f22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba1ab  00000000  00000000  0005234d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c4f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  0010c53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00110178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007e88 	.word	0x08007e88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007e88 	.word	0x08007e88

08000218 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800021c:	4b1f      	ldr	r3, [pc, #124]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800021e:	4a20      	ldr	r2, [pc, #128]	@ (80002a0 <MX_FDCAN1_Init+0x88>)
 8000220:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000222:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000224:	2200      	movs	r2, #0
 8000226:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000228:	4b1c      	ldr	r3, [pc, #112]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800022a:	2200      	movs	r2, #0
 800022c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800022e:	4b1b      	ldr	r3, [pc, #108]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000234:	4b19      	ldr	r3, [pc, #100]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000236:	2200      	movs	r2, #0
 8000238:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800023a:	4b18      	ldr	r3, [pc, #96]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800023c:	2200      	movs	r2, #0
 800023e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000240:	4b16      	ldr	r3, [pc, #88]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000242:	2200      	movs	r2, #0
 8000244:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000246:	4b15      	ldr	r3, [pc, #84]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000248:	2210      	movs	r2, #16
 800024a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800024c:	4b13      	ldr	r3, [pc, #76]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800024e:	2201      	movs	r2, #1
 8000250:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000252:	4b12      	ldr	r3, [pc, #72]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000254:	2202      	movs	r2, #2
 8000256:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800025a:	2202      	movs	r2, #2
 800025c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000260:	2201      	movs	r2, #1
 8000262:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000264:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000266:	2201      	movs	r2, #1
 8000268:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800026a:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800026c:	2201      	movs	r2, #1
 800026e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000272:	2201      	movs	r2, #1
 8000274:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000278:	2200      	movs	r2, #0
 800027a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800027e:	2200      	movs	r2, #0
 8000280:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000282:	4b06      	ldr	r3, [pc, #24]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000284:	2200      	movs	r2, #0
 8000286:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800028a:	f000 fb7b 	bl	8000984 <HAL_FDCAN_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000294:	f000 f938 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200001a0 	.word	0x200001a0
 80002a0:	40006400 	.word	0x40006400

080002a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b09a      	sub	sp, #104	@ 0x68
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	2244      	movs	r2, #68	@ 0x44
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f007 fdb3 	bl	8007e30 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a28      	ldr	r2, [pc, #160]	@ (8000370 <HAL_FDCAN_MspInit+0xcc>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d148      	bne.n	8000366 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80002d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80002da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80002de:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 fbc1 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80002f0:	f000 f90a 	bl	8000508 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80002f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 80002f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 80002fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000300:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 8000302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b19      	ldr	r3, [pc, #100]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 800030e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000310:	4a18      	ldr	r2, [pc, #96]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000318:	4b16      	ldr	r3, [pc, #88]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 800031a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000324:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000328:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032a:	2302      	movs	r3, #2
 800032c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000336:	2309      	movs	r3, #9
 8000338:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800033e:	4619      	mov	r1, r3
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <HAL_FDCAN_MspInit+0xd4>)
 8000342:	f000 ff65 	bl	8001210 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	2100      	movs	r1, #0
 800034a:	2015      	movs	r0, #21
 800034c:	f000 fae5 	bl	800091a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000350:	2015      	movs	r0, #21
 8000352:	f000 fafc 	bl	800094e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2100      	movs	r1, #0
 800035a:	2016      	movs	r0, #22
 800035c:	f000 fadd 	bl	800091a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000360:	2016      	movs	r0, #22
 8000362:	f000 faf4 	bl	800094e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000366:	bf00      	nop
 8000368:	3768      	adds	r7, #104	@ 0x68
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40006400 	.word	0x40006400
 8000374:	40021000 	.word	0x40021000
 8000378:	48000400 	.word	0x48000400

0800037c <HAL_FDCAN_RxFifo0Callback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037e:	b0b1      	sub	sp, #196	@ 0xc4
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxPacketHeader;
	uint32_t id;
	uint8_t dataLength;
	uint8_t rxPacket[64];
	uint8_t msg[69];
	HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &rxPacketHeader, rxPacket);
 8000386:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800038a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800038e:	2140      	movs	r1, #64	@ 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 fc51 	bl	8000c38 <HAL_FDCAN_GetRxMessage>
	id = rxPacketHeader.Identifier;
 8000396:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800039a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	dataLength = rxPacketHeader.DataLength;
 800039e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80003a2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
	memcpy(msg, (unsigned char *) id, sizeof(id));
 80003a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	60bb      	str	r3, [r7, #8]
	memcpy(msg + sizeof(id), dataLength, sizeof(dataLength));
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	3304      	adds	r3, #4
 80003b4:	f897 20bb 	ldrb.w	r2, [r7, #187]	@ 0xbb
 80003b8:	7812      	ldrb	r2, [r2, #0]
 80003ba:	701a      	strb	r2, [r3, #0]
	memcpy(msg+sizeof(id)+sizeof(dataLength), rxPacket, sizeof(rxPacket));
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	3305      	adds	r3, #5
 80003c2:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80003c6:	469c      	mov	ip, r3
 80003c8:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 80003cc:	4665      	mov	r5, ip
 80003ce:	4626      	mov	r6, r4
 80003d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80003d2:	6028      	str	r0, [r5, #0]
 80003d4:	6069      	str	r1, [r5, #4]
 80003d6:	60aa      	str	r2, [r5, #8]
 80003d8:	60eb      	str	r3, [r5, #12]
 80003da:	3410      	adds	r4, #16
 80003dc:	f10c 0c10 	add.w	ip, ip, #16
 80003e0:	4574      	cmp	r4, lr
 80003e2:	d1f3      	bne.n	80003cc <HAL_FDCAN_RxFifo0Callback+0x50>
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, rxPacket, rxPacketHeader.DataLength);
 80003e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80003e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003ec:	4619      	mov	r1, r3
 80003ee:	4805      	ldr	r0, [pc, #20]	@ (8000404 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80003f0:	f005 fe55 	bl	800609e <USBD_CDC_SetTxBuffer>
	if ( USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK ){
 80003f4:	4803      	ldr	r0, [pc, #12]	@ (8000404 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80003f6:	f005 fe89 	bl	800610c <USBD_CDC_TransmitPacket>
		//todo implementare catch errore
	}

}
 80003fa:	bf00      	nop
 80003fc:	37c4      	adds	r7, #196	@ 0xc4
 80003fe:	46bd      	mov	sp, r7
 8000400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000402:	bf00      	nop
 8000404:	2000020c 	.word	0x2000020c

08000408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_GPIO_Init+0x5c>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a14      	ldr	r2, [pc, #80]	@ (8000464 <MX_GPIO_Init+0x5c>)
 8000414:	f043 0320 	orr.w	r3, r3, #32
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <MX_GPIO_Init+0x5c>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0320 	and.w	r3, r3, #32
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <MX_GPIO_Init+0x5c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <MX_GPIO_Init+0x5c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_GPIO_Init+0x5c>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <MX_GPIO_Init+0x5c>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000442:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <MX_GPIO_Init+0x5c>)
 8000444:	f043 0302 	orr.w	r3, r3, #2
 8000448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_GPIO_Init+0x5c>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 f909 	bl	8000682 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f808 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f7ff ffc8 	bl	8000408 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000478:	f7ff fece 	bl	8000218 <MX_FDCAN1_Init>
  MX_USB_Device_Init();
 800047c:	f006 ffc0 	bl	8007400 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <main+0x18>

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b094      	sub	sp, #80	@ 0x50
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	2238      	movs	r2, #56	@ 0x38
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f007 fccc 	bl	8007e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004aa:	f002 fd35 	bl	8002f18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80004ae:	2322      	movs	r3, #34	@ 0x22
 80004b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b8:	2340      	movs	r3, #64	@ 0x40
 80004ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004bc:	2301      	movs	r3, #1
 80004be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 0318 	add.w	r3, r7, #24
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 fdd9 	bl	8003080 <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004d4:	f000 f818 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	230f      	movs	r3, #15
 80004da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004dc:	2301      	movs	r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 f8d7 	bl	80036a4 <HAL_RCC_ClockConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80004fc:	f000 f804 	bl	8000508 <Error_Handler>
  }
}
 8000500:	bf00      	nop
 8000502:	3750      	adds	r7, #80	@ 0x50
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_MspInit+0x44>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_MspInit+0x44>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6613      	str	r3, [r2, #96]	@ 0x60
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_MspInit+0x44>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <HAL_MspInit+0x44>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053c:	6593      	str	r3, [r2, #88]	@ 0x58
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800054a:	f002 fd89 	bl	8003060 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <NMI_Handler+0x4>

08000564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <MemManage_Handler+0x4>

08000574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <UsageFault_Handler+0x4>

08000584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b2:	f000 f8b9 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <USB_HP_IRQHandler+0x10>)
 80005c2:	f001 f897 	bl	80016f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000edc 	.word	0x20000edc

080005d0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <USB_LP_IRQHandler+0x10>)
 80005d6:	f001 f88d 	bl	80016f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000edc 	.word	0x20000edc

080005e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80005ea:	f000 fc2d 	bl	8000e48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001a0 	.word	0x200001a0

080005f8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <FDCAN1_IT1_IRQHandler+0x10>)
 80005fe:	f000 fc23 	bl	8000e48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001a0 	.word	0x200001a0

0800060c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <SystemInit+0x20>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <SystemInit+0x20>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff ffea 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	@ (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	@ (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f007 fbef 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000662:	f7ff ff01 	bl	8000468 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000674:	08007f10 	.word	0x08007f10
  ldr r2, =_sbss
 8000678:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800067c:	200013d8 	.word	0x200013d8

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>

08000682 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f939 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000692:	200f      	movs	r0, #15
 8000694:	f000 f80e 	bl	80006b4 <HAL_InitTick>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e001      	b.n	80006a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a4:	f7ff ff36 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a8:	79fb      	ldrb	r3, [r7, #7]

}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_InitTick+0x68>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d022      	beq.n	800070e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <HAL_InitTick+0x6c>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_InitTick+0x68>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80006d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f944 	bl	800096a <HAL_SYSTICK_Config>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10f      	bne.n	8000708 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d809      	bhi.n	8000702 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ee:	2200      	movs	r2, #0
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	f04f 30ff 	mov.w	r0, #4294967295
 80006f6:	f000 f910 	bl	800091a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <HAL_InitTick+0x70>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	e007      	b.n	8000712 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e004      	b.n	8000712 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e001      	b.n	8000712 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000008 	.word	0x20000008
 8000720:	20000000 	.word	0x20000000
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_IncTick+0x1c>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x20>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4413      	add	r3, r2
 8000736:	4a03      	ldr	r2, [pc, #12]	@ (8000744 <HAL_IncTick+0x1c>)
 8000738:	6013      	str	r3, [r2, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	20000204 	.word	0x20000204
 8000748:	20000008 	.word	0x20000008

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <HAL_GetTick+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000204 	.word	0x20000204

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4907      	ldr	r1, [pc, #28]	@ (8000800 <__NVIC_EnableIRQ+0x38>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	@ (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d0:	d301      	bcc.n	80008d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00f      	b.n	80008f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <SysTick_Config+0x40>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008de:	210f      	movs	r1, #15
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f7ff ff8e 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <SysTick_Config+0x40>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ee:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <SysTick_Config+0x40>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff29 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff40 	bl	80007ac <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff90 	bl	8000858 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5f 	bl	8000804 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff33 	bl	80007c8 <__NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffa4 	bl	80008c0 <SysTick_Config>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e147      	b.n	8000c26 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d106      	bne.n	80009b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fc7a 	bl	80002a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0210 	bic.w	r2, r2, #16
 80009be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c0:	f7ff fec4 	bl	800074c <HAL_GetTick>
 80009c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80009c6:	e012      	b.n	80009ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009c8:	f7ff fec0 	bl	800074c <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	2b0a      	cmp	r3, #10
 80009d4:	d90b      	bls.n	80009ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009da:	f043 0201 	orr.w	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2203      	movs	r2, #3
 80009e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e11b      	b.n	8000c26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d0e5      	beq.n	80009c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0201 	orr.w	r2, r2, #1
 8000a0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a0c:	f7ff fe9e 	bl	800074c <HAL_GetTick>
 8000a10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a12:	e012      	b.n	8000a3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a14:	f7ff fe9a 	bl	800074c <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d90b      	bls.n	8000a3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	f043 0201 	orr.w	r2, r3, #1
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2203      	movs	r2, #3
 8000a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0f5      	b.n	8000c26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0e5      	beq.n	8000a14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	699a      	ldr	r2, [r3, #24]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0202 	orr.w	r2, r2, #2
 8000a56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a74      	ldr	r2, [pc, #464]	@ (8000c30 <HAL_FDCAN_Init+0x2ac>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d103      	bne.n	8000a6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000a62:	4a74      	ldr	r2, [pc, #464]	@ (8000c34 <HAL_FDCAN_Init+0x2b0>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7c1b      	ldrb	r3, [r3, #16]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d108      	bne.n	8000a84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a80:	619a      	str	r2, [r3, #24]
 8000a82:	e007      	b.n	8000a94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7c5b      	ldrb	r3, [r3, #17]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	699a      	ldr	r2, [r3, #24]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000aaa:	619a      	str	r2, [r3, #24]
 8000aac:	e007      	b.n	8000abe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000abc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7c9b      	ldrb	r3, [r3, #18]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	699a      	ldr	r2, [r3, #24]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	e007      	b.n	8000ae8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ae6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	699a      	ldr	r2, [r3, #24]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000b0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 0210 	bic.w	r2, r2, #16
 8000b1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d108      	bne.n	8000b38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f042 0204 	orr.w	r2, r2, #4
 8000b34:	619a      	str	r2, [r3, #24]
 8000b36:	e02c      	b.n	8000b92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d028      	beq.n	8000b92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d01c      	beq.n	8000b82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0210 	orr.w	r2, r2, #16
 8000b66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d110      	bne.n	8000b92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 0220 	orr.w	r2, r2, #32
 8000b7e:	619a      	str	r2, [r3, #24]
 8000b80:	e007      	b.n	8000b92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0220 	orr.w	r2, r2, #32
 8000b90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ba2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000baa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000bba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bbc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000bc6:	d115      	bne.n	8000bf4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bcc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bd6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000be0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be8:	3b01      	subs	r3, #1
 8000bea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bf0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bf2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 faaa 	bl	8001164 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40006400 	.word	0x40006400
 8000c34:	40006500 	.word	0x40006500

08000c38 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b08b      	sub	sp, #44	@ 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c50:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000c52:	7efb      	ldrb	r3, [r7, #27]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	f040 80e8 	bne.w	8000e2a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b40      	cmp	r3, #64	@ 0x40
 8000c5e:	d137      	bne.n	8000cd0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0db      	b.n	8000e38 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c88:	0e1b      	lsrs	r3, r3, #24
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10a      	bne.n	8000ca8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	4413      	add	r3, r2
 8000cba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cce:	e036      	b.n	8000d3e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cd8:	f003 030f 	and.w	r3, r3, #15
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d107      	bne.n	8000cf0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0a3      	b.n	8000e38 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cf8:	0e1b      	lsrs	r3, r3, #24
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d10a      	bne.n	8000d18 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4413      	add	r3, r2
 8000d2a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d107      	bne.n	8000d62 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0c9b      	lsrs	r3, r3, #18
 8000d58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e005      	b.n	8000d6e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	3304      	adds	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0c1b      	lsrs	r3, r3, #16
 8000d9c:	f003 020f 	and.w	r2, r3, #15
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	0e1b      	lsrs	r3, r3, #24
 8000dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0fda      	lsrs	r2, r3, #31
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
 8000de2:	e00a      	b.n	8000dfa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	441a      	add	r2, r3
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	440b      	add	r3, r1
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	3301      	adds	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4a11      	ldr	r2, [pc, #68]	@ (8000e44 <HAL_FDCAN_GetRxMessage+0x20c>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	461a      	mov	r2, r3
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d3ec      	bcc.n	8000de4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b40      	cmp	r3, #64	@ 0x40
 8000e0e:	d105      	bne.n	8000e1c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000e1a:	e004      	b.n	8000e26 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e006      	b.n	8000e38 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	f043 0208 	orr.w	r2, r3, #8
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
  }
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	372c      	adds	r7, #44	@ 0x2c
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	08007ef8 	.word	0x08007ef8

08000e48 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e56:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e64:	4013      	ands	r3, r2
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e94:	4013      	ands	r3, r2
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e9e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8000ea2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eaa:	6a3a      	ldr	r2, [r7, #32]
 8000eac:	4013      	ands	r3, r2
 8000eae:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000eba:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ece:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ed6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2240      	movs	r2, #64	@ 0x40
 8000ef2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f916 	bl	8001126 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d019      	beq.n	8000f38 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d014      	beq.n	8000f38 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f16:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f8d8 	bl	80010e8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8000f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f8a2 	bl	8001092 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fa0c 	bl	800037c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f70:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f897 	bl	80010a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00c      	beq.n	8000f9e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f890 	bl	80010be <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d018      	beq.n	8000fda <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d013      	beq.n	8000fda <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fba:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2280      	movs	r2, #128	@ 0x80
 8000fd0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f87c 	bl	80010d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f880 	bl	80010fe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800101a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f878 	bl	8001112 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00a      	beq.n	800104c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800103e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001044:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800105a:	69f9      	ldr	r1, [r7, #28]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f876 	bl	800114e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a3a      	ldr	r2, [r7, #32]
 800106e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f858 	bl	800113a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800116e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001186:	041a      	lsls	r2, r3, #16
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ac:	061a      	lsls	r2, r3, #24
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e005      	b.n	80011f2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3304      	adds	r3, #4
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3f3      	bcc.n	80011e6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	4000a400 	.word	0x4000a400

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800121e:	e15a      	b.n	80014d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 814c 	beq.w	80014d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	f003 0201 	and.w	r2, r3, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	6939      	ldr	r1, [r7, #16]
 800133e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0203 	and.w	r2, r3, #3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80a6 	beq.w	80014d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001384:	4b5b      	ldr	r3, [pc, #364]	@ (80014f4 <HAL_GPIO_Init+0x2e4>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001388:	4a5a      	ldr	r2, [pc, #360]	@ (80014f4 <HAL_GPIO_Init+0x2e4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001390:	4b58      	ldr	r3, [pc, #352]	@ (80014f4 <HAL_GPIO_Init+0x2e4>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139c:	4a56      	ldr	r2, [pc, #344]	@ (80014f8 <HAL_GPIO_Init+0x2e8>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013c6:	d01f      	beq.n	8001408 <HAL_GPIO_Init+0x1f8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_GPIO_Init+0x2ec>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d019      	beq.n	8001404 <HAL_GPIO_Init+0x1f4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <HAL_GPIO_Init+0x2f0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d013      	beq.n	8001400 <HAL_GPIO_Init+0x1f0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4a      	ldr	r2, [pc, #296]	@ (8001504 <HAL_GPIO_Init+0x2f4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a49      	ldr	r2, [pc, #292]	@ (8001508 <HAL_GPIO_Init+0x2f8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1e8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a48      	ldr	r2, [pc, #288]	@ (800150c <HAL_GPIO_Init+0x2fc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1e4>
 80013f0:	2305      	movs	r3, #5
 80013f2:	e00a      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 80013f4:	2306      	movs	r3, #6
 80013f6:	e008      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141a:	4937      	ldr	r1, [pc, #220]	@ (80014f8 <HAL_GPIO_Init+0x2e8>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001428:	4b39      	ldr	r3, [pc, #228]	@ (8001510 <HAL_GPIO_Init+0x300>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144c:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <HAL_GPIO_Init+0x300>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_GPIO_Init+0x300>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001476:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <HAL_GPIO_Init+0x300>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <HAL_GPIO_Init+0x300>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_GPIO_Init+0x300>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_GPIO_Init+0x300>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ca:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <HAL_GPIO_Init+0x300>)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f ae9d 	bne.w	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	48000c00 	.word	0x48000c00
 8001508:	48001000 	.word	0x48001000
 800150c:	48001400 	.word	0x48001400
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0c0      	b.n	80016a8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f006 f96c 	bl	8007818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fc94 	bl	8003e7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e03e      	b.n	80015d6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3311      	adds	r3, #17
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	3310      	adds	r3, #16
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	3313      	adds	r3, #19
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	3320      	adds	r3, #32
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3324      	adds	r3, #36	@ 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	3301      	adds	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3bb      	bcc.n	8001558 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e044      	b.n	8001670 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	791b      	ldrb	r3, [r3, #4]
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	429a      	cmp	r2, r3
 8001678:	d3b5      	bcc.n	80015e6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001686:	f002 fc13 	bl	8003eb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7a9b      	ldrb	r3, [r3, #10]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d102      	bne.n	80016a6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 fc0e 	bl	8002ec2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_PCD_Start+0x16>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e012      	b.n	80016ec <HAL_PCD_Start+0x3c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fbba 	bl	8003e4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 f997 	bl	8005a10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 f99c 	bl	8005a3e <USB_ReadInterrupts>
 8001706:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fb06 	bl	8001d24 <PCD_EP_ISR_Handler>

    return;
 8001718:	e110      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f006 f904 	bl	800794a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8fc 	bl	8001942 <HAL_PCD_SetAddress>

    return;
 800174a:	e0f7      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800175e:	b29a      	uxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001768:	b292      	uxth	r2, r2
 800176a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800176e:	e0e5      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800178c:	b292      	uxth	r2, r2
 800178e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001792:	e0d3      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d034      	beq.n	8001808 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0204 	bic.w	r2, r2, #4
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f006 faa4 	bl	8007d30 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f006 f8e7 	bl	80079bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001800:	b292      	uxth	r2, r2
 8001802:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001806:	e099      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d027      	beq.n	8001862 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0208 	orr.w	r2, r2, #8
 8001824:	b292      	uxth	r2, r2
 8001826:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0204 	orr.w	r2, r2, #4
 8001854:	b292      	uxth	r2, r2
 8001856:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f006 f894 	bl	8007988 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001860:	e06c      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001868:	2b00      	cmp	r3, #0
 800186a:	d040      	beq.n	80018ee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800187e:	b292      	uxth	r2, r2
 8001880:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12b      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0204 	orr.w	r2, r2, #4
 80018a0:	b292      	uxth	r2, r2
 80018a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0208 	orr.w	r2, r2, #8
 80018b8:	b292      	uxth	r2, r2
 80018ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018dc:	2101      	movs	r1, #1
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f006 fa26 	bl	8007d30 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80018e4:	e02a      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f006 f84e 	bl	8007988 <HAL_PCD_SuspendCallback>
    return;
 80018ec:	e026      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800190a:	b292      	uxth	r2, r2
 800190c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f006 f80c 	bl	800792e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001916:	e011      	b.n	800193c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00c      	beq.n	800193c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800193a:	bf00      	nop
  }
}
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_PCD_SetAddress+0x1a>
 8001958:	2302      	movs	r3, #2
 800195a:	e012      	b.n	8001982 <HAL_PCD_SetAddress+0x40>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f004 f838 	bl	80059e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	4608      	mov	r0, r1
 8001994:	4611      	mov	r1, r2
 8001996:	461a      	mov	r2, r3
 8001998:	4603      	mov	r3, r0
 800199a:	70fb      	strb	r3, [r7, #3]
 800199c:	460b      	mov	r3, r1
 800199e:	803b      	strh	r3, [r7, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da0e      	bge.n	80019ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	3310      	adds	r3, #16
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	705a      	strb	r2, [r3, #1]
 80019cc:	e00e      	b.n	80019ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 0207 	and.w	r2, r3, #7
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80019f8:	883b      	ldrh	r3, [r7, #0]
 80019fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	78ba      	ldrb	r2, [r7, #2]
 8001a06:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a08:	78bb      	ldrb	r3, [r7, #2]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d102      	bne.n	8001a14 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_PCD_EP_Open+0x98>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e00e      	b.n	8001a40 <HAL_PCD_EP_Open+0xb6>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fa5b 	bl	8003eec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da0e      	bge.n	8001a7a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	f003 0207 	and.w	r2, r3, #7
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	3310      	adds	r3, #16
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	705a      	strb	r2, [r3, #1]
 8001a78:	e00e      	b.n	8001a98 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 0207 	and.w	r2, r3, #7
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_PCD_EP_Close+0x6a>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e00e      	b.n	8001ad0 <HAL_PCD_EP_Close+0x88>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fefb 	bl	80048bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	f003 0207 	and.w	r2, r3, #7
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6979      	ldr	r1, [r7, #20]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 f8b3 	bl	8004c96 <USB_EPStartXfer>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 0207 	and.w	r2, r3, #7
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001b5c:	681b      	ldr	r3, [r3, #0]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	460b      	mov	r3, r1
 8001b78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	f003 0207 	and.w	r2, r3, #7
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	3310      	adds	r3, #16
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 f864 	bl	8004c96 <USB_EPStartXfer>

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7912      	ldrb	r2, [r2, #4]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e03e      	b.n	8001c74 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0e      	bge.n	8001c1c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0207 	and.w	r2, r3, #7
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	3310      	adds	r3, #16
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	705a      	strb	r2, [r3, #1]
 8001c1a:	e00c      	b.n	8001c36 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_PCD_EP_SetStall+0x7e>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_SetStall+0x9c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fdc5 	bl	80057f4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	7912      	ldrb	r2, [r2, #4]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e040      	b.n	8001d1c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da0e      	bge.n	8001cc0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 0207 	and.w	r2, r3, #7
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	3310      	adds	r3, #16
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	705a      	strb	r2, [r3, #1]
 8001cbe:	e00e      	b.n	8001cde <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	f003 0207 	and.w	r2, r3, #7
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_PCD_EP_ClrStall+0x82>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e00e      	b.n	8001d1c <HAL_PCD_EP_ClrStall+0xa0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fdc2 	bl	8005896 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b092      	sub	sp, #72	@ 0x48
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d2c:	e333      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d36:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d38:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001d44:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 8108 	bne.w	8001f5e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d14c      	bne.n	8001df2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d68:	813b      	strh	r3, [r7, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	893b      	ldrh	r3, [r7, #8]
 8001d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3310      	adds	r3, #16
 8001d80:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	441a      	add	r2, r3
 8001db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001db8:	2100      	movs	r1, #0
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f005 fd9d 	bl	80078fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7b1b      	ldrb	r3, [r3, #12]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 82e5 	beq.w	8002396 <PCD_EP_ISR_Handler+0x672>
 8001dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 82e0 	bne.w	8002396 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7b1b      	ldrb	r3, [r3, #12]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	731a      	strb	r2, [r3, #12]
 8001df0:	e2d1      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001df8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d032      	beq.n	8001e72 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e32:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e40:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e44:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f003 fe4b 	bl	8005ae2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e58:	4013      	ands	r3, r2
 8001e5a:	817b      	strh	r3, [r7, #10]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e66:	b292      	uxth	r2, r2
 8001e68:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f005 fd18 	bl	80078a0 <HAL_PCD_SetupStageCallback>
 8001e70:	e291      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f280 828d 	bge.w	8002396 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e88:	4013      	ands	r3, r2
 8001e8a:	81fb      	strh	r3, [r7, #14]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	89fa      	ldrh	r2, [r7, #14]
 8001e92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e96:	b292      	uxth	r2, r2
 8001e98:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d019      	beq.n	8001efe <PCD_EP_ISR_Handler+0x1da>
 8001eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed8:	6959      	ldr	r1, [r3, #20]
 8001eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001edc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ee0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f003 fdfd 	bl	8005ae2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f005 fce3 	bl	80078c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001f06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 8242 	bne.w	8002396 <PCD_EP_ISR_Handler+0x672>
 8001f12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001f14:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001f1c:	f000 823b 	beq.w	8002396 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f30:	81bb      	strh	r3, [r7, #12]
 8001f32:	89bb      	ldrh	r3, [r7, #12]
 8001f34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001f38:	81bb      	strh	r3, [r7, #12]
 8001f3a:	89bb      	ldrh	r3, [r7, #12]
 8001f3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f40:	81bb      	strh	r3, [r7, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	89bb      	ldrh	r3, [r7, #12]
 8001f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	8013      	strh	r3, [r2, #0]
 8001f5c:	e21b      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f280 80f1 	bge.w	800215c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f90:	4013      	ands	r3, r2
 8001f92:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fa4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fac:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d123      	bne.n	8002012 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001ff2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 808b 	beq.w	8002112 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002002:	6959      	ldr	r1, [r3, #20]
 8002004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002006:	88da      	ldrh	r2, [r3, #6]
 8002008:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800200c:	f003 fd69 	bl	8005ae2 <USB_ReadPMA>
 8002010:	e07f      	b.n	8002112 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002014:	78db      	ldrb	r3, [r3, #3]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d109      	bne.n	800202e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800201a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800201c:	461a      	mov	r2, r3
 800201e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f9c6 	bl	80023b2 <HAL_PCD_EP_DB_Receive>
 8002026:	4603      	mov	r3, r0
 8002028:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800202c:	e071      	b.n	8002112 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002048:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	441a      	add	r2, r3
 8002058:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800205a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800205e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002066:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800206a:	b29b      	uxth	r3, r3
 800206c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d022      	beq.n	80020ce <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80020b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02c      	beq.n	8002112 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020be:	6959      	ldr	r1, [r3, #20]
 80020c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c2:	891a      	ldrh	r2, [r3, #8]
 80020c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020c8:	f003 fd0b 	bl	8005ae2 <USB_ReadPMA>
 80020cc:	e021      	b.n	8002112 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80020f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002104:	6959      	ldr	r1, [r3, #20]
 8002106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002108:	895a      	ldrh	r2, [r3, #10]
 800210a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800210e:	f003 fce8 	bl	8005ae2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800211a:	441a      	add	r2, r3
 800211c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800211e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002128:	441a      	add	r2, r3
 800212a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800212c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <PCD_EP_ISR_Handler+0x41e>
 8002136:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800213a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	429a      	cmp	r2, r3
 8002140:	d206      	bcs.n	8002150 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f005 fbbb 	bl	80078c4 <HAL_PCD_DataOutStageCallback>
 800214e:	e005      	b.n	800215c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fd9d 	bl	8004c96 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800215c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8117 	beq.w	8002396 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002168:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	3310      	adds	r3, #16
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002196:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80021a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b6:	78db      	ldrb	r3, [r3, #3]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	f040 80a1 	bne.w	8002300 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80021be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8092 	beq.w	80022f2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d046      	beq.n	8002266 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d126      	bne.n	800222e <PCD_EP_ISR_Handler+0x50a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	00da      	lsls	r2, r3, #3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4413      	add	r3, r2
 8002202:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002212:	b29a      	uxth	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002226:	b29a      	uxth	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	e061      	b.n	80022f2 <PCD_EP_ISR_Handler+0x5ce>
 800222e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d15d      	bne.n	80022f2 <PCD_EP_ISR_Handler+0x5ce>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002244:	b29b      	uxth	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	00da      	lsls	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2200      	movs	r2, #0
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	e045      	b.n	80022f2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800226c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d126      	bne.n	80022c2 <PCD_EP_ISR_Handler+0x59e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	4413      	add	r3, r2
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
 800228c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	00da      	lsls	r2, r3, #3
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	4413      	add	r3, r2
 8002296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	e017      	b.n	80022f2 <PCD_EP_ISR_Handler+0x5ce>
 80022c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d113      	bne.n	80022f2 <PCD_EP_ISR_Handler+0x5ce>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	4413      	add	r3, r2
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00da      	lsls	r2, r3, #3
 80022e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e4:	4413      	add	r3, r2
 80022e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	2200      	movs	r2, #0
 80022f0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f005 fafe 	bl	80078fa <HAL_PCD_DataInStageCallback>
 80022fe:	e04a      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d13f      	bne.n	800238a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002336:	429a      	cmp	r2, r3
 8002338:	d906      	bls.n	8002348 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002340:	1ad2      	subs	r2, r2, r3
 8002342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002344:	619a      	str	r2, [r3, #24]
 8002346:	e002      	b.n	800234e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800234e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f005 facc 	bl	80078fa <HAL_PCD_DataInStageCallback>
 8002362:	e018      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800236a:	441a      	add	r2, r3
 800236c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800236e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002376:	441a      	add	r2, r3
 8002378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800237a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002382:	4618      	mov	r0, r3
 8002384:	f002 fc87 	bl	8004c96 <USB_EPStartXfer>
 8002388:	e005      	b.n	8002396 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800238a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800238c:	461a      	mov	r2, r3
 800238e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f917 	bl	80025c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f6ff acc3 	blt.w	8001d2e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3748      	adds	r7, #72	@ 0x48
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	4613      	mov	r3, r2
 80023be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d07c      	beq.n	80024c4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	8b7b      	ldrh	r3, [r7, #26]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d306      	bcc.n	8002408 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	8b7b      	ldrh	r3, [r7, #26]
 8002400:	1ad2      	subs	r2, r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	619a      	str	r2, [r3, #24]
 8002406:	e002      	b.n	800240e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d123      	bne.n	800245e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800242c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002430:	833b      	strh	r3, [r7, #24]
 8002432:	8b3b      	ldrh	r3, [r7, #24]
 8002434:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002438:	833b      	strh	r3, [r7, #24]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	441a      	add	r2, r3
 8002448:	8b3b      	ldrh	r3, [r7, #24]
 800244a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800244e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245a:	b29b      	uxth	r3, r3
 800245c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01f      	beq.n	80024a8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800247e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002482:	82fb      	strh	r3, [r7, #22]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	441a      	add	r2, r3
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800249c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024a8:	8b7b      	ldrh	r3, [r7, #26]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8085 	beq.w	80025ba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	891a      	ldrh	r2, [r3, #8]
 80024bc:	8b7b      	ldrh	r3, [r7, #26]
 80024be:	f003 fb10 	bl	8005ae2 <USB_ReadPMA>
 80024c2:	e07a      	b.n	80025ba <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	8b7b      	ldrh	r3, [r7, #26]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d306      	bcc.n	8002502 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	8b7b      	ldrh	r3, [r7, #26]
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	e002      	b.n	8002508 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d123      	bne.n	8002558 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252a:	83fb      	strh	r3, [r7, #30]
 800252c:	8bfb      	ldrh	r3, [r7, #30]
 800252e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002532:	83fb      	strh	r3, [r7, #30]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	441a      	add	r2, r3
 8002542:	8bfb      	ldrh	r3, [r7, #30]
 8002544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800254c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002554:	b29b      	uxth	r3, r3
 8002556:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11f      	bne.n	80025a2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800257c:	83bb      	strh	r3, [r7, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	441a      	add	r2, r3
 800258c:	8bbb      	ldrh	r3, [r7, #28]
 800258e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800259e:	b29b      	uxth	r3, r3
 80025a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025a2:	8b7b      	ldrh	r3, [r7, #26]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6959      	ldr	r1, [r3, #20]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	895a      	ldrh	r2, [r3, #10]
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	f003 fa94 	bl	8005ae2 <USB_ReadPMA>
    }
  }

  return count;
 80025ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0a6      	sub	sp, #152	@ 0x98
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 81f7 	beq.w	80029cc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002602:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800260e:	429a      	cmp	r2, r3
 8002610:	d907      	bls.n	8002622 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800261a:	1ad2      	subs	r2, r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	619a      	str	r2, [r3, #24]
 8002620:	e002      	b.n	8002628 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 80e1 	bne.w	80027f4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d126      	bne.n	8002688 <HAL_PCD_EP_DB_Transmit+0xc4>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264e:	4413      	add	r3, r2
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	00da      	lsls	r2, r3, #3
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	4413      	add	r3, r2
 800265c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	b29a      	uxth	r2, r3
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800267c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002680:	b29a      	uxth	r2, r3
 8002682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	e01a      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0xfa>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d116      	bne.n	80026be <HAL_PCD_EP_DB_Transmit+0xfa>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a4:	4413      	add	r3, r2
 80026a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00da      	lsls	r2, r3, #3
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	4413      	add	r3, r2
 80026b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ba:	2200      	movs	r2, #0
 80026bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	785b      	ldrb	r3, [r3, #1]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d126      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x156>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	4413      	add	r3, r2
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	00da      	lsls	r2, r3, #3
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	4413      	add	r3, r2
 80026ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fe:	b29a      	uxth	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002712:	b29a      	uxth	r2, r3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	e017      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x186>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d113      	bne.n	800274a <HAL_PCD_EP_DB_Transmit+0x186>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002730:	4413      	add	r3, r2
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00da      	lsls	r2, r3, #3
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	4413      	add	r3, r2
 800273e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	2200      	movs	r2, #0
 8002748:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	78db      	ldrb	r3, [r3, #3]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d123      	bne.n	800279a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276c:	837b      	strh	r3, [r7, #26]
 800276e:	8b7b      	ldrh	r3, [r7, #26]
 8002770:	f083 0320 	eor.w	r3, r3, #32
 8002774:	837b      	strh	r3, [r7, #26]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	8b7b      	ldrh	r3, [r7, #26]
 8002786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800278a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800278e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002796:	b29b      	uxth	r3, r3
 8002798:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f005 f8aa 	bl	80078fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01f      	beq.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ca:	833b      	strh	r3, [r7, #24]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	8b3b      	ldrh	r3, [r7, #24]
 80027dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e31f      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d021      	beq.n	8002842 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002818:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	441a      	add	r2, r3
 800282a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800283a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 82ca 	bne.w	8002de2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002856:	441a      	add	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002864:	441a      	add	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d309      	bcc.n	800288a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	e015      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002892:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002896:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028a0:	e009      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d15f      	bne.n	800297e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d2:	4413      	add	r3, r2
 80028d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00da      	lsls	r2, r3, #3
 80028dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028de:	4413      	add	r3, r2
 80028e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_PCD_EP_DB_Transmit+0x34e>
 80028fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290a:	b29a      	uxth	r2, r3
 800290c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e051      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002914:	2b3e      	cmp	r3, #62	@ 0x3e
 8002916:	d816      	bhi.n	8002946 <HAL_PCD_EP_DB_Transmit+0x382>
 8002918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	653b      	str	r3, [r7, #80]	@ 0x50
 800291e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800292a:	3301      	adds	r3, #1
 800292c:	653b      	str	r3, [r7, #80]	@ 0x50
 800292e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002936:	b29b      	uxth	r3, r3
 8002938:	029b      	lsls	r3, r3, #10
 800293a:	b29b      	uxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b29a      	uxth	r2, r3
 8002940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	e037      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002946:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	653b      	str	r3, [r7, #80]	@ 0x50
 800294c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_PCD_EP_DB_Transmit+0x398>
 8002956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002958:	3b01      	subs	r3, #1
 800295a:	653b      	str	r3, [r7, #80]	@ 0x50
 800295c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29a      	uxth	r2, r3
 8002962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002964:	b29b      	uxth	r3, r3
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	b29b      	uxth	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b29b      	uxth	r3, r3
 800296e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002976:	b29a      	uxth	r2, r3
 8002978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800297a:	801a      	strh	r2, [r3, #0]
 800297c:	e01b      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d117      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002994:	b29b      	uxth	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800299a:	4413      	add	r3, r2
 800299c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	00da      	lsls	r2, r3, #3
 80029a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a6:	4413      	add	r3, r2
 80029a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80029ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6959      	ldr	r1, [r3, #20]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	891a      	ldrh	r2, [r3, #8]
 80029c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f003 f84a 	bl	8005a5e <USB_WritePMA>
 80029ca:	e20a      	b.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d307      	bcc.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a08:	1ad2      	subs	r2, r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	619a      	str	r2, [r3, #24]
 8002a0e:	e002      	b.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 80f6 	bne.w	8002c0c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d126      	bne.n	8002a76 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3c:	4413      	add	r3, r2
 8002a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	00da      	lsls	r2, r3, #3
 8002a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a48:	4413      	add	r3, r2
 8002a4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a5e:	801a      	strh	r2, [r3, #0]
 8002a60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	e01a      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d116      	bne.n	8002aac <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a92:	4413      	add	r3, r2
 8002a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00da      	lsls	r2, r3, #3
 8002a9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d12f      	bne.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x558>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00da      	lsls	r2, r3, #3
 8002ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b18:	801a      	strh	r2, [r3, #0]
 8002b1a:	e01c      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x592>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d118      	bne.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x592>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b34:	4413      	add	r3, r2
 8002b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	00da      	lsls	r2, r3, #3
 8002b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b52:	2200      	movs	r2, #0
 8002b54:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d127      	bne.n	8002bae <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002b7c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002b80:	f083 0320 	eor.w	r3, r3, #32
 8002b84:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	441a      	add	r2, r3
 8002b96:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f004 fea0 	bl	80078fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d121      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e113      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d121      	bne.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c30:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f040 80be 	bne.w	8002de2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c6e:	441a      	add	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d309      	bcc.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	621a      	str	r2, [r3, #32]
 8002ca0:	e015      	b.n	8002cce <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002caa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002cae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002cb8:	e009      	b.n	8002cce <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d15f      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cf0:	4413      	add	r3, r2
 8002cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	00da      	lsls	r2, r3, #3
 8002cfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	e04e      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x80a>
 8002d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d32:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d34:	d816      	bhi.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x788>
 8002d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d48:	3301      	adds	r3, #1
 8002d4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	e034      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x80a>
 8002d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d76:	3b01      	subs	r3, #1
 8002d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e018      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x80a>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d114      	bne.n	8002dce <HAL_PCD_EP_DB_Transmit+0x80a>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db2:	4413      	add	r3, r2
 8002db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	00da      	lsls	r2, r3, #3
 8002dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6959      	ldr	r1, [r3, #20]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	895a      	ldrh	r2, [r3, #10]
 8002dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f002 fe3e 	bl	8005a5e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dfc:	82fb      	strh	r3, [r7, #22]
 8002dfe:	8afb      	ldrh	r3, [r7, #22]
 8002e00:	f083 0310 	eor.w	r3, r3, #16
 8002e04:	82fb      	strh	r3, [r7, #22]
 8002e06:	8afb      	ldrh	r3, [r7, #22]
 8002e08:	f083 0320 	eor.w	r3, r3, #32
 8002e0c:	82fb      	strh	r3, [r7, #22]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	441a      	add	r2, r3
 8002e1c:	8afb      	ldrh	r3, [r7, #22]
 8002e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3798      	adds	r7, #152	@ 0x98
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	817b      	strh	r3, [r7, #10]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	f003 0207 	and.w	r2, r3, #7
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	3310      	adds	r3, #16
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e009      	b.n	8002e86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e72:	897a      	ldrh	r2, [r7, #10]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d107      	bne.n	8002e9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	80da      	strh	r2, [r3, #6]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d141      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f26:	4b4b      	ldr	r3, [pc, #300]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f32:	d131      	bne.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f34:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3a:	4a46      	ldr	r2, [pc, #280]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f44:	4b43      	ldr	r3, [pc, #268]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f4c:	4a41      	ldr	r2, [pc, #260]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f54:	4b40      	ldr	r3, [pc, #256]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2232      	movs	r2, #50	@ 0x32
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	0c9b      	lsrs	r3, r3, #18
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f6a:	e002      	b.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7e:	d102      	bne.n	8002f86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f2      	bne.n	8002f6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f86:	4b33      	ldr	r3, [pc, #204]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f92:	d158      	bne.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e057      	b.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f98:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fa8:	e04d      	b.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d141      	bne.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb2:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbe:	d131      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc0:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc6:	4a23      	ldr	r2, [pc, #140]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd0:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2232      	movs	r2, #50	@ 0x32
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a1c      	ldr	r2, [pc, #112]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	0c9b      	lsrs	r3, r3, #18
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff6:	e002      	b.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300a:	d102      	bne.n	8003012 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f2      	bne.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800301e:	d112      	bne.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e011      	b.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800302a:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003034:	e007      	b.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003036:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800303e:	4a05      	ldr	r2, [pc, #20]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003044:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40007000 	.word	0x40007000
 8003058:	20000000 	.word	0x20000000
 800305c:	431bde83 	.word	0x431bde83

08003060 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a04      	ldr	r2, [pc, #16]	@ (800307c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800306a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800306e:	6093      	str	r3, [r2, #8]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40007000 	.word	0x40007000

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e2fe      	b.n	8003690 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b97      	ldr	r3, [pc, #604]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b94      	ldr	r3, [pc, #592]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0x3e>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_OscConfig+0x44>
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e2d9      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x74>
 80030e6:	4b85      	ldr	r3, [pc, #532]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a84      	ldr	r2, [pc, #528]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b7f      	ldr	r3, [pc, #508]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7e      	ldr	r2, [pc, #504]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b7c      	ldr	r3, [pc, #496]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a7b      	ldr	r2, [pc, #492]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 8003118:	4b78      	ldr	r3, [pc, #480]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a77      	ldr	r2, [pc, #476]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b75      	ldr	r3, [pc, #468]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a74      	ldr	r2, [pc, #464]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd fb08 	bl	800074c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fd fb04 	bl	800074c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e29e      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003152:	4b6a      	ldr	r3, [pc, #424]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xc0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fd faf4 	bl	800074c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fd faf0 	bl	800074c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e28a      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317a:	4b60      	ldr	r3, [pc, #384]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d075      	beq.n	8003282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003196:	4b59      	ldr	r3, [pc, #356]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a0:	4b56      	ldr	r3, [pc, #344]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_OscConfig+0x136>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_OscConfig+0x13c>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11f      	bne.n	80031fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	4b4f      	ldr	r3, [pc, #316]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x154>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e25d      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b49      	ldr	r3, [pc, #292]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	4946      	ldr	r1, [pc, #280]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031e8:	4b45      	ldr	r3, [pc, #276]	@ (8003300 <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd fa61 	bl	80006b4 <HAL_InitTick>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d043      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e249      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d023      	beq.n	800324c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b3d      	ldr	r3, [pc, #244]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3c      	ldr	r2, [pc, #240]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd fa9c 	bl	800074c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fd fa98 	bl	800074c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e232      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322a:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	492d      	ldr	r1, [pc, #180]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
 800324a:	e01a      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324c:	4b2b      	ldr	r3, [pc, #172]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2a      	ldr	r2, [pc, #168]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003252:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd fa78 	bl	800074c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7fd fa74 	bl	800074c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e20e      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003272:	4b22      	ldr	r3, [pc, #136]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1e0>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d041      	beq.n	8003312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800329c:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd fa51 	bl	800074c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fd fa4d 	bl	800074c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1e7      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c0:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ef      	beq.n	80032ae <HAL_RCC_OscConfig+0x22e>
 80032ce:	e020      	b.n	8003312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d6:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_RCC_OscConfig+0x27c>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fd fa34 	bl	800074c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032e6:	e00d      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fd fa30 	bl	800074c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d906      	bls.n	8003304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1ca      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003304:	4b8c      	ldr	r3, [pc, #560]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ea      	bne.n	80032e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a6 	beq.w	800346c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003324:	4b84      	ldr	r3, [pc, #528]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x2b4>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x2b6>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	4b7f      	ldr	r3, [pc, #508]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	4a7e      	ldr	r2, [pc, #504]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	@ 0x58
 8003346:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003352:	2301      	movs	r3, #1
 8003354:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003356:	4b79      	ldr	r3, [pc, #484]	@ (800353c <HAL_RCC_OscConfig+0x4bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d118      	bne.n	8003394 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003362:	4b76      	ldr	r3, [pc, #472]	@ (800353c <HAL_RCC_OscConfig+0x4bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	@ (800353c <HAL_RCC_OscConfig+0x4bc>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336e:	f7fd f9ed 	bl	800074c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003376:	f7fd f9e9 	bl	800074c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e183      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	4b6c      	ldr	r3, [pc, #432]	@ (800353c <HAL_RCC_OscConfig+0x4bc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d108      	bne.n	80033ae <HAL_RCC_OscConfig+0x32e>
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a2:	4a65      	ldr	r2, [pc, #404]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ac:	e024      	b.n	80033f8 <HAL_RCC_OscConfig+0x378>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d110      	bne.n	80033d8 <HAL_RCC_OscConfig+0x358>
 80033b6:	4b60      	ldr	r3, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d6:	e00f      	b.n	80033f8 <HAL_RCC_OscConfig+0x378>
 80033d8:	4b57      	ldr	r3, [pc, #348]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a56      	ldr	r2, [pc, #344]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e8:	4b53      	ldr	r3, [pc, #332]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	4a52      	ldr	r2, [pc, #328]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d016      	beq.n	800342e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fd f9a4 	bl	800074c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fd f9a0 	bl	800074c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e138      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ed      	beq.n	8003408 <HAL_RCC_OscConfig+0x388>
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fd f98d 	bl	800074c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd f989 	bl	800074c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e121      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ed      	bne.n	8003436 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b35      	ldr	r3, [pc, #212]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	4a34      	ldr	r2, [pc, #208]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003480:	4b2d      	ldr	r3, [pc, #180]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003486:	4a2c      	ldr	r2, [pc, #176]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd f95c 	bl	800074c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003498:	f7fd f958 	bl	800074c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0f2      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034aa:	4b23      	ldr	r3, [pc, #140]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCC_OscConfig+0x418>
 80034b8:	e01b      	b.n	80034f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fd f93f 	bl	800074c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fd f93b 	bl	800074c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0d5      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e4:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ef      	bne.n	80034d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80c9 	beq.w	800368e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b0c      	cmp	r3, #12
 8003506:	f000 8083 	beq.w	8003610 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d15e      	bne.n	80035d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd f915 	bl	800074c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	e00c      	b.n	8003540 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd f911 	bl	800074c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d905      	bls.n	8003540 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0ab      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b55      	ldr	r3, [pc, #340]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ec      	bne.n	8003526 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b52      	ldr	r3, [pc, #328]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b52      	ldr	r3, [pc, #328]	@ (800369c <HAL_RCC_OscConfig+0x61c>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6a11      	ldr	r1, [r2, #32]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800355c:	3a01      	subs	r2, #1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003566:	0212      	lsls	r2, r2, #8
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0552      	lsls	r2, r2, #21
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0652      	lsls	r2, r2, #25
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003586:	06d2      	lsls	r2, r2, #27
 8003588:	430a      	orrs	r2, r1
 800358a:	4943      	ldr	r1, [pc, #268]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 800358c:	4313      	orrs	r3, r2
 800358e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b41      	ldr	r3, [pc, #260]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a40      	ldr	r2, [pc, #256]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b3e      	ldr	r3, [pc, #248]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd f8d0 	bl	800074c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd f8cc 	bl	800074c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e066      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b35      	ldr	r3, [pc, #212]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x530>
 80035ce:	e05e      	b.n	800368e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d0:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 80035d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd f8b6 	bl	800074c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd f8b2 	bl	800074c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e04c      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f6:	4b28      	ldr	r3, [pc, #160]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003602:	4b25      	ldr	r3, [pc, #148]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	4924      	ldr	r1, [pc, #144]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <HAL_RCC_OscConfig+0x620>)
 800360a:	4013      	ands	r3, r2
 800360c:	60cb      	str	r3, [r1, #12]
 800360e:	e03e      	b.n	800368e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e039      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800361c:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <HAL_RCC_OscConfig+0x618>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	429a      	cmp	r2, r3
 800362e:	d12c      	bne.n	800368a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	3b01      	subs	r3, #1
 800363c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d123      	bne.n	800368a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d11b      	bne.n	800368a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d113      	bne.n	800368a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	3b01      	subs	r3, #1
 8003670:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d109      	bne.n	800368a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	019f800c 	.word	0x019f800c
 80036a0:	feeefffc 	.word	0xfeeefffc

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e11e      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b91      	ldr	r3, [pc, #580]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d910      	bls.n	80036ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 020f 	bic.w	r2, r3, #15
 80036d2:	498c      	ldr	r1, [pc, #560]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b8a      	ldr	r3, [pc, #552]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e106      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d073      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d129      	bne.n	8003754 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003700:	4b81      	ldr	r3, [pc, #516]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0f4      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003710:	f000 f966 	bl	80039e0 <RCC_GetSysClockFreqFromPLLSource>
 8003714:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4a7c      	ldr	r2, [pc, #496]	@ (800390c <HAL_RCC_ClockConfig+0x268>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d93f      	bls.n	800379e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800371e:	4b7a      	ldr	r3, [pc, #488]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003732:	2b00      	cmp	r3, #0
 8003734:	d033      	beq.n	800379e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d12f      	bne.n	800379e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800373e:	4b72      	ldr	r3, [pc, #456]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003746:	4a70      	ldr	r2, [pc, #448]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800374c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e024      	b.n	800379e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d107      	bne.n	800376c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375c:	4b6a      	ldr	r3, [pc, #424]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0c6      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376c:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0be      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800377c:	f000 f8ce 	bl	800391c <HAL_RCC_GetSysClockFreq>
 8003780:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4a61      	ldr	r2, [pc, #388]	@ (800390c <HAL_RCC_ClockConfig+0x268>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d909      	bls.n	800379e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800378a:	4b5f      	ldr	r3, [pc, #380]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003792:	4a5d      	ldr	r2, [pc, #372]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003798:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b5a      	ldr	r3, [pc, #360]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4957      	ldr	r1, [pc, #348]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fc ffcc 	bl	800074c <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fc ffc8 	bl	800074c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e095      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d023      	beq.n	8003834 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b43      	ldr	r3, [pc, #268]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a42      	ldr	r2, [pc, #264]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80037fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003802:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003810:	4b3d      	ldr	r3, [pc, #244]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003818:	4a3b      	ldr	r2, [pc, #236]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800381a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800381e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b39      	ldr	r3, [pc, #228]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4936      	ldr	r1, [pc, #216]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
 8003832:	e008      	b.n	8003846 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b80      	cmp	r3, #128	@ 0x80
 8003838:	d105      	bne.n	8003846 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800383a:	4b33      	ldr	r3, [pc, #204]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4a32      	ldr	r2, [pc, #200]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 8003840:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003844:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003846:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d21d      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003854:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 020f 	bic.w	r2, r3, #15
 800385c:	4929      	ldr	r1, [pc, #164]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003864:	f7fc ff72 	bl	800074c <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fc ff6e 	bl	800074c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e03b      	b.n	80038fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d1ed      	bne.n	800386c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4917      	ldr	r1, [pc, #92]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490f      	ldr	r1, [pc, #60]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ce:	f000 f825 	bl	800391c <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490c      	ldr	r1, [pc, #48]	@ (8003910 <HAL_RCC_ClockConfig+0x26c>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <HAL_RCC_ClockConfig+0x270>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_RCC_ClockConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fede 	bl	80006b4 <HAL_InitTick>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40022000 	.word	0x40022000
 8003908:	40021000 	.word	0x40021000
 800390c:	04c4b400 	.word	0x04c4b400
 8003910:	08007ee8 	.word	0x08007ee8
 8003914:	20000000 	.word	0x20000000
 8003918:	20000004 	.word	0x20000004

0800391c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003922:	4b2c      	ldr	r3, [pc, #176]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b04      	cmp	r3, #4
 800392c:	d102      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800392e:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e047      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003934:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d102      	bne.n	8003946 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003940:	4b26      	ldr	r3, [pc, #152]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e03e      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003946:	4b23      	ldr	r3, [pc, #140]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d136      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003952:	4b20      	ldr	r3, [pc, #128]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	3301      	adds	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d10c      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397a:	68d2      	ldr	r2, [r2, #12]
 800397c:	0a12      	lsrs	r2, r2, #8
 800397e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
      break;
 8003988:	e00c      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800398a:	4a13      	ldr	r2, [pc, #76]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	4a10      	ldr	r2, [pc, #64]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003994:	68d2      	ldr	r2, [r2, #12]
 8003996:	0a12      	lsrs	r2, r2, #8
 8003998:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0e5b      	lsrs	r3, r3, #25
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	3301      	adds	r3, #1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e001      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039c4:	693b      	ldr	r3, [r7, #16]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	007a1200 	.word	0x007a1200

080039e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3301      	adds	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d10c      	bne.n	8003a1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a04:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	4a14      	ldr	r2, [pc, #80]	@ (8003a60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a0e:	68d2      	ldr	r2, [r2, #12]
 8003a10:	0a12      	lsrs	r2, r2, #8
 8003a12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	617b      	str	r3, [r7, #20]
    break;
 8003a1c:	e00c      	b.n	8003a38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a1e:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	4a0e      	ldr	r2, [pc, #56]	@ (8003a60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	0a12      	lsrs	r2, r2, #8
 8003a2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    break;
 8003a36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a38:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	0e5b      	lsrs	r3, r3, #25
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	3301      	adds	r3, #1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a52:	687b      	ldr	r3, [r7, #4]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40021000 	.word	0x40021000
 8003a64:	007a1200 	.word	0x007a1200
 8003a68:	00f42400 	.word	0x00f42400

08003a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a74:	2300      	movs	r3, #0
 8003a76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8098 	beq.w	8003bba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8e:	4b43      	ldr	r3, [pc, #268]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10d      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	4b40      	ldr	r3, [pc, #256]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a39      	ldr	r2, [pc, #228]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac2:	f7fc fe43 	bl	800074c <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac8:	e009      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fc fe3f 	bl	800074c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d902      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	74fb      	strb	r3, [r7, #19]
        break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ade:	4b30      	ldr	r3, [pc, #192]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ef      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d159      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003af0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01e      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d019      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b0c:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b18:	4b20      	ldr	r3, [pc, #128]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	4b1c      	ldr	r3, [pc, #112]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b38:	4a18      	ldr	r2, [pc, #96]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fc fdff 	bl	800074c <HAL_GetTick>
 8003b4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b50:	e00b      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fc fdfb 	bl	800074c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d902      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	74fb      	strb	r3, [r7, #19]
            break;
 8003b68:	e006      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ec      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b7e:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b94:	e008      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	74bb      	strb	r3, [r7, #18]
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba8:	7c7b      	ldrb	r3, [r7, #17]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bae:	4ba6      	ldr	r3, [pc, #664]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	4aa5      	ldr	r2, [pc, #660]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bc6:	4ba0      	ldr	r3, [pc, #640]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f023 0203 	bic.w	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	499c      	ldr	r1, [pc, #624]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003be8:	4b97      	ldr	r3, [pc, #604]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	f023 020c 	bic.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	4994      	ldr	r1, [pc, #592]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c0a:	4b8f      	ldr	r3, [pc, #572]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	498b      	ldr	r1, [pc, #556]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c2c:	4b86      	ldr	r3, [pc, #536]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	4983      	ldr	r1, [pc, #524]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	497a      	ldr	r1, [pc, #488]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c70:	4b75      	ldr	r3, [pc, #468]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	4972      	ldr	r1, [pc, #456]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c92:	4b6d      	ldr	r3, [pc, #436]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4969      	ldr	r1, [pc, #420]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb4:	4b64      	ldr	r3, [pc, #400]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4961      	ldr	r1, [pc, #388]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	4958      	ldr	r1, [pc, #352]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	4950      	ldr	r1, [pc, #320]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d18:	4b4b      	ldr	r3, [pc, #300]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d22:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d30:	4b45      	ldr	r3, [pc, #276]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	4942      	ldr	r1, [pc, #264]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b3d      	ldr	r3, [pc, #244]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d68:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	4934      	ldr	r1, [pc, #208]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b2f      	ldr	r3, [pc, #188]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da0:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dae:	4926      	ldr	r1, [pc, #152]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d015      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	4918      	ldr	r1, [pc, #96]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003df6:	d105      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df8:	4b13      	ldr	r3, [pc, #76]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e10:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1e:	490a      	ldr	r1, [pc, #40]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a04      	ldr	r2, [pc, #16]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000

08003e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e5c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003e60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e82:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003e86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b0a7      	sub	sp, #156	@ 0x9c
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f12:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	78db      	ldrb	r3, [r3, #3]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d81f      	bhi.n	8003f5e <USB_ActivateEndpoint+0x72>
 8003f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <USB_ActivateEndpoint+0x38>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f67 	.word	0x08003f67
 8003f30:	08003f43 	.word	0x08003f43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f34:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f3c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003f40:	e012      	b.n	8003f68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f42:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f46:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003f4a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003f4e:	e00b      	b.n	8003f68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f50:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f58:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003f5c:	e004      	b.n	8003f68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8003f64:	e000      	b.n	8003f68 <USB_ActivateEndpoint+0x7c>
      break;
 8003f66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b21b      	sxth	r3, r3
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b21b      	sxth	r3, r3
 8003fae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	441a      	add	r2, r3
 8003fbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	7b1b      	ldrb	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 8180 	bne.w	80042de <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8084 	beq.w	80040f0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	00da      	lsls	r2, r3, #3
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	88db      	ldrh	r3, [r3, #6]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	827b      	strh	r3, [r7, #18]
 800402a:	8a7b      	ldrh	r3, [r7, #18]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01b      	beq.n	800406c <USB_ActivateEndpoint+0x180>
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404a:	823b      	strh	r3, [r7, #16]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	8a3b      	ldrh	r3, [r7, #16]
 8004058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004064:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004068:	b29b      	uxth	r3, r3
 800406a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	78db      	ldrb	r3, [r3, #3]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d020      	beq.n	80040b6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800408a:	81bb      	strh	r3, [r7, #12]
 800408c:	89bb      	ldrh	r3, [r7, #12]
 800408e:	f083 0320 	eor.w	r3, r3, #32
 8004092:	81bb      	strh	r3, [r7, #12]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	89bb      	ldrh	r3, [r7, #12]
 80040a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8013      	strh	r3, [r2, #0]
 80040b4:	e3f9      	b.n	80048aa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040cc:	81fb      	strh	r3, [r7, #14]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	441a      	add	r2, r3
 80040d8:	89fb      	ldrh	r3, [r7, #14]
 80040da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	8013      	strh	r3, [r2, #0]
 80040ee:	e3dc      	b.n	80048aa <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	4413      	add	r3, r2
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	00da      	lsls	r2, r3, #3
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	4413      	add	r3, r2
 800410e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	88db      	ldrh	r3, [r3, #6]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004122:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	4413      	add	r3, r2
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00da      	lsls	r2, r3, #3
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	4413      	add	r3, r2
 8004142:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004152:	b29a      	uxth	r2, r3
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <USB_ActivateEndpoint+0x28a>
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416e:	b29a      	uxth	r2, r3
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	e041      	b.n	80041fa <USB_ActivateEndpoint+0x30e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b3e      	cmp	r3, #62	@ 0x3e
 800417c:	d81c      	bhi.n	80041b8 <USB_ActivateEndpoint+0x2cc>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <USB_ActivateEndpoint+0x2b2>
 8004194:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004198:	3301      	adds	r3, #1
 800419a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	029b      	lsls	r3, r3, #10
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	e020      	b.n	80041fa <USB_ActivateEndpoint+0x30e>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <USB_ActivateEndpoint+0x2ec>
 80041ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041d2:	3b01      	subs	r3, #1
 80041d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004208:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01b      	beq.n	800424a <USB_ActivateEndpoint+0x35e>
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004228:	843b      	strh	r3, [r7, #32]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8c3b      	ldrh	r3, [r7, #32]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800423e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d124      	bne.n	800429c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004268:	83bb      	strh	r3, [r7, #28]
 800426a:	8bbb      	ldrh	r3, [r7, #28]
 800426c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004270:	83bb      	strh	r3, [r7, #28]
 8004272:	8bbb      	ldrh	r3, [r7, #28]
 8004274:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004278:	83bb      	strh	r3, [r7, #28]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	8bbb      	ldrh	r3, [r7, #28]
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
 800429a:	e306      	b.n	80048aa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b2:	83fb      	strh	r3, [r7, #30]
 80042b4:	8bfb      	ldrh	r3, [r7, #30]
 80042b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042ba:	83fb      	strh	r3, [r7, #30]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	8bfb      	ldrh	r3, [r7, #30]
 80042c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d8:	b29b      	uxth	r3, r3
 80042da:	8013      	strh	r3, [r2, #0]
 80042dc:	e2e5      	b.n	80048aa <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d11e      	bne.n	8004324 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800430e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004316:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800431a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800434c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435c:	b29b      	uxth	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004370:	4413      	add	r3, r2
 8004372:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	00da      	lsls	r2, r3, #3
 800437a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800437c:	4413      	add	r3, r2
 800437e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004382:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	891b      	ldrh	r3, [r3, #8]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	677b      	str	r3, [r7, #116]	@ 0x74
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800439e:	b29b      	uxth	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a4:	4413      	add	r3, r2
 80043a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	00da      	lsls	r2, r3, #3
 80043ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b0:	4413      	add	r3, r2
 80043b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	895b      	ldrh	r3, [r3, #10]
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 81af 	bne.w	8004730 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80043e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80043e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01d      	beq.n	800442a <USB_ActivateEndpoint+0x53e>
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004404:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800441a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800441e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800443a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01d      	beq.n	8004482 <USB_ActivateEndpoint+0x596>
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d16b      	bne.n	8004562 <USB_ActivateEndpoint+0x676>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004494:	b29b      	uxth	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449a:	4413      	add	r3, r2
 800449c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	00da      	lsls	r2, r3, #3
 80044a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a6:	4413      	add	r3, r2
 80044a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <USB_ActivateEndpoint+0x5f0>
 80044c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044d8:	801a      	strh	r2, [r3, #0]
 80044da:	e05d      	b.n	8004598 <USB_ActivateEndpoint+0x6ac>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80044e2:	d81c      	bhi.n	800451e <USB_ActivateEndpoint+0x632>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <USB_ActivateEndpoint+0x618>
 80044fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044fe:	3301      	adds	r3, #1
 8004500:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29a      	uxth	r2, r3
 800450a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450e:	b29b      	uxth	r3, r3
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	b29b      	uxth	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b29a      	uxth	r2, r3
 8004518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e03c      	b.n	8004598 <USB_ActivateEndpoint+0x6ac>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <USB_ActivateEndpoint+0x652>
 8004534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004538:	3b01      	subs	r3, #1
 800453a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800453e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29a      	uxth	r2, r3
 8004544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004548:	b29b      	uxth	r3, r3
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	b29b      	uxth	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b29b      	uxth	r3, r3
 8004552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800455a:	b29a      	uxth	r2, r3
 800455c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	e01a      	b.n	8004598 <USB_ActivateEndpoint+0x6ac>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d116      	bne.n	8004598 <USB_ActivateEndpoint+0x6ac>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	657b      	str	r3, [r7, #84]	@ 0x54
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457a:	4413      	add	r3, r2
 800457c:	657b      	str	r3, [r7, #84]	@ 0x54
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	00da      	lsls	r2, r3, #3
 8004584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004586:	4413      	add	r3, r2
 8004588:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800458c:	653b      	str	r3, [r7, #80]	@ 0x50
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	b29a      	uxth	r2, r3
 8004594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	647b      	str	r3, [r7, #68]	@ 0x44
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d16b      	bne.n	800467c <USB_ActivateEndpoint+0x790>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b4:	4413      	add	r3, r2
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	00da      	lsls	r2, r3, #3
 80045be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <USB_ActivateEndpoint+0x70a>
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	e05b      	b.n	80046ae <USB_ActivateEndpoint+0x7c2>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80045fc:	d81c      	bhi.n	8004638 <USB_ActivateEndpoint+0x74c>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <USB_ActivateEndpoint+0x732>
 8004614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004618:	3301      	adds	r3, #1
 800461a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29a      	uxth	r2, r3
 8004624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004628:	b29b      	uxth	r3, r3
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	b29b      	uxth	r3, r3
 800462e:	4313      	orrs	r3, r2
 8004630:	b29a      	uxth	r2, r3
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	e03a      	b.n	80046ae <USB_ActivateEndpoint+0x7c2>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <USB_ActivateEndpoint+0x76c>
 800464e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004652:	3b01      	subs	r3, #1
 8004654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004662:	b29b      	uxth	r3, r3
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	b29b      	uxth	r3, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004674:	b29a      	uxth	r2, r3
 8004676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e018      	b.n	80046ae <USB_ActivateEndpoint+0x7c2>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d114      	bne.n	80046ae <USB_ActivateEndpoint+0x7c2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004690:	4413      	add	r3, r2
 8004692:	647b      	str	r3, [r7, #68]	@ 0x44
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	00da      	lsls	r2, r3, #3
 800469a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469c:	4413      	add	r3, r2
 800469e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ac:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80046c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80046ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e0bc      	b.n	80048aa <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8004740:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01d      	beq.n	8004788 <USB_ActivateEndpoint+0x89c>
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004762:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800477c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004784:	b29b      	uxth	r3, r3
 8004786:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004798:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01d      	beq.n	80047e0 <USB_ActivateEndpoint+0x8f4>
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d024      	beq.n	8004832 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004802:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004806:	f083 0320 	eor.w	r3, r3, #32
 800480a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800481c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]
 8004830:	e01d      	b.n	800486e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004848:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004884:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80048aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	379c      	adds	r7, #156	@ 0x9c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop

080048bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048bc:	b480      	push	{r7}
 80048be:	b08d      	sub	sp, #52	@ 0x34
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	7b1b      	ldrb	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 808e 	bne.w	80049ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d044      	beq.n	8004962 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	81bb      	strh	r3, [r7, #12]
 80048e6:	89bb      	ldrh	r3, [r7, #12]
 80048e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <USB_DeactivateEndpoint+0x6c>
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004906:	817b      	strh	r3, [r7, #10]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	897b      	ldrh	r3, [r7, #10]
 8004914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004920:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800493e:	813b      	strh	r3, [r7, #8]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	893b      	ldrh	r3, [r7, #8]
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]
 8004960:	e192      	b.n	8004c88 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	827b      	strh	r3, [r7, #18]
 8004970:	8a7b      	ldrh	r3, [r7, #18]
 8004972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <USB_DeactivateEndpoint+0xf6>
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800498c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004990:	823b      	strh	r3, [r7, #16]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	8a3b      	ldrh	r3, [r7, #16]
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c8:	81fb      	strh	r3, [r7, #14]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	89fb      	ldrh	r3, [r7, #14]
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]
 80049ea:	e14d      	b.n	8004c88 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 80a5 	bne.w	8004b40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	843b      	strh	r3, [r7, #32]
 8004a04:	8c3b      	ldrh	r3, [r7, #32]
 8004a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01b      	beq.n	8004a46 <USB_DeactivateEndpoint+0x18a>
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a24:	83fb      	strh	r3, [r7, #30]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8bfb      	ldrh	r3, [r7, #30]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	83bb      	strh	r3, [r7, #28]
 8004a54:	8bbb      	ldrh	r3, [r7, #28]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01b      	beq.n	8004a96 <USB_DeactivateEndpoint+0x1da>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a74:	837b      	strh	r3, [r7, #26]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8b7b      	ldrh	r3, [r7, #26]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aac:	833b      	strh	r3, [r7, #24]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8b3b      	ldrh	r3, [r7, #24]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae4:	82fb      	strh	r3, [r7, #22]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8afb      	ldrh	r3, [r7, #22]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b1c:	82bb      	strh	r3, [r7, #20]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	8abb      	ldrh	r3, [r7, #20]
 8004b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8013      	strh	r3, [r2, #0]
 8004b3e:	e0a3      	b.n	8004c88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004b4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <USB_DeactivateEndpoint+0x2d4>
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004b9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <USB_DeactivateEndpoint+0x324>
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c66:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3734      	adds	r7, #52	@ 0x34
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b0ac      	sub	sp, #176	@ 0xb0
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	f040 84ca 	bne.w	800563e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d904      	bls.n	8004cc0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cbe:	e003      	b.n	8004cc8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	7b1b      	ldrb	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d122      	bne.n	8004d16 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6959      	ldr	r1, [r3, #20]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	88da      	ldrh	r2, [r3, #6]
 8004cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 febd 	bl	8005a5e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	00da      	lsls	r2, r3, #3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	f000 bc6f 	b.w	80055f4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	78db      	ldrb	r3, [r3, #3]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	f040 831e 	bne.w	800535c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6a1a      	ldr	r2, [r3, #32]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f240 82cf 	bls.w	80052cc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d44:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d5e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 814f 	beq.w	800502e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d16b      	bne.n	8004e74 <USB_EPStartXfer+0x1de>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	4413      	add	r3, r2
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	00da      	lsls	r2, r3, #3
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <USB_EPStartXfer+0x158>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e05b      	b.n	8004ea6 <USB_EPStartXfer+0x210>
 8004dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004df2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004df4:	d81c      	bhi.n	8004e30 <USB_EPStartXfer+0x19a>
 8004df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <USB_EPStartXfer+0x180>
 8004e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e10:	3301      	adds	r3, #1
 8004e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e03a      	b.n	8004ea6 <USB_EPStartXfer+0x210>
 8004e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <USB_EPStartXfer+0x1ba>
 8004e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e018      	b.n	8004ea6 <USB_EPStartXfer+0x210>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d114      	bne.n	8004ea6 <USB_EPStartXfer+0x210>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	4413      	add	r3, r2
 8004e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	00da      	lsls	r2, r3, #3
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	4413      	add	r3, r2
 8004e96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	895b      	ldrh	r3, [r3, #10]
 8004eaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6959      	ldr	r1, [r3, #20]
 8004eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fdce 	bl	8005a5e <USB_WritePMA>
            ep->xfer_buff += len;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eca:	441a      	add	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d907      	bls.n	8004eec <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ee4:	1ad2      	subs	r2, r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	621a      	str	r2, [r3, #32]
 8004eea:	e006      	b.n	8004efa <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d16b      	bne.n	8004fda <USB_EPStartXfer+0x344>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	4413      	add	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	00da      	lsls	r2, r3, #3
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <USB_EPStartXfer+0x2be>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	e05d      	b.n	8005010 <USB_EPStartXfer+0x37a>
 8004f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f58:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f5a:	d81c      	bhi.n	8004f96 <USB_EPStartXfer+0x300>
 8004f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <USB_EPStartXfer+0x2e6>
 8004f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f76:	3301      	adds	r3, #1
 8004f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e03c      	b.n	8005010 <USB_EPStartXfer+0x37a>
 8004f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <USB_EPStartXfer+0x320>
 8004fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	e01a      	b.n	8005010 <USB_EPStartXfer+0x37a>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d116      	bne.n	8005010 <USB_EPStartXfer+0x37a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	4413      	add	r3, r2
 8005000:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800500a:	b29a      	uxth	r2, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	891b      	ldrh	r3, [r3, #8]
 8005014:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6959      	ldr	r1, [r3, #20]
 800501c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005020:	b29b      	uxth	r3, r3
 8005022:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd19 	bl	8005a5e <USB_WritePMA>
 800502c:	e2e2      	b.n	80055f4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d16b      	bne.n	800510e <USB_EPStartXfer+0x478>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005040:	b29b      	uxth	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005046:	4413      	add	r3, r2
 8005048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	00da      	lsls	r2, r3, #3
 8005050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005052:	4413      	add	r3, r2
 8005054:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005058:	647b      	str	r3, [r7, #68]	@ 0x44
 800505a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005064:	b29a      	uxth	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <USB_EPStartXfer+0x3f2>
 8005072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e05d      	b.n	8005144 <USB_EPStartXfer+0x4ae>
 8005088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800508c:	2b3e      	cmp	r3, #62	@ 0x3e
 800508e:	d81c      	bhi.n	80050ca <USB_EPStartXfer+0x434>
 8005090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800509a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <USB_EPStartXfer+0x41a>
 80050a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050aa:	3301      	adds	r3, #1
 80050ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	029b      	lsls	r3, r3, #10
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4313      	orrs	r3, r2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	e03c      	b.n	8005144 <USB_EPStartXfer+0x4ae>
 80050ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <USB_EPStartXfer+0x454>
 80050e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050e4:	3b01      	subs	r3, #1
 80050e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005106:	b29a      	uxth	r2, r3
 8005108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e01a      	b.n	8005144 <USB_EPStartXfer+0x4ae>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d116      	bne.n	8005144 <USB_EPStartXfer+0x4ae>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	653b      	str	r3, [r7, #80]	@ 0x50
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005126:	4413      	add	r3, r2
 8005128:	653b      	str	r3, [r7, #80]	@ 0x50
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	00da      	lsls	r2, r3, #3
 8005130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005132:	4413      	add	r3, r2
 8005134:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800513a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800513e:	b29a      	uxth	r2, r3
 8005140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005142:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	891b      	ldrh	r3, [r3, #8]
 8005148:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6959      	ldr	r1, [r3, #20]
 8005150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005154:	b29b      	uxth	r3, r3
 8005156:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fc7f 	bl	8005a5e <USB_WritePMA>
            ep->xfer_buff += len;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005168:	441a      	add	r2, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	d907      	bls.n	800518a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	621a      	str	r2, [r3, #32]
 8005188:	e006      	b.n	8005198 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2200      	movs	r2, #0
 8005196:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	643b      	str	r3, [r7, #64]	@ 0x40
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d16b      	bne.n	800527c <USB_EPStartXfer+0x5e6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	4413      	add	r3, r2
 80051b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	00da      	lsls	r2, r3, #3
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	4413      	add	r3, r2
 80051c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <USB_EPStartXfer+0x560>
 80051e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e05b      	b.n	80052ae <USB_EPStartXfer+0x618>
 80051f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80051fc:	d81c      	bhi.n	8005238 <USB_EPStartXfer+0x5a2>
 80051fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <USB_EPStartXfer+0x588>
 8005214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005218:	3301      	adds	r3, #1
 800521a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800521e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29a      	uxth	r2, r3
 8005224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005228:	b29b      	uxth	r3, r3
 800522a:	029b      	lsls	r3, r3, #10
 800522c:	b29b      	uxth	r3, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	b29a      	uxth	r2, r3
 8005232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e03a      	b.n	80052ae <USB_EPStartXfer+0x618>
 8005238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <USB_EPStartXfer+0x5c2>
 800524e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005252:	3b01      	subs	r3, #1
 8005254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29a      	uxth	r2, r3
 800525e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005262:	b29b      	uxth	r3, r3
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	b29b      	uxth	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005274:	b29a      	uxth	r2, r3
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e018      	b.n	80052ae <USB_EPStartXfer+0x618>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d114      	bne.n	80052ae <USB_EPStartXfer+0x618>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005290:	4413      	add	r3, r2
 8005292:	643b      	str	r3, [r7, #64]	@ 0x40
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800529c:	4413      	add	r3, r2
 800529e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	895b      	ldrh	r3, [r3, #10]
 80052b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6959      	ldr	r1, [r3, #20]
 80052ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fbca 	bl	8005a5e <USB_WritePMA>
 80052ca:	e193      	b.n	80055f4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005320:	4413      	add	r3, r2
 8005322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	00da      	lsls	r2, r3, #3
 800532a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800532c:	4413      	add	r3, r2
 800532e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005332:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005338:	b29a      	uxth	r2, r3
 800533a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800533c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	891b      	ldrh	r3, [r3, #8]
 8005342:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6959      	ldr	r1, [r3, #20]
 800534a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800534e:	b29b      	uxth	r3, r3
 8005350:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb82 	bl	8005a5e <USB_WritePMA>
 800535a:	e14b      	b.n	80055f4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 809a 	beq.w	80054b6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	673b      	str	r3, [r7, #112]	@ 0x70
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d16b      	bne.n	8005466 <USB_EPStartXfer+0x7d0>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800539e:	4413      	add	r3, r2
 80053a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	00da      	lsls	r2, r3, #3
 80053a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053aa:	4413      	add	r3, r2
 80053ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80053b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <USB_EPStartXfer+0x74a>
 80053ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e05b      	b.n	8005498 <USB_EPStartXfer+0x802>
 80053e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80053e6:	d81c      	bhi.n	8005422 <USB_EPStartXfer+0x78c>
 80053e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <USB_EPStartXfer+0x772>
 80053fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005402:	3301      	adds	r3, #1
 8005404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29a      	uxth	r2, r3
 800540e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	b29a      	uxth	r2, r3
 800541c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e03a      	b.n	8005498 <USB_EPStartXfer+0x802>
 8005422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800542c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <USB_EPStartXfer+0x7ac>
 8005438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800543c:	3b01      	subs	r3, #1
 800543e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800544c:	b29b      	uxth	r3, r3
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	b29b      	uxth	r3, r3
 8005452:	4313      	orrs	r3, r2
 8005454:	b29b      	uxth	r3, r3
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29a      	uxth	r2, r3
 8005460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e018      	b.n	8005498 <USB_EPStartXfer+0x802>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d114      	bne.n	8005498 <USB_EPStartXfer+0x802>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800547a:	4413      	add	r3, r2
 800547c:	673b      	str	r3, [r7, #112]	@ 0x70
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	00da      	lsls	r2, r3, #3
 8005484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005486:	4413      	add	r3, r2
 8005488:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800548c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800548e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005492:	b29a      	uxth	r2, r3
 8005494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005496:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	895b      	ldrh	r3, [r3, #10]
 800549c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6959      	ldr	r1, [r3, #20]
 80054a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fad5 	bl	8005a5e <USB_WritePMA>
 80054b4:	e09e      	b.n	80055f4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d16b      	bne.n	8005596 <USB_EPStartXfer+0x900>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054ce:	4413      	add	r3, r2
 80054d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	00da      	lsls	r2, r3, #3
 80054d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054da:	4413      	add	r3, r2
 80054dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <USB_EPStartXfer+0x87a>
 80054fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e063      	b.n	80055d8 <USB_EPStartXfer+0x942>
 8005510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005514:	2b3e      	cmp	r3, #62	@ 0x3e
 8005516:	d81c      	bhi.n	8005552 <USB_EPStartXfer+0x8bc>
 8005518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <USB_EPStartXfer+0x8a2>
 800552e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005532:	3301      	adds	r3, #1
 8005534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29a      	uxth	r2, r3
 800553e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005542:	b29b      	uxth	r3, r3
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	b29b      	uxth	r3, r3
 8005548:	4313      	orrs	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e042      	b.n	80055d8 <USB_EPStartXfer+0x942>
 8005552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800555c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <USB_EPStartXfer+0x8dc>
 8005568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800556c:	3b01      	subs	r3, #1
 800556e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29b      	uxth	r3, r3
 8005582:	4313      	orrs	r3, r2
 8005584:	b29b      	uxth	r3, r3
 8005586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558e:	b29a      	uxth	r2, r3
 8005590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e020      	b.n	80055d8 <USB_EPStartXfer+0x942>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d11c      	bne.n	80055d8 <USB_EPStartXfer+0x942>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055b2:	4413      	add	r3, r2
 80055b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	00da      	lsls	r2, r3, #3
 80055be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	891b      	ldrh	r3, [r3, #8]
 80055dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6959      	ldr	r1, [r3, #20]
 80055e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa35 	bl	8005a5e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800560a:	817b      	strh	r3, [r7, #10]
 800560c:	897b      	ldrh	r3, [r7, #10]
 800560e:	f083 0310 	eor.w	r3, r3, #16
 8005612:	817b      	strh	r3, [r7, #10]
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	f083 0320 	eor.w	r3, r3, #32
 800561a:	817b      	strh	r3, [r7, #10]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005638:	b29b      	uxth	r3, r3
 800563a:	8013      	strh	r3, [r2, #0]
 800563c:	e0d5      	b.n	80057ea <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	7b1b      	ldrb	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d156      	bne.n	80056f4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d122      	bne.n	8005694 <USB_EPStartXfer+0x9fe>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d11e      	bne.n	8005694 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005686:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80056a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056aa:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d907      	bls.n	80056ec <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	1ad2      	subs	r2, r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	619a      	str	r2, [r3, #24]
 80056ea:	e054      	b.n	8005796 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	619a      	str	r2, [r3, #24]
 80056f2:	e050      	b.n	8005796 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d142      	bne.n	8005782 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d048      	beq.n	8005796 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005714:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <USB_EPStartXfer+0xa96>
 8005720:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800572c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005734:	2b00      	cmp	r3, #0
 8005736:	d12e      	bne.n	8005796 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005738:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d128      	bne.n	8005796 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800576c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005778:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800577c:	b29b      	uxth	r3, r3
 800577e:	8013      	strh	r3, [r2, #0]
 8005780:	e009      	b.n	8005796 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d103      	bne.n	8005792 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2200      	movs	r2, #0
 800578e:	619a      	str	r2, [r3, #24]
 8005790:	e001      	b.n	8005796 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02a      	b.n	80057ec <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80057b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80057b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80057bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80057c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	37b0      	adds	r7, #176	@ 0xb0
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d020      	beq.n	8005848 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581c:	81bb      	strh	r3, [r7, #12]
 800581e:	89bb      	ldrh	r3, [r7, #12]
 8005820:	f083 0310 	eor.w	r3, r3, #16
 8005824:	81bb      	strh	r3, [r7, #12]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	89bb      	ldrh	r3, [r7, #12]
 8005832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]
 8005846:	e01f      	b.n	8005888 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	81fb      	strh	r3, [r7, #14]
 8005860:	89fb      	ldrh	r3, [r7, #14]
 8005862:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005866:	81fb      	strh	r3, [r7, #14]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005896:	b480      	push	{r7}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d04c      	beq.n	8005942 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	823b      	strh	r3, [r7, #16]
 80058b6:	8a3b      	ldrh	r3, [r7, #16]
 80058b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01b      	beq.n	80058f8 <USB_EPClearStall+0x62>
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	81fb      	strh	r3, [r7, #14]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	78db      	ldrb	r3, [r3, #3]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d06c      	beq.n	80059da <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005916:	81bb      	strh	r3, [r7, #12]
 8005918:	89bb      	ldrh	r3, [r7, #12]
 800591a:	f083 0320 	eor.w	r3, r3, #32
 800591e:	81bb      	strh	r3, [r7, #12]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	89bb      	ldrh	r3, [r7, #12]
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
 8005940:	e04b      	b.n	80059da <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	82fb      	strh	r3, [r7, #22]
 8005950:	8afb      	ldrh	r3, [r7, #22]
 8005952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01b      	beq.n	8005992 <USB_EPClearStall+0xfc>
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005970:	82bb      	strh	r3, [r7, #20]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	8abb      	ldrh	r3, [r7, #20]
 800597e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800598a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a8:	827b      	strh	r3, [r7, #18]
 80059aa:	8a7b      	ldrh	r3, [r7, #18]
 80059ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059b0:	827b      	strh	r3, [r7, #18]
 80059b2:	8a7b      	ldrh	r3, [r7, #18]
 80059b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059b8:	827b      	strh	r3, [r7, #18]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	8a7b      	ldrh	r3, [r7, #18]
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2280      	movs	r2, #128	@ 0x80
 80059fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b08b      	sub	sp, #44	@ 0x2c
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	80fb      	strh	r3, [r7, #6]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a74:	88bb      	ldrh	r3, [r7, #4]
 8005a76:	3301      	adds	r3, #1
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a8e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a94:	e01b      	b.n	8005ace <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	b21a      	sxth	r2, r3
 8005aa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	8a7a      	ldrh	r2, [r7, #18]
 8005ab4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	3302      	adds	r3, #2
 8005aba:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	3b01      	subs	r3, #1
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e0      	bne.n	8005a96 <USB_WritePMA+0x38>
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	372c      	adds	r7, #44	@ 0x2c
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b08b      	sub	sp, #44	@ 0x2c
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	4611      	mov	r1, r2
 8005aee:	461a      	mov	r2, r3
 8005af0:	460b      	mov	r3, r1
 8005af2:	80fb      	strh	r3, [r7, #6]
 8005af4:	4613      	mov	r3, r2
 8005af6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005af8:	88bb      	ldrh	r3, [r7, #4]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b12:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b18:	e018      	b.n	8005b4c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	3302      	adds	r3, #2
 8005b26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3301      	adds	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	0a1b      	lsrs	r3, r3, #8
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e3      	bne.n	8005b1a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	701a      	strb	r2, [r3, #0]
  }
}
 8005b6e:	bf00      	nop
 8005b70:	372c      	adds	r7, #44	@ 0x2c
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b86:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005b8a:	f002 f907 	bl	8007d9c <USBD_static_malloc>
 8005b8e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e066      	b.n	8005c70 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7c1b      	ldrb	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d119      	bne.n	8005be6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	2181      	movs	r1, #129	@ 0x81
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 ff95 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bca:	2202      	movs	r2, #2
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 ff8b 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2210      	movs	r2, #16
 8005be0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8005be4:	e016      	b.n	8005c14 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005be6:	2340      	movs	r3, #64	@ 0x40
 8005be8:	2202      	movs	r2, #2
 8005bea:	2181      	movs	r1, #129	@ 0x81
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 ff7c 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bf8:	2340      	movs	r3, #64	@ 0x40
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 ff73 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2210      	movs	r2, #16
 8005c10:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c14:	2308      	movs	r3, #8
 8005c16:	2203      	movs	r2, #3
 8005c18:	2182      	movs	r1, #130	@ 0x82
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 ff65 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7c1b      	ldrb	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c54:	2101      	movs	r1, #1
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f002 f836 	bl	8007cc8 <USBD_LL_PrepareReceive>
 8005c5c:	e007      	b.n	8005c6e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c64:	2340      	movs	r3, #64	@ 0x40
 8005c66:	2101      	movs	r1, #1
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f002 f82d 	bl	8007cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c84:	2181      	movs	r1, #129	@ 0x81
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 ff55 	bl	8007b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c92:	2101      	movs	r1, #1
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 ff4e 	bl	8007b36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ca2:	2182      	movs	r1, #130	@ 0x82
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 ff46 	bl	8007b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00e      	beq.n	8005ce2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f002 f86f 	bl	8007db8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e0af      	b.n	8005e74 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d03f      	beq.n	8005da0 <USBD_CDC_Setup+0xb4>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	f040 809f 	bne.w	8005e64 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	88db      	ldrh	r3, [r3, #6]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02e      	beq.n	8005d8c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	b25b      	sxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da16      	bge.n	8005d66 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	88d2      	ldrh	r2, [r2, #6]
 8005d4a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	88db      	ldrh	r3, [r3, #6]
 8005d50:	2b07      	cmp	r3, #7
 8005d52:	bf28      	it	cs
 8005d54:	2307      	movcs	r3, #7
 8005d56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	89fa      	ldrh	r2, [r7, #14]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 facd 	bl	80072fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005d64:	e085      	b.n	8005e72 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	785a      	ldrb	r2, [r3, #1]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	88db      	ldrh	r3, [r3, #6]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d7c:	6939      	ldr	r1, [r7, #16]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	88db      	ldrh	r3, [r3, #6]
 8005d82:	461a      	mov	r2, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fae6 	bl	8007356 <USBD_CtlPrepareRx>
      break;
 8005d8a:	e072      	b.n	8005e72 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	7850      	ldrb	r0, [r2, #1]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	4798      	blx	r3
      break;
 8005d9e:	e068      	b.n	8005e72 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b0b      	cmp	r3, #11
 8005da6:	d852      	bhi.n	8005e4e <USBD_CDC_Setup+0x162>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <USBD_CDC_Setup+0xc4>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005e5d 	.word	0x08005e5d
 8005db8:	08005e4f 	.word	0x08005e4f
 8005dbc:	08005e4f 	.word	0x08005e4f
 8005dc0:	08005e4f 	.word	0x08005e4f
 8005dc4:	08005e4f 	.word	0x08005e4f
 8005dc8:	08005e4f 	.word	0x08005e4f
 8005dcc:	08005e4f 	.word	0x08005e4f
 8005dd0:	08005e4f 	.word	0x08005e4f
 8005dd4:	08005e4f 	.word	0x08005e4f
 8005dd8:	08005e0b 	.word	0x08005e0b
 8005ddc:	08005e35 	.word	0x08005e35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d107      	bne.n	8005dfc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dec:	f107 030a 	add.w	r3, r7, #10
 8005df0:	2202      	movs	r2, #2
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 fa82 	bl	80072fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dfa:	e032      	b.n	8005e62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fa0c 	bl	800721c <USBD_CtlError>
            ret = USBD_FAIL;
 8005e04:	2303      	movs	r3, #3
 8005e06:	75fb      	strb	r3, [r7, #23]
          break;
 8005e08:	e02b      	b.n	8005e62 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d107      	bne.n	8005e26 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e16:	f107 030d 	add.w	r3, r7, #13
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fa6d 	bl	80072fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e24:	e01d      	b.n	8005e62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f9f7 	bl	800721c <USBD_CtlError>
            ret = USBD_FAIL;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	75fb      	strb	r3, [r7, #23]
          break;
 8005e32:	e016      	b.n	8005e62 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d00f      	beq.n	8005e60 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 f9ea 	bl	800721c <USBD_CtlError>
            ret = USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e4c:	e008      	b.n	8005e60 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f001 f9e3 	bl	800721c <USBD_CtlError>
          ret = USBD_FAIL;
 8005e56:	2303      	movs	r3, #3
 8005e58:	75fb      	strb	r3, [r7, #23]
          break;
 8005e5a:	e002      	b.n	8005e62 <USBD_CDC_Setup+0x176>
          break;
 8005e5c:	bf00      	nop
 8005e5e:	e008      	b.n	8005e72 <USBD_CDC_Setup+0x186>
          break;
 8005e60:	bf00      	nop
      }
      break;
 8005e62:	e006      	b.n	8005e72 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 f9d8 	bl	800721c <USBD_CtlError>
      ret = USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e70:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005e8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e04f      	b.n	8005f3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ea4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d029      	beq.n	8005f10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3318      	adds	r3, #24
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	78f9      	ldrb	r1, [r7, #3]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4403      	add	r3, r0
 8005edc:	3320      	adds	r3, #32
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d110      	bne.n	8005f10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3318      	adds	r3, #24
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f02:	78f9      	ldrb	r1, [r7, #3]
 8005f04:	2300      	movs	r3, #0
 8005f06:	2200      	movs	r2, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 febc 	bl	8007c86 <USBD_LL_Transmit>
 8005f0e:	e015      	b.n	8005f3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e015      	b.n	8005f94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fecc 	bl	8007d0a <USBD_LL_GetRxDataSize>
 8005f72:	4602      	mov	r2, r0
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005faa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e01a      	b.n	8005fec <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d014      	beq.n	8005fea <USBD_CDC_EP0_RxReady+0x4e>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005fc6:	2bff      	cmp	r3, #255	@ 0xff
 8005fc8:	d00f      	beq.n	8005fea <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8005fd8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fe0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	22ff      	movs	r2, #255	@ 0xff
 8005fe6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2243      	movs	r2, #67	@ 0x43
 8006000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006002:	4b03      	ldr	r3, [pc, #12]	@ (8006010 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	20000094 	.word	0x20000094

08006014 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2243      	movs	r2, #67	@ 0x43
 8006020:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006022:	4b03      	ldr	r3, [pc, #12]	@ (8006030 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	20000050 	.word	0x20000050

08006034 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2243      	movs	r2, #67	@ 0x43
 8006040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006042:	4b03      	ldr	r3, [pc, #12]	@ (8006050 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	200000d8 	.word	0x200000d8

08006054 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	220a      	movs	r2, #10
 8006060:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006062:	4b03      	ldr	r3, [pc, #12]	@ (8006070 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	2000000c 	.word	0x2000000c

08006074 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e004      	b.n	8006092 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060b0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e008      	b.n	80060ce <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e004      	b.n	8006100 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800611a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800612a:	2303      	movs	r3, #3
 800612c:	e01a      	b.n	8006164 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006134:	2b00      	cmp	r3, #0
 8006136:	d114      	bne.n	8006162 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2201      	movs	r2, #1
 800613c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006156:	2181      	movs	r1, #129	@ 0x81
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fd94 	bl	8007c86 <USBD_LL_Transmit>

    ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800617a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006186:	2303      	movs	r3, #3
 8006188:	e016      	b.n	80061b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7c1b      	ldrb	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800619c:	2101      	movs	r1, #1
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fd92 	bl	8007cc8 <USBD_LL_PrepareReceive>
 80061a4:	e007      	b.n	80061b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061ac:	2340      	movs	r3, #64	@ 0x40
 80061ae:	2101      	movs	r1, #1
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fd89 	bl	8007cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e01f      	b.n	8006218 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	79fa      	ldrb	r2, [r7, #7]
 800620a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f001 fbf1 	bl	80079f4 <USBD_LL_Init>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006234:	2303      	movs	r3, #3
 8006236:	e016      	b.n	8006266 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	f107 020e 	add.w	r2, r7, #14
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fc1c 	bl	8007ab4 <USBD_LL_Start>
 800627c:	4603      	mov	r3, r0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062a8:	2303      	movs	r3, #3
 80062aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	4611      	mov	r1, r2
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	4611      	mov	r1, r2
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
  }

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 ff46 	bl	80071a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2b02      	cmp	r3, #2
 800633e:	d01a      	beq.n	8006376 <USBD_LL_SetupStage+0x72>
 8006340:	2b02      	cmp	r3, #2
 8006342:	d822      	bhi.n	800638a <USBD_LL_SetupStage+0x86>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <USBD_LL_SetupStage+0x4a>
 8006348:	2b01      	cmp	r3, #1
 800634a:	d00a      	beq.n	8006362 <USBD_LL_SetupStage+0x5e>
 800634c:	e01d      	b.n	800638a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9ee 	bl	8006738 <USBD_StdDevReq>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	e020      	b.n	80063a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa52 	bl	8006814 <USBD_StdItfReq>
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
      break;
 8006374:	e016      	b.n	80063a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa91 	bl	80068a6 <USBD_StdEPReq>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
      break;
 8006388:	e00c      	b.n	80063a4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006390:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fbeb 	bl	8007b74 <USBD_LL_StallEP>
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]
      break;
 80063a2:	bf00      	nop
  }

  return ret;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	460b      	mov	r3, r1
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063bc:	7afb      	ldrb	r3, [r7, #11]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d138      	bne.n	8006434 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80063c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d14a      	bne.n	800646a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d913      	bls.n	8006408 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bf28      	it	cs
 80063fa:	4613      	movcs	r3, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 ffc5 	bl	8007390 <USBD_CtlContinueRx>
 8006406:	e030      	b.n	800646a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b03      	cmp	r3, #3
 8006412:	d10b      	bne.n	800642c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 ffc0 	bl	80073b2 <USBD_CtlSendStatus>
 8006432:	e01a      	b.n	800646a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b03      	cmp	r3, #3
 800643e:	d114      	bne.n	800646a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	7afa      	ldrb	r2, [r7, #11]
 8006456:	4611      	mov	r1, r2
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	4798      	blx	r3
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	e000      	b.n	800646c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	460b      	mov	r3, r1
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d16b      	bne.n	8006560 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3314      	adds	r3, #20
 800648c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006494:	2b02      	cmp	r3, #2
 8006496:	d156      	bne.n	8006546 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d914      	bls.n	80064ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	1ad2      	subs	r2, r2, r3
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 ff3a 	bl	8007334 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064c0:	2300      	movs	r3, #0
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 fbfe 	bl	8007cc8 <USBD_LL_PrepareReceive>
 80064cc:	e03b      	b.n	8006546 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d11c      	bne.n	8006514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d316      	bcc.n	8006514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d20f      	bcs.n	8006514 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064f4:	2200      	movs	r2, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 ff1b 	bl	8007334 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006506:	2300      	movs	r3, #0
 8006508:	2200      	movs	r2, #0
 800650a:	2100      	movs	r1, #0
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 fbdb 	bl	8007cc8 <USBD_LL_PrepareReceive>
 8006512:	e018      	b.n	8006546 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b03      	cmp	r3, #3
 800651e:	d10b      	bne.n	8006538 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006538:	2180      	movs	r1, #128	@ 0x80
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f001 fb1a 	bl	8007b74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 ff49 	bl	80073d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d122      	bne.n	8006596 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fe98 	bl	8006286 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800655e:	e01a      	b.n	8006596 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b03      	cmp	r3, #3
 800656a:	d114      	bne.n	8006596 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	7afa      	ldrb	r2, [r7, #11]
 8006582:	4611      	mov	r1, r2
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	4798      	blx	r3
 8006588:	4603      	mov	r3, r0
 800658a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	e000      	b.n	8006598 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e02f      	b.n	8006634 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6852      	ldr	r2, [r2, #4]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	4611      	mov	r1, r2
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065fe:	2340      	movs	r3, #64	@ 0x40
 8006600:	2200      	movs	r2, #0
 8006602:	2100      	movs	r1, #0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fa70 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2240      	movs	r2, #64	@ 0x40
 8006616:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800661a:	2340      	movs	r3, #64	@ 0x40
 800661c:	2200      	movs	r2, #0
 800661e:	2180      	movs	r1, #128	@ 0x80
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fa62 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2240      	movs	r2, #64	@ 0x40
 8006630:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800666a:	b2da      	uxtb	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2204      	movs	r2, #4
 8006676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b04      	cmp	r3, #4
 800669a:	d106      	bne.n	80066aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e012      	b.n	80066f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d10b      	bne.n	80066f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	3301      	adds	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800671a:	8a3b      	ldrh	r3, [r7, #16]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	b21a      	sxth	r2, r3
 8006720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006724:	4313      	orrs	r3, r2
 8006726:	b21b      	sxth	r3, r3
 8006728:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800672a:	89fb      	ldrh	r3, [r7, #14]
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800674e:	2b40      	cmp	r3, #64	@ 0x40
 8006750:	d005      	beq.n	800675e <USBD_StdDevReq+0x26>
 8006752:	2b40      	cmp	r3, #64	@ 0x40
 8006754:	d853      	bhi.n	80067fe <USBD_StdDevReq+0xc6>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <USBD_StdDevReq+0x3a>
 800675a:	2b20      	cmp	r3, #32
 800675c:	d14f      	bne.n	80067fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
      break;
 8006770:	e04a      	b.n	8006808 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b09      	cmp	r3, #9
 8006778:	d83b      	bhi.n	80067f2 <USBD_StdDevReq+0xba>
 800677a:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <USBD_StdDevReq+0x48>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	080067d5 	.word	0x080067d5
 8006784:	080067e9 	.word	0x080067e9
 8006788:	080067f3 	.word	0x080067f3
 800678c:	080067df 	.word	0x080067df
 8006790:	080067f3 	.word	0x080067f3
 8006794:	080067b3 	.word	0x080067b3
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067f3 	.word	0x080067f3
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067bd 	.word	0x080067bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9de 	bl	8006b6c <USBD_GetDescriptor>
          break;
 80067b0:	e024      	b.n	80067fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb6d 	bl	8006e94 <USBD_SetAddress>
          break;
 80067ba:	e01f      	b.n	80067fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fbac 	bl	8006f1c <USBD_SetConfig>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
          break;
 80067c8:	e018      	b.n	80067fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fc4b 	bl	8007068 <USBD_GetConfig>
          break;
 80067d2:	e013      	b.n	80067fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fc7c 	bl	80070d4 <USBD_GetStatus>
          break;
 80067dc:	e00e      	b.n	80067fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fcab 	bl	800713c <USBD_SetFeature>
          break;
 80067e6:	e009      	b.n	80067fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fcba 	bl	8007164 <USBD_ClrFeature>
          break;
 80067f0:	e004      	b.n	80067fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fd11 	bl	800721c <USBD_CtlError>
          break;
 80067fa:	bf00      	nop
      }
      break;
 80067fc:	e004      	b.n	8006808 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fd0b 	bl	800721c <USBD_CtlError>
      break;
 8006806:	bf00      	nop
  }

  return ret;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop

08006814 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800682a:	2b40      	cmp	r3, #64	@ 0x40
 800682c:	d005      	beq.n	800683a <USBD_StdItfReq+0x26>
 800682e:	2b40      	cmp	r3, #64	@ 0x40
 8006830:	d82f      	bhi.n	8006892 <USBD_StdItfReq+0x7e>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <USBD_StdItfReq+0x26>
 8006836:	2b20      	cmp	r3, #32
 8006838:	d12b      	bne.n	8006892 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	2b02      	cmp	r3, #2
 8006846:	d81d      	bhi.n	8006884 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	889b      	ldrh	r3, [r3, #4]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b01      	cmp	r3, #1
 8006850:	d813      	bhi.n	800687a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	88db      	ldrh	r3, [r3, #6]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d110      	bne.n	800688e <USBD_StdItfReq+0x7a>
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fd9d 	bl	80073b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006878:	e009      	b.n	800688e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fccd 	bl	800721c <USBD_CtlError>
          break;
 8006882:	e004      	b.n	800688e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fcc8 	bl	800721c <USBD_CtlError>
          break;
 800688c:	e000      	b.n	8006890 <USBD_StdItfReq+0x7c>
          break;
 800688e:	bf00      	nop
      }
      break;
 8006890:	e004      	b.n	800689c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fcc1 	bl	800721c <USBD_CtlError>
      break;
 800689a:	bf00      	nop
  }

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	889b      	ldrh	r3, [r3, #4]
 80068b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068c2:	2b40      	cmp	r3, #64	@ 0x40
 80068c4:	d007      	beq.n	80068d6 <USBD_StdEPReq+0x30>
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	f200 8145 	bhi.w	8006b56 <USBD_StdEPReq+0x2b0>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00c      	beq.n	80068ea <USBD_StdEPReq+0x44>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	f040 8140 	bne.w	8006b56 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]
      break;
 80068e8:	e13a      	b.n	8006b60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d007      	beq.n	8006902 <USBD_StdEPReq+0x5c>
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	f300 8129 	bgt.w	8006b4a <USBD_StdEPReq+0x2a4>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d07f      	beq.n	80069fc <USBD_StdEPReq+0x156>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d03c      	beq.n	800697a <USBD_StdEPReq+0xd4>
 8006900:	e123      	b.n	8006b4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d002      	beq.n	8006914 <USBD_StdEPReq+0x6e>
 800690e:	2b03      	cmp	r3, #3
 8006910:	d016      	beq.n	8006940 <USBD_StdEPReq+0x9a>
 8006912:	e02c      	b.n	800696e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00d      	beq.n	8006936 <USBD_StdEPReq+0x90>
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b80      	cmp	r3, #128	@ 0x80
 800691e:	d00a      	beq.n	8006936 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f925 	bl	8007b74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800692a:	2180      	movs	r1, #128	@ 0x80
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f921 	bl	8007b74 <USBD_LL_StallEP>
 8006932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006934:	e020      	b.n	8006978 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fc6f 	bl	800721c <USBD_CtlError>
              break;
 800693e:	e01b      	b.n	8006978 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	885b      	ldrh	r3, [r3, #2]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10e      	bne.n	8006966 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <USBD_StdEPReq+0xc0>
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	d008      	beq.n	8006966 <USBD_StdEPReq+0xc0>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	88db      	ldrh	r3, [r3, #6]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 f907 	bl	8007b74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fd23 	bl	80073b2 <USBD_CtlSendStatus>

              break;
 800696c:	e004      	b.n	8006978 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc53 	bl	800721c <USBD_CtlError>
              break;
 8006976:	bf00      	nop
          }
          break;
 8006978:	e0ec      	b.n	8006b54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d002      	beq.n	800698c <USBD_StdEPReq+0xe6>
 8006986:	2b03      	cmp	r3, #3
 8006988:	d016      	beq.n	80069b8 <USBD_StdEPReq+0x112>
 800698a:	e030      	b.n	80069ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00d      	beq.n	80069ae <USBD_StdEPReq+0x108>
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	2b80      	cmp	r3, #128	@ 0x80
 8006996:	d00a      	beq.n	80069ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 f8e9 	bl	8007b74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069a2:	2180      	movs	r1, #128	@ 0x80
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f8e5 	bl	8007b74 <USBD_LL_StallEP>
 80069aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069ac:	e025      	b.n	80069fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fc33 	bl	800721c <USBD_CtlError>
              break;
 80069b6:	e020      	b.n	80069fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	885b      	ldrh	r3, [r3, #2]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11b      	bne.n	80069f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 f8ef 	bl	8007bb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fcec 	bl	80073b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80069ec:	e004      	b.n	80069f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fc13 	bl	800721c <USBD_CtlError>
              break;
 80069f6:	e000      	b.n	80069fa <USBD_StdEPReq+0x154>
              break;
 80069f8:	bf00      	nop
          }
          break;
 80069fa:	e0ab      	b.n	8006b54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d002      	beq.n	8006a0e <USBD_StdEPReq+0x168>
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d032      	beq.n	8006a72 <USBD_StdEPReq+0x1cc>
 8006a0c:	e097      	b.n	8006b3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <USBD_StdEPReq+0x17e>
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b80      	cmp	r3, #128	@ 0x80
 8006a18:	d004      	beq.n	8006a24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fbfd 	bl	800721c <USBD_CtlError>
                break;
 8006a22:	e091      	b.n	8006b48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da0b      	bge.n	8006a44 <USBD_StdEPReq+0x19e>
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	3310      	adds	r3, #16
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4413      	add	r3, r2
 8006a40:	3304      	adds	r3, #4
 8006a42:	e00b      	b.n	8006a5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2202      	movs	r2, #2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fc47 	bl	80072fe <USBD_CtlSendData>
              break;
 8006a70:	e06a      	b.n	8006b48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da11      	bge.n	8006a9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3324      	adds	r3, #36	@ 0x24
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d117      	bne.n	8006ac4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fbc0 	bl	800721c <USBD_CtlError>
                  break;
 8006a9c:	e054      	b.n	8006b48 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	f003 020f 	and.w	r2, r3, #15
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fbad 	bl	800721c <USBD_CtlError>
                  break;
 8006ac2:	e041      	b.n	8006b48 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da0b      	bge.n	8006ae4 <USBD_StdEPReq+0x23e>
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	3310      	adds	r3, #16
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4413      	add	r3, r2
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	e00b      	b.n	8006afc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	3304      	adds	r3, #4
 8006afc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <USBD_StdEPReq+0x264>
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b80      	cmp	r3, #128	@ 0x80
 8006b08:	d103      	bne.n	8006b12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e00e      	b.n	8006b30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 f86a 	bl	8007bf0 <USBD_LL_IsStallEP>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	e002      	b.n	8006b30 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2202      	movs	r2, #2
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fbe1 	bl	80072fe <USBD_CtlSendData>
              break;
 8006b3c:	e004      	b.n	8006b48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fb6b 	bl	800721c <USBD_CtlError>
              break;
 8006b46:	bf00      	nop
          }
          break;
 8006b48:	e004      	b.n	8006b54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fb65 	bl	800721c <USBD_CtlError>
          break;
 8006b52:	bf00      	nop
      }
      break;
 8006b54:	e004      	b.n	8006b60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fb5f 	bl	800721c <USBD_CtlError>
      break;
 8006b5e:	bf00      	nop
  }

  return ret;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	2b0e      	cmp	r3, #14
 8006b8e:	f200 8152 	bhi.w	8006e36 <USBD_GetDescriptor+0x2ca>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <USBD_GetDescriptor+0x2c>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006c09 	.word	0x08006c09
 8006b9c:	08006c21 	.word	0x08006c21
 8006ba0:	08006c61 	.word	0x08006c61
 8006ba4:	08006e37 	.word	0x08006e37
 8006ba8:	08006e37 	.word	0x08006e37
 8006bac:	08006dd7 	.word	0x08006dd7
 8006bb0:	08006e03 	.word	0x08006e03
 8006bb4:	08006e37 	.word	0x08006e37
 8006bb8:	08006e37 	.word	0x08006e37
 8006bbc:	08006e37 	.word	0x08006e37
 8006bc0:	08006e37 	.word	0x08006e37
 8006bc4:	08006e37 	.word	0x08006e37
 8006bc8:	08006e37 	.word	0x08006e37
 8006bcc:	08006e37 	.word	0x08006e37
 8006bd0:	08006bd5 	.word	0x08006bd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bf6:	e126      	b.n	8006e46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fb0e 	bl	800721c <USBD_CtlError>
        err++;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	3301      	adds	r3, #1
 8006c04:	72fb      	strb	r3, [r7, #11]
      break;
 8006c06:	e11e      	b.n	8006e46 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	7c12      	ldrb	r2, [r2, #16]
 8006c14:	f107 0108 	add.w	r1, r7, #8
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
 8006c1c:	60f8      	str	r0, [r7, #12]
      break;
 8006c1e:	e112      	b.n	8006e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7c1b      	ldrb	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10d      	bne.n	8006c44 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	f107 0208 	add.w	r2, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	2202      	movs	r2, #2
 8006c40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c42:	e100      	b.n	8006e46 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4c:	f107 0208 	add.w	r2, r7, #8
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
 8006c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	701a      	strb	r2, [r3, #0]
      break;
 8006c5e:	e0f2      	b.n	8006e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	885b      	ldrh	r3, [r3, #2]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b05      	cmp	r3, #5
 8006c68:	f200 80ac 	bhi.w	8006dc4 <USBD_GetDescriptor+0x258>
 8006c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <USBD_GetDescriptor+0x108>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c8d 	.word	0x08006c8d
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cf5 	.word	0x08006cf5
 8006c80:	08006d29 	.word	0x08006d29
 8006c84:	08006d5d 	.word	0x08006d5d
 8006c88:	08006d91 	.word	0x08006d91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cae:	e091      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fab2 	bl	800721c <USBD_CtlError>
            err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cbe:	e089      	b.n	8006dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce2:	e077      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa98 	bl	800721c <USBD_CtlError>
            err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf2:	e06f      	b.n	8006dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7c12      	ldrb	r2, [r2, #16]
 8006d0c:	f107 0108 	add.w	r1, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d16:	e05d      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa7e 	bl	800721c <USBD_CtlError>
            err++;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	3301      	adds	r3, #1
 8006d24:	72fb      	strb	r3, [r7, #11]
          break;
 8006d26:	e055      	b.n	8006dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4a:	e043      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa64 	bl	800721c <USBD_CtlError>
            err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5a:	e03b      	b.n	8006dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7e:	e029      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa4a 	bl	800721c <USBD_CtlError>
            err++;
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d8e:	e021      	b.n	8006dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	7c12      	ldrb	r2, [r2, #16]
 8006da8:	f107 0108 	add.w	r1, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db2:	e00f      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa30 	bl	800721c <USBD_CtlError>
            err++;
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc2:	e007      	b.n	8006dd4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa28 	bl	800721c <USBD_CtlError>
          err++;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006dd2:	bf00      	nop
      }
      break;
 8006dd4:	e037      	b.n	8006e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7c1b      	ldrb	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de6:	f107 0208 	add.w	r2, r7, #8
 8006dea:	4610      	mov	r0, r2
 8006dec:	4798      	blx	r3
 8006dee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006df0:	e029      	b.n	8006e46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fa11 	bl	800721c <USBD_CtlError>
        err++;
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8006e00:	e021      	b.n	8006e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7c1b      	ldrb	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10d      	bne.n	8006e26 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e12:	f107 0208 	add.w	r2, r7, #8
 8006e16:	4610      	mov	r0, r2
 8006e18:	4798      	blx	r3
 8006e1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	2207      	movs	r2, #7
 8006e22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e24:	e00f      	b.n	8006e46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9f7 	bl	800721c <USBD_CtlError>
        err++;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	3301      	adds	r3, #1
 8006e32:	72fb      	strb	r3, [r7, #11]
      break;
 8006e34:	e007      	b.n	8006e46 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f9ef 	bl	800721c <USBD_CtlError>
      err++;
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	3301      	adds	r3, #1
 8006e42:	72fb      	strb	r3, [r7, #11]
      break;
 8006e44:	bf00      	nop
  }

  if (err != 0U)
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11e      	bne.n	8006e8a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	88db      	ldrh	r3, [r3, #6]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d016      	beq.n	8006e82 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e54:	893b      	ldrh	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00e      	beq.n	8006e78 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88da      	ldrh	r2, [r3, #6]
 8006e5e:	893b      	ldrh	r3, [r7, #8]
 8006e60:	4293      	cmp	r3, r2
 8006e62:	bf28      	it	cs
 8006e64:	4613      	movcs	r3, r2
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e6a:	893b      	ldrh	r3, [r7, #8]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa44 	bl	80072fe <USBD_CtlSendData>
 8006e76:	e009      	b.n	8006e8c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9ce 	bl	800721c <USBD_CtlError>
 8006e80:	e004      	b.n	8006e8c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa95 	bl	80073b2 <USBD_CtlSendStatus>
 8006e88:	e000      	b.n	8006e8c <USBD_GetDescriptor+0x320>
    return;
 8006e8a:	bf00      	nop
  }
}
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop

08006e94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	889b      	ldrh	r3, [r3, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d131      	bne.n	8006f0a <USBD_SetAddress+0x76>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d12d      	bne.n	8006f0a <USBD_SetAddress+0x76>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	885b      	ldrh	r3, [r3, #2]
 8006eb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eb4:	d829      	bhi.n	8006f0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d104      	bne.n	8006ed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f9a3 	bl	800721c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed6:	e01d      	b.n	8006f14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7bfa      	ldrb	r2, [r7, #15]
 8006edc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 feaf 	bl	8007c48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa61 	bl	80073b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efe:	e009      	b.n	8006f14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	e004      	b.n	8006f14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f985 	bl	800721c <USBD_CtlError>
  }
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	885b      	ldrh	r3, [r3, #2]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	4b4c      	ldr	r3, [pc, #304]	@ (8007064 <USBD_SetConfig+0x148>)
 8006f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f34:	4b4b      	ldr	r3, [pc, #300]	@ (8007064 <USBD_SetConfig+0x148>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d905      	bls.n	8006f48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f96c 	bl	800721c <USBD_CtlError>
    return USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e088      	b.n	800705a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d002      	beq.n	8006f5a <USBD_SetConfig+0x3e>
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d025      	beq.n	8006fa4 <USBD_SetConfig+0x88>
 8006f58:	e071      	b.n	800703e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f5a:	4b42      	ldr	r3, [pc, #264]	@ (8007064 <USBD_SetConfig+0x148>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01c      	beq.n	8006f9c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006f62:	4b40      	ldr	r3, [pc, #256]	@ (8007064 <USBD_SetConfig+0x148>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8007064 <USBD_SetConfig+0x148>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff f992 	bl	800629c <USBD_SetClassConfig>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f949 	bl	800721c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f8a:	e065      	b.n	8007058 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fa10 	bl	80073b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2203      	movs	r2, #3
 8006f96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f9a:	e05d      	b.n	8007058 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa08 	bl	80073b2 <USBD_CtlSendStatus>
      break;
 8006fa2:	e059      	b.n	8007058 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8007064 <USBD_SetConfig+0x148>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d112      	bne.n	8006fd2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8007064 <USBD_SetConfig+0x148>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fbe:	4b29      	ldr	r3, [pc, #164]	@ (8007064 <USBD_SetConfig+0x148>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff f985 	bl	80062d4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9f1 	bl	80073b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fd0:	e042      	b.n	8007058 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006fd2:	4b24      	ldr	r3, [pc, #144]	@ (8007064 <USBD_SetConfig+0x148>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d02a      	beq.n	8007036 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff f973 	bl	80062d4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fee:	4b1d      	ldr	r3, [pc, #116]	@ (8007064 <USBD_SetConfig+0x148>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8007064 <USBD_SetConfig+0x148>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff f94c 	bl	800629c <USBD_SetClassConfig>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00f      	beq.n	800702e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f903 	bl	800721c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff f958 	bl	80062d4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800702c:	e014      	b.n	8007058 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9bf 	bl	80073b2 <USBD_CtlSendStatus>
      break;
 8007034:	e010      	b.n	8007058 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9bb 	bl	80073b2 <USBD_CtlSendStatus>
      break;
 800703c:	e00c      	b.n	8007058 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8eb 	bl	800721c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007046:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <USBD_SetConfig+0x148>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff f941 	bl	80062d4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007052:	2303      	movs	r3, #3
 8007054:	73fb      	strb	r3, [r7, #15]
      break;
 8007056:	bf00      	nop
  }

  return ret;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000208 	.word	0x20000208

08007068 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	88db      	ldrh	r3, [r3, #6]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d004      	beq.n	8007084 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f8cd 	bl	800721c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007082:	e023      	b.n	80070cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	dc02      	bgt.n	8007096 <USBD_GetConfig+0x2e>
 8007090:	2b00      	cmp	r3, #0
 8007092:	dc03      	bgt.n	800709c <USBD_GetConfig+0x34>
 8007094:	e015      	b.n	80070c2 <USBD_GetConfig+0x5a>
 8007096:	2b03      	cmp	r3, #3
 8007098:	d00b      	beq.n	80070b2 <USBD_GetConfig+0x4a>
 800709a:	e012      	b.n	80070c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3308      	adds	r3, #8
 80070a6:	2201      	movs	r2, #1
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f927 	bl	80072fe <USBD_CtlSendData>
        break;
 80070b0:	e00c      	b.n	80070cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2201      	movs	r2, #1
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f91f 	bl	80072fe <USBD_CtlSendData>
        break;
 80070c0:	e004      	b.n	80070cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8a9 	bl	800721c <USBD_CtlError>
        break;
 80070ca:	bf00      	nop
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d81e      	bhi.n	800712a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	88db      	ldrh	r3, [r3, #6]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d004      	beq.n	80070fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f890 	bl	800721c <USBD_CtlError>
        break;
 80070fc:	e01a      	b.n	8007134 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	330c      	adds	r3, #12
 800711e:	2202      	movs	r2, #2
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8eb 	bl	80072fe <USBD_CtlSendData>
      break;
 8007128:	e004      	b.n	8007134 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f875 	bl	800721c <USBD_CtlError>
      break;
 8007132:	bf00      	nop
  }
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	885b      	ldrh	r3, [r3, #2]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d106      	bne.n	800715c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f92b 	bl	80073b2 <USBD_CtlSendStatus>
  }
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007174:	b2db      	uxtb	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	2b02      	cmp	r3, #2
 800717a:	d80b      	bhi.n	8007194 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	885b      	ldrh	r3, [r3, #2]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10c      	bne.n	800719e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f910 	bl	80073b2 <USBD_CtlSendStatus>
      }
      break;
 8007192:	e004      	b.n	800719e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f840 	bl	800721c <USBD_CtlError>
      break;
 800719c:	e000      	b.n	80071a0 <USBD_ClrFeature+0x3c>
      break;
 800719e:	bf00      	nop
  }
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3301      	adds	r3, #1
 80071d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fa92 	bl	80066fc <SWAPBYTE>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fa85 	bl	80066fc <SWAPBYTE>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fa78 	bl	80066fc <SWAPBYTE>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	80da      	strh	r2, [r3, #6]
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007226:	2180      	movs	r1, #128	@ 0x80
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fca3 	bl	8007b74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800722e:	2100      	movs	r1, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fc9f 	bl	8007b74 <USBD_LL_StallEP>
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b086      	sub	sp, #24
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d036      	beq.n	80072c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007258:	6938      	ldr	r0, [r7, #16]
 800725a:	f000 f836 	bl	80072ca <USBD_GetLen>
 800725e:	4603      	mov	r3, r0
 8007260:	3301      	adds	r3, #1
 8007262:	b29b      	uxth	r3, r3
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4413      	add	r3, r2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	701a      	strb	r2, [r3, #0]
  idx++;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	3301      	adds	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	4413      	add	r3, r2
 8007284:	2203      	movs	r2, #3
 8007286:	701a      	strb	r2, [r3, #0]
  idx++;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	3301      	adds	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800728e:	e013      	b.n	80072b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	7812      	ldrb	r2, [r2, #0]
 800729a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	3301      	adds	r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
    idx++;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	3301      	adds	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	3301      	adds	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e7      	bne.n	8007290 <USBD_GetString+0x52>
 80072c0:	e000      	b.n	80072c4 <USBD_GetString+0x86>
    return;
 80072c2:	bf00      	nop
  }
}
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072da:	e005      	b.n	80072e8 <USBD_GetLen+0x1e>
  {
    len++;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	3301      	adds	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f5      	bne.n	80072dc <USBD_GetLen+0x12>
  }

  return len;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2202      	movs	r2, #2
 800730e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	2100      	movs	r1, #0
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fcae 	bl	8007c86 <USBD_LL_Transmit>

  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	2100      	movs	r1, #0
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fc9d 	bl	8007c86 <USBD_LL_Transmit>

  return USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2203      	movs	r2, #3
 8007366:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fca1 	bl	8007cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fc90 	bl	8007cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2204      	movs	r2, #4
 80073be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073c2:	2300      	movs	r3, #0
 80073c4:	2200      	movs	r2, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc5c 	bl	8007c86 <USBD_LL_Transmit>

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2205      	movs	r2, #5
 80073e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e8:	2300      	movs	r3, #0
 80073ea:	2200      	movs	r2, #0
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc6a 	bl	8007cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007404:	2200      	movs	r2, #0
 8007406:	4912      	ldr	r1, [pc, #72]	@ (8007450 <MX_USB_Device_Init+0x50>)
 8007408:	4812      	ldr	r0, [pc, #72]	@ (8007454 <MX_USB_Device_Init+0x54>)
 800740a:	f7fe fed9 	bl	80061c0 <USBD_Init>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007414:	f7f9 f878 	bl	8000508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007418:	490f      	ldr	r1, [pc, #60]	@ (8007458 <MX_USB_Device_Init+0x58>)
 800741a:	480e      	ldr	r0, [pc, #56]	@ (8007454 <MX_USB_Device_Init+0x54>)
 800741c:	f7fe ff00 	bl	8006220 <USBD_RegisterClass>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007426:	f7f9 f86f 	bl	8000508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800742a:	490c      	ldr	r1, [pc, #48]	@ (800745c <MX_USB_Device_Init+0x5c>)
 800742c:	4809      	ldr	r0, [pc, #36]	@ (8007454 <MX_USB_Device_Init+0x54>)
 800742e:	f7fe fe21 	bl	8006074 <USBD_CDC_RegisterInterface>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007438:	f7f9 f866 	bl	8000508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800743c:	4805      	ldr	r0, [pc, #20]	@ (8007454 <MX_USB_Device_Init+0x54>)
 800743e:	f7fe ff16 	bl	800626e <USBD_Start>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007448:	f7f9 f85e 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800744c:	bf00      	nop
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000130 	.word	0x20000130
 8007454:	2000020c 	.word	0x2000020c
 8007458:	20000018 	.word	0x20000018
 800745c:	2000011c 	.word	0x2000011c

08007460 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007464:	2200      	movs	r2, #0
 8007466:	4905      	ldr	r1, [pc, #20]	@ (800747c <CDC_Init_FS+0x1c>)
 8007468:	4805      	ldr	r0, [pc, #20]	@ (8007480 <CDC_Init_FS+0x20>)
 800746a:	f7fe fe18 	bl	800609e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800746e:	4905      	ldr	r1, [pc, #20]	@ (8007484 <CDC_Init_FS+0x24>)
 8007470:	4803      	ldr	r0, [pc, #12]	@ (8007480 <CDC_Init_FS+0x20>)
 8007472:	f7fe fe32 	bl	80060da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007476:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007478:	4618      	mov	r0, r3
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200008dc 	.word	0x200008dc
 8007480:	2000020c 	.word	0x2000020c
 8007484:	200004dc 	.word	0x200004dc

08007488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800748c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800748e:	4618      	mov	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	6039      	str	r1, [r7, #0]
 80074a2:	71fb      	strb	r3, [r7, #7]
 80074a4:	4613      	mov	r3, r2
 80074a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	2b23      	cmp	r3, #35	@ 0x23
 80074ac:	d84a      	bhi.n	8007544 <CDC_Control_FS+0xac>
 80074ae:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <CDC_Control_FS+0x1c>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	08007545 	.word	0x08007545
 80074b8:	08007545 	.word	0x08007545
 80074bc:	08007545 	.word	0x08007545
 80074c0:	08007545 	.word	0x08007545
 80074c4:	08007545 	.word	0x08007545
 80074c8:	08007545 	.word	0x08007545
 80074cc:	08007545 	.word	0x08007545
 80074d0:	08007545 	.word	0x08007545
 80074d4:	08007545 	.word	0x08007545
 80074d8:	08007545 	.word	0x08007545
 80074dc:	08007545 	.word	0x08007545
 80074e0:	08007545 	.word	0x08007545
 80074e4:	08007545 	.word	0x08007545
 80074e8:	08007545 	.word	0x08007545
 80074ec:	08007545 	.word	0x08007545
 80074f0:	08007545 	.word	0x08007545
 80074f4:	08007545 	.word	0x08007545
 80074f8:	08007545 	.word	0x08007545
 80074fc:	08007545 	.word	0x08007545
 8007500:	08007545 	.word	0x08007545
 8007504:	08007545 	.word	0x08007545
 8007508:	08007545 	.word	0x08007545
 800750c:	08007545 	.word	0x08007545
 8007510:	08007545 	.word	0x08007545
 8007514:	08007545 	.word	0x08007545
 8007518:	08007545 	.word	0x08007545
 800751c:	08007545 	.word	0x08007545
 8007520:	08007545 	.word	0x08007545
 8007524:	08007545 	.word	0x08007545
 8007528:	08007545 	.word	0x08007545
 800752c:	08007545 	.word	0x08007545
 8007530:	08007545 	.word	0x08007545
 8007534:	08007545 	.word	0x08007545
 8007538:	08007545 	.word	0x08007545
 800753c:	08007545 	.word	0x08007545
 8007540:	08007545 	.word	0x08007545
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007544:	bf00      	nop
  }

  return (USBD_OK);
 8007546:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	4808      	ldr	r0, [pc, #32]	@ (8007584 <CDC_Receive_FS+0x30>)
 8007562:	f7fe fdba 	bl	80060da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007566:	4807      	ldr	r0, [pc, #28]	@ (8007584 <CDC_Receive_FS+0x30>)
 8007568:	f7fe fe00 	bl	800616c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	b29b      	uxth	r3, r3
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f807 	bl	8007588 <CDC_Transmit_FS>
  return (USBD_OK);
 800757a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	2000020c 	.word	0x2000020c

08007588 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007598:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <CDC_Transmit_FS+0x48>)
 800759a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800759e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e00b      	b.n	80075c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075ae:	887b      	ldrh	r3, [r7, #2]
 80075b0:	461a      	mov	r2, r3
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4806      	ldr	r0, [pc, #24]	@ (80075d0 <CDC_Transmit_FS+0x48>)
 80075b6:	f7fe fd72 	bl	800609e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075ba:	4805      	ldr	r0, [pc, #20]	@ (80075d0 <CDC_Transmit_FS+0x48>)
 80075bc:	f7fe fda6 	bl	800610c <USBD_CDC_TransmitPacket>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	2000020c 	.word	0x2000020c

080075d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2212      	movs	r2, #18
 8007608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800760a:	4b03      	ldr	r3, [pc, #12]	@ (8007618 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	20000150 	.word	0x20000150

0800761c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2204      	movs	r2, #4
 800762c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800762e:	4b03      	ldr	r3, [pc, #12]	@ (800763c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000164 	.word	0x20000164

08007640 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d105      	bne.n	800765e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4907      	ldr	r1, [pc, #28]	@ (8007674 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007656:	4808      	ldr	r0, [pc, #32]	@ (8007678 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007658:	f7ff fdf1 	bl	800723e <USBD_GetString>
 800765c:	e004      	b.n	8007668 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	4904      	ldr	r1, [pc, #16]	@ (8007674 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007662:	4805      	ldr	r0, [pc, #20]	@ (8007678 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007664:	f7ff fdeb 	bl	800723e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007668:	4b02      	ldr	r3, [pc, #8]	@ (8007674 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000cdc 	.word	0x20000cdc
 8007678:	08007ea0 	.word	0x08007ea0

0800767c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	6039      	str	r1, [r7, #0]
 8007686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	4904      	ldr	r1, [pc, #16]	@ (800769c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800768c:	4804      	ldr	r0, [pc, #16]	@ (80076a0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800768e:	f7ff fdd6 	bl	800723e <USBD_GetString>
  return USBD_StrDesc;
 8007692:	4b02      	ldr	r3, [pc, #8]	@ (800769c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000cdc 	.word	0x20000cdc
 80076a0:	08007eb8 	.word	0x08007eb8

080076a4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	221a      	movs	r2, #26
 80076b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076b6:	f000 f843 	bl	8007740 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80076ba:	4b02      	ldr	r3, [pc, #8]	@ (80076c4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000168 	.word	0x20000168

080076c8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4907      	ldr	r1, [pc, #28]	@ (80076fc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80076de:	4808      	ldr	r0, [pc, #32]	@ (8007700 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80076e0:	f7ff fdad 	bl	800723e <USBD_GetString>
 80076e4:	e004      	b.n	80076f0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	4904      	ldr	r1, [pc, #16]	@ (80076fc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80076ea:	4805      	ldr	r0, [pc, #20]	@ (8007700 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80076ec:	f7ff fda7 	bl	800723e <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f0:	4b02      	ldr	r3, [pc, #8]	@ (80076fc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000cdc 	.word	0x20000cdc
 8007700:	08007ecc 	.word	0x08007ecc

08007704 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4907      	ldr	r1, [pc, #28]	@ (8007738 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800771a:	4808      	ldr	r0, [pc, #32]	@ (800773c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800771c:	f7ff fd8f 	bl	800723e <USBD_GetString>
 8007720:	e004      	b.n	800772c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4904      	ldr	r1, [pc, #16]	@ (8007738 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007726:	4805      	ldr	r0, [pc, #20]	@ (800773c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007728:	f7ff fd89 	bl	800723e <USBD_GetString>
  }
  return USBD_StrDesc;
 800772c:	4b02      	ldr	r3, [pc, #8]	@ (8007738 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000cdc 	.word	0x20000cdc
 800773c:	08007ed8 	.word	0x08007ed8

08007740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007746:	4b0f      	ldr	r3, [pc, #60]	@ (8007784 <Get_SerialNum+0x44>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800774c:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <Get_SerialNum+0x48>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007752:	4b0e      	ldr	r3, [pc, #56]	@ (800778c <Get_SerialNum+0x4c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007766:	2208      	movs	r2, #8
 8007768:	4909      	ldr	r1, [pc, #36]	@ (8007790 <Get_SerialNum+0x50>)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f814 	bl	8007798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007770:	2204      	movs	r2, #4
 8007772:	4908      	ldr	r1, [pc, #32]	@ (8007794 <Get_SerialNum+0x54>)
 8007774:	68b8      	ldr	r0, [r7, #8]
 8007776:	f000 f80f 	bl	8007798 <IntToUnicode>
  }
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	1fff7590 	.word	0x1fff7590
 8007788:	1fff7594 	.word	0x1fff7594
 800778c:	1fff7598 	.word	0x1fff7598
 8007790:	2000016a 	.word	0x2000016a
 8007794:	2000017a 	.word	0x2000017a

08007798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
 80077ae:	e027      	b.n	8007800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	0f1b      	lsrs	r3, r3, #28
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	d80b      	bhi.n	80077d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	0f1b      	lsrs	r3, r3, #28
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4619      	mov	r1, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	440b      	add	r3, r1
 80077c8:	3230      	adds	r2, #48	@ 0x30
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e00a      	b.n	80077e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	0f1b      	lsrs	r3, r3, #28
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	4619      	mov	r1, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	440b      	add	r3, r1
 80077e0:	3237      	adds	r2, #55	@ 0x37
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	3301      	adds	r3, #1
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	3301      	adds	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
 8007800:	7dfa      	ldrb	r2, [r7, #23]
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	429a      	cmp	r2, r3
 8007806:	d3d3      	bcc.n	80077b0 <IntToUnicode+0x18>
  }
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b094      	sub	sp, #80	@ 0x50
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	2244      	movs	r2, #68	@ 0x44
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fb01 	bl	8007e30 <memset>
  if(pcdHandle->Instance==USB)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a19      	ldr	r2, [pc, #100]	@ (8007898 <HAL_PCD_MspInit+0x80>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d12a      	bne.n	800788e <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800783c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800783e:	2300      	movs	r3, #0
 8007840:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007842:	f107 030c 	add.w	r3, r7, #12
 8007846:	4618      	mov	r0, r3
 8007848:	f7fc f910 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007852:	f7f8 fe59 	bl	8000508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007856:	4b11      	ldr	r3, [pc, #68]	@ (800789c <HAL_PCD_MspInit+0x84>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785a:	4a10      	ldr	r2, [pc, #64]	@ (800789c <HAL_PCD_MspInit+0x84>)
 800785c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007860:	6593      	str	r3, [r2, #88]	@ 0x58
 8007862:	4b0e      	ldr	r3, [pc, #56]	@ (800789c <HAL_PCD_MspInit+0x84>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800786a:	60bb      	str	r3, [r7, #8]
 800786c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	2013      	movs	r0, #19
 8007874:	f7f9 f851 	bl	800091a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8007878:	2013      	movs	r0, #19
 800787a:	f7f9 f868 	bl	800094e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800787e:	2200      	movs	r2, #0
 8007880:	2100      	movs	r1, #0
 8007882:	2014      	movs	r0, #20
 8007884:	f7f9 f849 	bl	800091a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007888:	2014      	movs	r0, #20
 800788a:	f7f9 f860 	bl	800094e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800788e:	bf00      	nop
 8007890:	3750      	adds	r7, #80	@ 0x50
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	40005c00 	.word	0x40005c00
 800789c:	40021000 	.word	0x40021000

080078a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f7fe fd24 	bl	8006304 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	440b      	add	r3, r1
 80078e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	4619      	mov	r1, r3
 80078ee:	f7fe fd5e 	bl	80063ae <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	440b      	add	r3, r1
 800791a:	3324      	adds	r3, #36	@ 0x24
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	4619      	mov	r1, r3
 8007922:	f7fe fda7 	bl	8006474 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe febb 	bl	80066b8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007952:	2301      	movs	r3, #1
 8007954:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d001      	beq.n	8007962 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800795e:	f7f8 fdd3 	bl	8000508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007968:	7bfa      	ldrb	r2, [r7, #15]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fe65 	bl	800663c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fe11 	bl	80065a0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fe60 	bl	800665c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7a5b      	ldrb	r3, [r3, #9]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079a4:	4b04      	ldr	r3, [pc, #16]	@ (80079b8 <HAL_PCD_SuspendCallback+0x30>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	4a03      	ldr	r2, [pc, #12]	@ (80079b8 <HAL_PCD_SuspendCallback+0x30>)
 80079aa:	f043 0306 	orr.w	r3, r3, #6
 80079ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed00 	.word	0xe000ed00

080079bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7a5b      	ldrb	r3, [r3, #9]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079cc:	4b08      	ldr	r3, [pc, #32]	@ (80079f0 <HAL_PCD_ResumeCallback+0x34>)
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	4a07      	ldr	r2, [pc, #28]	@ (80079f0 <HAL_PCD_ResumeCallback+0x34>)
 80079d2:	f023 0306 	bic.w	r3, r3, #6
 80079d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80079d8:	f000 f9f8 	bl	8007dcc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fe50 	bl	8006688 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	e000ed00 	.word	0xe000ed00

080079f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80079fc:	4a2b      	ldr	r2, [pc, #172]	@ (8007aac <USBD_LL_Init+0xb8>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a29      	ldr	r2, [pc, #164]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a08:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007a0c:	4b27      	ldr	r3, [pc, #156]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a0e:	4a28      	ldr	r2, [pc, #160]	@ (8007ab0 <USBD_LL_Init+0xbc>)
 8007a10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a14:	2208      	movs	r2, #8
 8007a16:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a18:	4b24      	ldr	r3, [pc, #144]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a1e:	4b23      	ldr	r3, [pc, #140]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a20:	2202      	movs	r2, #2
 8007a22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007a24:	4b21      	ldr	r3, [pc, #132]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a2a:	4b20      	ldr	r3, [pc, #128]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a30:	4b1e      	ldr	r3, [pc, #120]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a36:	4b1d      	ldr	r3, [pc, #116]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a3c:	481b      	ldr	r0, [pc, #108]	@ (8007aac <USBD_LL_Init+0xb8>)
 8007a3e:	f7f9 fd69 	bl	8001514 <HAL_PCD_Init>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007a48:	f7f8 fd5e 	bl	8000508 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a52:	2318      	movs	r3, #24
 8007a54:	2200      	movs	r2, #0
 8007a56:	2100      	movs	r1, #0
 8007a58:	f7fb f9f0 	bl	8002e3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a62:	2358      	movs	r3, #88	@ 0x58
 8007a64:	2200      	movs	r2, #0
 8007a66:	2180      	movs	r1, #128	@ 0x80
 8007a68:	f7fb f9e8 	bl	8002e3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a72:	23c0      	movs	r3, #192	@ 0xc0
 8007a74:	2200      	movs	r2, #0
 8007a76:	2181      	movs	r1, #129	@ 0x81
 8007a78:	f7fb f9e0 	bl	8002e3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007a86:	2200      	movs	r2, #0
 8007a88:	2101      	movs	r1, #1
 8007a8a:	f7fb f9d7 	bl	8002e3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2182      	movs	r1, #130	@ 0x82
 8007a9c:	f7fb f9ce 	bl	8002e3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000edc 	.word	0x20000edc
 8007ab0:	40005c00 	.word	0x40005c00

08007ab4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7f9 fdf0 	bl	80016b0 <HAL_PCD_Start>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f97e 	bl	8007dd8 <USBD_Get_USB_Status>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	4608      	mov	r0, r1
 8007af4:	4611      	mov	r1, r2
 8007af6:	461a      	mov	r2, r3
 8007af8:	4603      	mov	r3, r0
 8007afa:	70fb      	strb	r3, [r7, #3]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70bb      	strb	r3, [r7, #2]
 8007b00:	4613      	mov	r3, r2
 8007b02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007b12:	78bb      	ldrb	r3, [r7, #2]
 8007b14:	883a      	ldrh	r2, [r7, #0]
 8007b16:	78f9      	ldrb	r1, [r7, #3]
 8007b18:	f7f9 ff37 	bl	800198a <HAL_PCD_EP_Open>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f958 	bl	8007dd8 <USBD_Get_USB_Status>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7f9 ff77 	bl	8001a48 <HAL_PCD_EP_Close>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f939 	bl	8007dd8 <USBD_Get_USB_Status>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	4611      	mov	r1, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fa f820 	bl	8001bd8 <HAL_PCD_EP_SetStall>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 f91a 	bl	8007dd8 <USBD_Get_USB_Status>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fa f853 	bl	8001c7c <HAL_PCD_EP_ClrStall>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f8fb 	bl	8007dd8 <USBD_Get_USB_Status>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da0b      	bge.n	8007c24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	440b      	add	r3, r1
 8007c1e:	3312      	adds	r3, #18
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	e00b      	b.n	8007c3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	440b      	add	r3, r1
 8007c36:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007c3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f9 fe6b 	bl	8001942 <HAL_PCD_SetAddress>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f8b0 	bl	8007dd8 <USBD_Get_USB_Status>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b086      	sub	sp, #24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	460b      	mov	r3, r1
 8007c94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007ca4:	7af9      	ldrb	r1, [r7, #11]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f7f9 ff5e 	bl	8001b6a <HAL_PCD_EP_Transmit>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f88f 	bl	8007dd8 <USBD_Get_USB_Status>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007ce6:	7af9      	ldrb	r1, [r7, #11]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	f7f9 fef4 	bl	8001ad8 <HAL_PCD_EP_Receive>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f86e 	bl	8007dd8 <USBD_Get_USB_Status>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d00:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7f9 ff0a 	bl	8001b3a <HAL_PCD_EP_GetRxCount>
 8007d26:	4603      	mov	r3, r0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_PCDEx_LPM_Callback+0x18>
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d013      	beq.n	8007d6e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007d46:	e023      	b.n	8007d90 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7a5b      	ldrb	r3, [r3, #9]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007d50:	f000 f83c 	bl	8007dcc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d54:	4b10      	ldr	r3, [pc, #64]	@ (8007d98 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	4a0f      	ldr	r2, [pc, #60]	@ (8007d98 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d5a:	f023 0306 	bic.w	r3, r3, #6
 8007d5e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fc8e 	bl	8006688 <USBD_LL_Resume>
    break;
 8007d6c:	e010      	b.n	8007d90 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe fc71 	bl	800665c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7a5b      	ldrb	r3, [r3, #9]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d82:	4b05      	ldr	r3, [pc, #20]	@ (8007d98 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	4a04      	ldr	r2, [pc, #16]	@ (8007d98 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d88:	f043 0306 	orr.w	r3, r3, #6
 8007d8c:	6113      	str	r3, [r2, #16]
    break;
 8007d8e:	bf00      	nop
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	e000ed00 	.word	0xe000ed00

08007d9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007da4:	4b03      	ldr	r3, [pc, #12]	@ (8007db4 <USBD_static_malloc+0x18>)
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	200011b8 	.word	0x200011b8

08007db8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007dd0:	f7f8 fb58 	bl	8000484 <SystemClock_Config>
}
 8007dd4:	bf00      	nop
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d817      	bhi.n	8007e1c <USBD_Get_USB_Status+0x44>
 8007dec:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <USBD_Get_USB_Status+0x1c>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e0b 	.word	0x08007e0b
 8007dfc:	08007e11 	.word	0x08007e11
 8007e00:	08007e17 	.word	0x08007e17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
    break;
 8007e08:	e00b      	b.n	8007e22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0e:	e008      	b.n	8007e22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
    break;
 8007e14:	e005      	b.n	8007e22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e16:	2303      	movs	r3, #3
 8007e18:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1a:	e002      	b.n	8007e22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e20:	bf00      	nop
  }
  return usb_status;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <memset>:
 8007e30:	4402      	add	r2, r0
 8007e32:	4603      	mov	r3, r0
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d100      	bne.n	8007e3a <memset+0xa>
 8007e38:	4770      	bx	lr
 8007e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e3e:	e7f9      	b.n	8007e34 <memset+0x4>

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	@ (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	@ (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	@ (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	@ (8007e84 <__libc_init_array+0x44>)
 8007e54:	f000 f818 	bl	8007e88 <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	08007f08 	.word	0x08007f08
 8007e7c:	08007f08 	.word	0x08007f08
 8007e80:	08007f08 	.word	0x08007f08
 8007e84:	08007f0c 	.word	0x08007f0c

08007e88 <_init>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr

08007e94 <_fini>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	bf00      	nop
 8007e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9a:	bc08      	pop	{r3}
 8007e9c:	469e      	mov	lr, r3
 8007e9e:	4770      	bx	lr
