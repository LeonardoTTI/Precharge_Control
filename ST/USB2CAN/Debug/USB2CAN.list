
USB2CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c78  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007e50  08007e50  00008e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  00009184  2**0
                  CONTENTS
  4 .ARM          00000000  08007eb8  08007eb8  00009184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007eb8  08007eb8  00009184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00008eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08007ec0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000184  08008044  00009184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  08008044  000093d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117fd  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003294  00000000  00000000  0001a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b39  00000000  00000000  0001eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb71  00000000  00000000  0001f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013113  00000000  00000000  0003f22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba1ab  00000000  00000000  0005233d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c4e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  0010c52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00110160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007e38 	.word	0x08007e38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007e38 	.word	0x08007e38

08000218 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800021c:	4b1f      	ldr	r3, [pc, #124]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800021e:	4a20      	ldr	r2, [pc, #128]	@ (80002a0 <MX_FDCAN1_Init+0x88>)
 8000220:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000222:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000224:	2200      	movs	r2, #0
 8000226:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000228:	4b1c      	ldr	r3, [pc, #112]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800022a:	2200      	movs	r2, #0
 800022c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800022e:	4b1b      	ldr	r3, [pc, #108]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000234:	4b19      	ldr	r3, [pc, #100]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000236:	2200      	movs	r2, #0
 8000238:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800023a:	4b18      	ldr	r3, [pc, #96]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800023c:	2200      	movs	r2, #0
 800023e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000240:	4b16      	ldr	r3, [pc, #88]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000242:	2200      	movs	r2, #0
 8000244:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000246:	4b15      	ldr	r3, [pc, #84]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000248:	2210      	movs	r2, #16
 800024a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800024c:	4b13      	ldr	r3, [pc, #76]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800024e:	2201      	movs	r2, #1
 8000250:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000252:	4b12      	ldr	r3, [pc, #72]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000254:	2202      	movs	r2, #2
 8000256:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800025a:	2202      	movs	r2, #2
 800025c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000260:	2201      	movs	r2, #1
 8000262:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000264:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000266:	2201      	movs	r2, #1
 8000268:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800026a:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800026c:	2201      	movs	r2, #1
 800026e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000272:	2201      	movs	r2, #1
 8000274:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000278:	2200      	movs	r2, #0
 800027a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800027e:	2200      	movs	r2, #0
 8000280:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000282:	4b06      	ldr	r3, [pc, #24]	@ (800029c <MX_FDCAN1_Init+0x84>)
 8000284:	2200      	movs	r2, #0
 8000286:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <MX_FDCAN1_Init+0x84>)
 800028a:	f000 fb53 	bl	8000934 <HAL_FDCAN_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000294:	f000 f910 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200001a0 	.word	0x200001a0
 80002a0:	40006400 	.word	0x40006400

080002a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b09a      	sub	sp, #104	@ 0x68
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	2244      	movs	r2, #68	@ 0x44
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f007 fd8b 	bl	8007de0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a28      	ldr	r2, [pc, #160]	@ (8000370 <HAL_FDCAN_MspInit+0xcc>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d148      	bne.n	8000366 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80002d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80002da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80002de:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 fb99 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80002f0:	f000 f8e2 	bl	80004b8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80002f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 80002f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 80002fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000300:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 8000302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b19      	ldr	r3, [pc, #100]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 800030e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000310:	4a18      	ldr	r2, [pc, #96]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000318:	4b16      	ldr	r3, [pc, #88]	@ (8000374 <HAL_FDCAN_MspInit+0xd0>)
 800031a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000324:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000328:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032a:	2302      	movs	r3, #2
 800032c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000336:	2309      	movs	r3, #9
 8000338:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800033e:	4619      	mov	r1, r3
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <HAL_FDCAN_MspInit+0xd4>)
 8000342:	f000 ff3d 	bl	80011c0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	2100      	movs	r1, #0
 800034a:	2015      	movs	r0, #21
 800034c:	f000 fabd 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000350:	2015      	movs	r0, #21
 8000352:	f000 fad4 	bl	80008fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2100      	movs	r1, #0
 800035a:	2016      	movs	r0, #22
 800035c:	f000 fab5 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000360:	2016      	movs	r0, #22
 8000362:	f000 facc 	bl	80008fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000366:	bf00      	nop
 8000368:	3768      	adds	r7, #104	@ 0x68
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40006400 	.word	0x40006400
 8000374:	40021000 	.word	0x40021000
 8000378:	48000400 	.word	0x48000400

0800037c <HAL_FDCAN_RxFifo0Callback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b09e      	sub	sp, #120	@ 0x78
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxPacketHeader;
	uint8_t id[4];
	uint8_t dataLength;
	uint8_t rxPacket[64];
	HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &rxPacketHeader, rxPacket);
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800038e:	2140      	movs	r1, #64	@ 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 fc29 	bl	8000be8 <HAL_FDCAN_GetRxMessage>
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, rxPacket, rxPacketHeader.DataLength);
 8000396:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	4619      	mov	r1, r3
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80003a0:	f005 fe55 	bl	800604e <USBD_CDC_SetTxBuffer>
	if ( USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK ){
 80003a4:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80003a6:	f005 fe89 	bl	80060bc <USBD_CDC_TransmitPacket>
		//todo implementare catch errore
	}

}
 80003aa:	bf00      	nop
 80003ac:	3778      	adds	r7, #120	@ 0x78
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000020c 	.word	0x2000020c

080003b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c2:	4a14      	ldr	r2, [pc, #80]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003c4:	f043 0320 	orr.w	r3, r3, #32
 80003c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ce:	f003 0320 	and.w	r3, r3, #32
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003da:	4a0e      	ldr	r2, [pc, #56]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003f4:	f043 0302 	orr.w	r3, r3, #2
 80003f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_GPIO_Init+0x5c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 f909 	bl	8000632 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f808 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f7ff ffc8 	bl	80003b8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000428:	f7ff fef6 	bl	8000218 <MX_FDCAN1_Init>
  MX_USB_Device_Init();
 800042c:	f006 ffc0 	bl	80073b0 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <main+0x18>

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b094      	sub	sp, #80	@ 0x50
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	2238      	movs	r2, #56	@ 0x38
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f007 fccc 	bl	8007de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000456:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800045a:	f002 fd35 	bl	8002ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800045e:	2322      	movs	r3, #34	@ 0x22
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000466:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000468:	2340      	movs	r3, #64	@ 0x40
 800046a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800046c:	2301      	movs	r3, #1
 800046e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000470:	2300      	movs	r3, #0
 8000472:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f002 fdd9 	bl	8003030 <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000484:	f000 f818 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800048c:	2301      	movs	r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f003 f8d7 	bl	8003654 <HAL_RCC_ClockConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80004ac:	f000 f804 	bl	80004b8 <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	3750      	adds	r7, #80	@ 0x50
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <Error_Handler+0x8>

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <HAL_MspInit+0x44>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <HAL_MspInit+0x44>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004fa:	f002 fd89 	bl	8003010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <NMI_Handler+0x4>

08000514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <MemManage_Handler+0x4>

08000524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <UsageFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f8b9 	bl	80006d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000570:	4802      	ldr	r0, [pc, #8]	@ (800057c <USB_HP_IRQHandler+0x10>)
 8000572:	f001 f897 	bl	80016a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000edc 	.word	0x20000edc

08000580 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000584:	4802      	ldr	r0, [pc, #8]	@ (8000590 <USB_LP_IRQHandler+0x10>)
 8000586:	f001 f88d 	bl	80016a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000edc 	.word	0x20000edc

08000594 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <FDCAN1_IT0_IRQHandler+0x10>)
 800059a:	f000 fc2d 	bl	8000df8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200001a0 	.word	0x200001a0

080005a8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <FDCAN1_IT1_IRQHandler+0x10>)
 80005ae:	f000 fc23 	bl	8000df8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200001a0 	.word	0x200001a0

080005bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	@ (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff ffea 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	@ (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	@ (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	@ (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800060e:	f007 fbef 	bl	8007df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000612:	f7ff ff01 	bl	8000418 <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000624:	08007ec0 	.word	0x08007ec0
  ldr r2, =_sbss
 8000628:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800062c:	200013d8 	.word	0x200013d8

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>

08000632 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f939 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000642:	200f      	movs	r0, #15
 8000644:	f000 f80e 	bl	8000664 <HAL_InitTick>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	e001      	b.n	8000658 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000654:	f7ff ff36 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000658:	79fb      	ldrb	r3, [r7, #7]

}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <HAL_InitTick+0x68>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d022      	beq.n	80006be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_InitTick+0x6c>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <HAL_InitTick+0x68>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000684:	fbb1 f3f3 	udiv	r3, r1, r3
 8000688:	fbb2 f3f3 	udiv	r3, r2, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f944 	bl	800091a <HAL_SYSTICK_Config>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10f      	bne.n	80006b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b0f      	cmp	r3, #15
 800069c:	d809      	bhi.n	80006b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069e:	2200      	movs	r2, #0
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	f04f 30ff 	mov.w	r0, #4294967295
 80006a6:	f000 f910 	bl	80008ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <HAL_InitTick+0x70>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	e007      	b.n	80006c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e004      	b.n	80006c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e001      	b.n	80006c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <HAL_IncTick+0x1c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_IncTick+0x20>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a03      	ldr	r2, [pc, #12]	@ (80006f4 <HAL_IncTick+0x1c>)
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	20000204 	.word	0x20000204
 80006f8:	20000008 	.word	0x20000008

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <HAL_GetTick+0x14>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000204 	.word	0x20000204

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db0b      	blt.n	80007a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 021f 	and.w	r2, r3, #31
 8000790:	4907      	ldr	r1, [pc, #28]	@ (80007b0 <__NVIC_EnableIRQ+0x38>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	@ (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	@ (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	@ 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	@ 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff8e 	bl	80007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff29 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff40 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff90 	bl	8000808 <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff5f 	bl	80007b4 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff33 	bl	8000778 <__NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffa4 	bl	8000870 <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e147      	b.n	8000bd6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d106      	bne.n	8000960 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fca2 	bl	80002a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	699a      	ldr	r2, [r3, #24]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0210 	bic.w	r2, r2, #16
 800096e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000970:	f7ff fec4 	bl	80006fc <HAL_GetTick>
 8000974:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000976:	e012      	b.n	800099e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000978:	f7ff fec0 	bl	80006fc <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b0a      	cmp	r3, #10
 8000984:	d90b      	bls.n	800099e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f043 0201 	orr.w	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2203      	movs	r2, #3
 8000996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e11b      	b.n	8000bd6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d0e5      	beq.n	8000978 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009bc:	f7ff fe9e 	bl	80006fc <HAL_GetTick>
 80009c0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80009c2:	e012      	b.n	80009ea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009c4:	f7ff fe9a 	bl	80006fc <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d90b      	bls.n	80009ea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	f043 0201 	orr.w	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2203      	movs	r2, #3
 80009e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e0f5      	b.n	8000bd6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0e5      	beq.n	80009c4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0202 	orr.w	r2, r2, #2
 8000a06:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a74      	ldr	r2, [pc, #464]	@ (8000be0 <HAL_FDCAN_Init+0x2ac>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d103      	bne.n	8000a1a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000a12:	4a74      	ldr	r2, [pc, #464]	@ (8000be4 <HAL_FDCAN_Init+0x2b0>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7c1b      	ldrb	r3, [r3, #16]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d108      	bne.n	8000a34 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	699a      	ldr	r2, [r3, #24]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a30:	619a      	str	r2, [r3, #24]
 8000a32:	e007      	b.n	8000a44 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a42:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7c5b      	ldrb	r3, [r3, #17]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d108      	bne.n	8000a5e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	699a      	ldr	r2, [r3, #24]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a5a:	619a      	str	r2, [r3, #24]
 8000a5c:	e007      	b.n	8000a6e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000a6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7c9b      	ldrb	r3, [r3, #18]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d108      	bne.n	8000a88 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	699a      	ldr	r2, [r3, #24]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000a84:	619a      	str	r2, [r3, #24]
 8000a86:	e007      	b.n	8000a98 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	699a      	ldr	r2, [r3, #24]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000a96:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000abc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f022 0210 	bic.w	r2, r2, #16
 8000acc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d108      	bne.n	8000ae8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 0204 	orr.w	r2, r2, #4
 8000ae4:	619a      	str	r2, [r3, #24]
 8000ae6:	e02c      	b.n	8000b42 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d028      	beq.n	8000b42 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d01c      	beq.n	8000b32 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b06:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0210 	orr.w	r2, r2, #16
 8000b16:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d110      	bne.n	8000b42 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	699a      	ldr	r2, [r3, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0220 	orr.w	r2, r2, #32
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	e007      	b.n	8000b42 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	699a      	ldr	r2, [r3, #24]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0220 	orr.w	r2, r2, #32
 8000b40:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b52:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b5a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b6a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b6c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000b76:	d115      	bne.n	8000ba4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b7c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b82:	3b01      	subs	r3, #1
 8000b84:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b86:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b90:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ba0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ba2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 faaa 	bl	8001114 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40006400 	.word	0x40006400
 8000be4:	40006500 	.word	0x40006500

08000be8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b08b      	sub	sp, #44	@ 0x2c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c00:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000c02:	7efb      	ldrb	r3, [r7, #27]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	f040 80e8 	bne.w	8000dda <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b40      	cmp	r3, #64	@ 0x40
 8000c0e:	d137      	bne.n	8000c80 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d107      	bne.n	8000c30 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e0db      	b.n	8000de8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c38:	0e1b      	lsrs	r3, r3, #24
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10a      	bne.n	8000c58 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c4a:	0a5b      	lsrs	r3, r3, #9
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	4413      	add	r3, r2
 8000c6a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000c70:	69fa      	ldr	r2, [r7, #28]
 8000c72:	4613      	mov	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c7e:	e036      	b.n	8000cee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d107      	bne.n	8000ca0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e0a3      	b.n	8000de8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ca8:	0e1b      	lsrs	r3, r3, #24
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10a      	bne.n	8000cc8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d101      	bne.n	8000cc8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	4413      	add	r3, r2
 8000cda:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000ce0:	69fa      	ldr	r2, [r7, #28]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	0c9b      	lsrs	r3, r3, #18
 8000d08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e005      	b.n	8000d1e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	3304      	adds	r3, #4
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	f003 020f 	and.w	r2, r3, #15
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	0e1b      	lsrs	r3, r3, #24
 8000d72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0fda      	lsrs	r2, r3, #31
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	3304      	adds	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	e00a      	b.n	8000daa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	441a      	add	r2, r3
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	440b      	add	r3, r1
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	3301      	adds	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4a11      	ldr	r2, [pc, #68]	@ (8000df4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	461a      	mov	r2, r3
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d3ec      	bcc.n	8000d94 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b40      	cmp	r3, #64	@ 0x40
 8000dbe:	d105      	bne.n	8000dcc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000dca:	e004      	b.n	8000dd6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e006      	b.n	8000de8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	f043 0208 	orr.w	r2, r3, #8
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
  }
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	372c      	adds	r7, #44	@ 0x2c
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	08007ea8 	.word	0x08007ea8

08000df8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e06:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e14:	4013      	ands	r3, r2
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e44:	4013      	ands	r3, r2
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e4e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8000e52:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e5a:	6a3a      	ldr	r2, [r7, #32]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e6a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e86:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2240      	movs	r2, #64	@ 0x40
 8000ea2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f916 	bl	80010d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d019      	beq.n	8000ee8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d014      	beq.n	8000ee8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ede:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f8d8 	bl	8001098 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f8a2 	bl	8001042 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d007      	beq.n	8000f14 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f0a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fa34 	bl	800037c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f20:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000f22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f897 	bl	8001058 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00c      	beq.n	8000f4e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f890 	bl	800106e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d018      	beq.n	8000f8a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f6a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f87c 	bl	8001082 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00c      	beq.n	8000fae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f880 	bl	80010ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f878 	bl	80010c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00f      	beq.n	8000ffc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800100a:	69f9      	ldr	r1, [r7, #28]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f876 	bl	80010fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d009      	beq.n	800102c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a3a      	ldr	r2, [r7, #32]
 800101e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f858 	bl	80010ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	@ 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800111e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001154:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115c:	061a      	lsls	r2, r3, #24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e005      	b.n	80011a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3304      	adds	r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3f3      	bcc.n	8001196 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	4000a400 	.word	0x4000a400

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ce:	e15a      	b.n	8001486 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 814c 	beq.w	8001480 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d005      	beq.n	8001200 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d130      	bne.n	8001262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001236:	2201      	movs	r2, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 0201 	and.w	r2, r3, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b03      	cmp	r3, #3
 800126c:	d017      	beq.n	800129e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d123      	bne.n	80012f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0203 	and.w	r2, r3, #3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80a6 	beq.w	8001480 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001334:	4b5b      	ldr	r3, [pc, #364]	@ (80014a4 <HAL_GPIO_Init+0x2e4>)
 8001336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001338:	4a5a      	ldr	r2, [pc, #360]	@ (80014a4 <HAL_GPIO_Init+0x2e4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001340:	4b58      	ldr	r3, [pc, #352]	@ (80014a4 <HAL_GPIO_Init+0x2e4>)
 8001342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134c:	4a56      	ldr	r2, [pc, #344]	@ (80014a8 <HAL_GPIO_Init+0x2e8>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001376:	d01f      	beq.n	80013b8 <HAL_GPIO_Init+0x1f8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a4c      	ldr	r2, [pc, #304]	@ (80014ac <HAL_GPIO_Init+0x2ec>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d019      	beq.n	80013b4 <HAL_GPIO_Init+0x1f4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a4b      	ldr	r2, [pc, #300]	@ (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d013      	beq.n	80013b0 <HAL_GPIO_Init+0x1f0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a4a      	ldr	r2, [pc, #296]	@ (80014b4 <HAL_GPIO_Init+0x2f4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d00d      	beq.n	80013ac <HAL_GPIO_Init+0x1ec>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a49      	ldr	r2, [pc, #292]	@ (80014b8 <HAL_GPIO_Init+0x2f8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0x1e8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a48      	ldr	r2, [pc, #288]	@ (80014bc <HAL_GPIO_Init+0x2fc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d101      	bne.n	80013a4 <HAL_GPIO_Init+0x1e4>
 80013a0:	2305      	movs	r3, #5
 80013a2:	e00a      	b.n	80013ba <HAL_GPIO_Init+0x1fa>
 80013a4:	2306      	movs	r3, #6
 80013a6:	e008      	b.n	80013ba <HAL_GPIO_Init+0x1fa>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x1fa>
 80013ac:	2303      	movs	r3, #3
 80013ae:	e004      	b.n	80013ba <HAL_GPIO_Init+0x1fa>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x1fa>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_GPIO_Init+0x1fa>
 80013b8:	2300      	movs	r3, #0
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ca:	4937      	ldr	r1, [pc, #220]	@ (80014a8 <HAL_GPIO_Init+0x2e8>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d8:	4b39      	ldr	r3, [pc, #228]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013fc:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001426:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001450:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_GPIO_Init+0x300>)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	f47f ae9d 	bne.w	80011d0 <HAL_GPIO_Init+0x10>
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48000800 	.word	0x48000800
 80014b4:	48000c00 	.word	0x48000c00
 80014b8:	48001000 	.word	0x48001000
 80014bc:	48001400 	.word	0x48001400
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0c0      	b.n	8001658 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f006 f96c 	bl	80077c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fc94 	bl	8003e2a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e03e      	b.n	8001586 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3311      	adds	r3, #17
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	3310      	adds	r3, #16
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	3313      	adds	r3, #19
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	3320      	adds	r3, #32
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3324      	adds	r3, #36	@ 0x24
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	3301      	adds	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	429a      	cmp	r2, r3
 800158e:	d3bb      	bcc.n	8001508 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e044      	b.n	8001620 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	3301      	adds	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	791b      	ldrb	r3, [r3, #4]
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3b5      	bcc.n	8001596 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001636:	f002 fc13 	bl	8003e60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7a9b      	ldrb	r3, [r3, #10]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d102      	bne.n	8001656 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f001 fc0e 	bl	8002e72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_PCD_Start+0x16>
 8001672:	2302      	movs	r3, #2
 8001674:	e012      	b.n	800169c <HAL_PCD_Start+0x3c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fbba 	bl	8003dfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f004 f997 	bl	80059c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 f99c 	bl	80059ee <USB_ReadInterrupts>
 80016b6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fb06 	bl	8001cd4 <PCD_EP_ISR_Handler>

    return;
 80016c8:	e110      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016e6:	b292      	uxth	r2, r2
 80016e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f006 f904 	bl	80078fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016f2:	2100      	movs	r1, #0
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f8fc 	bl	80018f2 <HAL_PCD_SetAddress>

    return;
 80016fa:	e0f7      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001718:	b292      	uxth	r2, r2
 800171a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800171e:	e0e5      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00c      	beq.n	8001744 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800173c:	b292      	uxth	r2, r2
 800173e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001742:	e0d3      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d034      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0204 	bic.w	r2, r2, #4
 8001760:	b292      	uxth	r2, r2
 8001762:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800176e:	b29a      	uxth	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0208 	bic.w	r2, r2, #8
 8001778:	b292      	uxth	r2, r2
 800177a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001790:	2100      	movs	r1, #0
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f006 faa4 	bl	8007ce0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f006 f8e7 	bl	800796c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80017b6:	e099      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d027      	beq.n	8001812 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0208 	orr.w	r2, r2, #8
 80017d4:	b292      	uxth	r2, r2
 80017d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ec:	b292      	uxth	r2, r2
 80017ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0204 	orr.w	r2, r2, #4
 8001804:	b292      	uxth	r2, r2
 8001806:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f006 f894 	bl	8007938 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001810:	e06c      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001818:	2b00      	cmp	r3, #0
 800181a:	d040      	beq.n	800189e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800182e:	b292      	uxth	r2, r2
 8001830:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d12b      	bne.n	8001896 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0204 	orr.w	r2, r2, #4
 8001850:	b292      	uxth	r2, r2
 8001852:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0208 	orr.w	r2, r2, #8
 8001868:	b292      	uxth	r2, r2
 800186a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800187e:	b29b      	uxth	r3, r3
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800188c:	2101      	movs	r1, #1
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f006 fa26 	bl	8007ce0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001894:	e02a      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f006 f84e 	bl	8007938 <HAL_PCD_SuspendCallback>
    return;
 800189c:	e026      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00f      	beq.n	80018c8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f006 f80c 	bl	80078de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018c6:	e011      	b.n	80018ec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00c      	beq.n	80018ec <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e4:	b292      	uxth	r2, r2
 80018e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018ea:	bf00      	nop
  }
}
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_PCD_SetAddress+0x1a>
 8001908:	2302      	movs	r3, #2
 800190a:	e012      	b.n	8001932 <HAL_PCD_SetAddress+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f004 f838 	bl	8005998 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	4608      	mov	r0, r1
 8001944:	4611      	mov	r1, r2
 8001946:	461a      	mov	r2, r3
 8001948:	4603      	mov	r3, r0
 800194a:	70fb      	strb	r3, [r7, #3]
 800194c:	460b      	mov	r3, r1
 800194e:	803b      	strh	r3, [r7, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da0e      	bge.n	800197e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 0207 	and.w	r2, r3, #7
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	3310      	adds	r3, #16
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	705a      	strb	r2, [r3, #1]
 800197c:	e00e      	b.n	800199c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f003 0207 	and.w	r2, r3, #7
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80019a8:	883b      	ldrh	r3, [r7, #0]
 80019aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	78ba      	ldrb	r2, [r7, #2]
 80019b6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_Open+0x98>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00e      	b.n	80019f0 <HAL_PCD_EP_Open+0xb6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fa5b 	bl	8003e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da0e      	bge.n	8001a2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0207 	and.w	r2, r3, #7
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	705a      	strb	r2, [r3, #1]
 8001a28:	e00e      	b.n	8001a48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0207 	and.w	r2, r3, #7
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_EP_Close+0x6a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e00e      	b.n	8001a80 <HAL_PCD_EP_Close+0x88>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fefb 	bl	800486c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 f8b3 	bl	8004c46 <USB_EPStartXfer>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0207 	and.w	r2, r3, #7
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001b0c:	681b      	ldr	r3, [r3, #0]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	460b      	mov	r3, r1
 8001b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	f003 0207 	and.w	r2, r3, #7
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	3310      	adds	r3, #16
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2201      	movs	r2, #1
 8001b64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b66:	7afb      	ldrb	r3, [r7, #11]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6979      	ldr	r1, [r7, #20]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 f864 	bl	8004c46 <USB_EPStartXfer>

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	7912      	ldrb	r2, [r2, #4]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e03e      	b.n	8001c24 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da0e      	bge.n	8001bcc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 0207 	and.w	r2, r3, #7
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	705a      	strb	r2, [r3, #1]
 8001bca:	e00c      	b.n	8001be6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_PCD_EP_SetStall+0x7e>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e00e      	b.n	8001c24 <HAL_PCD_EP_SetStall+0x9c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fdc5 	bl	80057a4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	7912      	ldrb	r2, [r2, #4]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e040      	b.n	8001ccc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0e      	bge.n	8001c70 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0207 	and.w	r2, r3, #7
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	3310      	adds	r3, #16
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	705a      	strb	r2, [r3, #1]
 8001c6e:	e00e      	b.n	8001c8e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 0207 	and.w	r2, r3, #7
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_PCD_EP_ClrStall+0x82>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e00e      	b.n	8001ccc <HAL_PCD_EP_ClrStall+0xa0>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68f9      	ldr	r1, [r7, #12]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 fdc2 	bl	8005846 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b092      	sub	sp, #72	@ 0x48
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cdc:	e333      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ce6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ce8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001cf4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 8108 	bne.w	8001f0e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d14c      	bne.n	8001da2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d18:	813b      	strh	r3, [r7, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	893b      	ldrh	r3, [r7, #8]
 8001d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3310      	adds	r3, #16
 8001d30:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	441a      	add	r2, r3
 8001d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d66:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f005 fd9d 	bl	80078aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 82e5 	beq.w	8002346 <PCD_EP_ISR_Handler+0x672>
 8001d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 82e0 	bne.w	8002346 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7b1b      	ldrb	r3, [r3, #12]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	731a      	strb	r2, [r3, #12]
 8001da0:	e2d1      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001da8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001db2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d032      	beq.n	8001e22 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f003 fe4b 	bl	8005a92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e08:	4013      	ands	r3, r2
 8001e0a:	817b      	strh	r3, [r7, #10]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	897a      	ldrh	r2, [r7, #10]
 8001e12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e16:	b292      	uxth	r2, r2
 8001e18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f005 fd18 	bl	8007850 <HAL_PCD_SetupStageCallback>
 8001e20:	e291      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e22:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f280 828d 	bge.w	8002346 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e38:	4013      	ands	r3, r2
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	89fa      	ldrh	r2, [r7, #14]
 8001e42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e46:	b292      	uxth	r2, r2
 8001e48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d019      	beq.n	8001eae <PCD_EP_ISR_Handler+0x1da>
 8001e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e88:	6959      	ldr	r1, [r3, #20]
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f003 fdfd 	bl	8005a92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ea4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f005 fce3 	bl	8007874 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001eb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 8242 	bne.w	8002346 <PCD_EP_ISR_Handler+0x672>
 8001ec2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ec4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ec8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ecc:	f000 823b 	beq.w	8002346 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee0:	81bb      	strh	r3, [r7, #12]
 8001ee2:	89bb      	ldrh	r3, [r7, #12]
 8001ee4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001ee8:	81bb      	strh	r3, [r7, #12]
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ef0:	81bb      	strh	r3, [r7, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	89bb      	ldrh	r3, [r7, #12]
 8001ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8013      	strh	r3, [r2, #0]
 8001f0c:	e21b      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f280 80f1 	bge.w	800210c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f40:	4013      	ands	r3, r2
 8001f42:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f5c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f74:	7b1b      	ldrb	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d123      	bne.n	8001fc2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001fa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 808b 	beq.w	80020c2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb2:	6959      	ldr	r1, [r3, #20]
 8001fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb6:	88da      	ldrh	r2, [r3, #6]
 8001fb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001fbc:	f003 fd69 	bl	8005a92 <USB_ReadPMA>
 8001fc0:	e07f      	b.n	80020c2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc4:	78db      	ldrb	r3, [r3, #3]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d109      	bne.n	8001fde <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f9c6 	bl	8002362 <HAL_PCD_EP_DB_Receive>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001fdc:	e071      	b.n	80020c2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	441a      	add	r2, r3
 8002008:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800200a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800200e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002016:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800201a:	b29b      	uxth	r3, r3
 800201c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d022      	beq.n	800207e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002040:	b29b      	uxth	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002060:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02c      	beq.n	80020c2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800206e:	6959      	ldr	r1, [r3, #20]
 8002070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002072:	891a      	ldrh	r2, [r3, #8]
 8002074:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002078:	f003 fd0b 	bl	8005a92 <USB_ReadPMA>
 800207c:	e021      	b.n	80020c2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	4413      	add	r3, r2
 8002098:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80020a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b8:	895a      	ldrh	r2, [r3, #10]
 80020ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020be:	f003 fce8 	bl	8005a92 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020ca:	441a      	add	r2, r3
 80020cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020d8:	441a      	add	r2, r3
 80020da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <PCD_EP_ISR_Handler+0x41e>
 80020e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80020ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d206      	bcs.n	8002100 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f005 fbbb 	bl	8007874 <HAL_PCD_DataOutStageCallback>
 80020fe:	e005      	b.n	800210c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fd9d 	bl	8004c46 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800210c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800210e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8117 	beq.w	8002346 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002118:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	3310      	adds	r3, #16
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	441a      	add	r2, r3
 8002156:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	2b01      	cmp	r3, #1
 800216a:	f040 80a1 	bne.w	80022b0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800216e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8092 	beq.w	80022a2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800217e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d046      	beq.n	8002216 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d126      	bne.n	80021de <PCD_EP_ISR_Handler+0x50a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4413      	add	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00da      	lsls	r2, r3, #3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	e061      	b.n	80022a2 <PCD_EP_ISR_Handler+0x5ce>
 80021de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d15d      	bne.n	80022a2 <PCD_EP_ISR_Handler+0x5ce>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	e045      	b.n	80022a2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d126      	bne.n	8002272 <PCD_EP_ISR_Handler+0x59e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	4413      	add	r3, r2
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
 800223c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	00da      	lsls	r2, r3, #3
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	4413      	add	r3, r2
 8002246:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800224a:	623b      	str	r3, [r7, #32]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002256:	b29a      	uxth	r2, r3
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226a:	b29a      	uxth	r2, r3
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	e017      	b.n	80022a2 <PCD_EP_ISR_Handler+0x5ce>
 8002272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d113      	bne.n	80022a2 <PCD_EP_ISR_Handler+0x5ce>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	4413      	add	r3, r2
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800228c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	00da      	lsls	r2, r3, #3
 8002292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002294:	4413      	add	r3, r2
 8002296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800229c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229e:	2200      	movs	r2, #0
 80022a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f005 fafe 	bl	80078aa <HAL_PCD_DataInStageCallback>
 80022ae:	e04a      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80022b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d13f      	bne.n	800233a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022de:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80022e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d906      	bls.n	80022f8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80022ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80022f0:	1ad2      	subs	r2, r2, r3
 80022f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f4:	619a      	str	r2, [r3, #24]
 80022f6:	e002      	b.n	80022fe <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80022f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80022fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f005 facc 	bl	80078aa <HAL_PCD_DataInStageCallback>
 8002312:	e018      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800231a:	441a      	add	r2, r3
 800231c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002326:	441a      	add	r2, r3
 8002328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800232a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fc87 	bl	8004c46 <USB_EPStartXfer>
 8002338:	e005      	b.n	8002346 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800233a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800233c:	461a      	mov	r2, r3
 800233e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f917 	bl	8002574 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800234e:	b29b      	uxth	r3, r3
 8002350:	b21b      	sxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	f6ff acc3 	blt.w	8001cde <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3748      	adds	r7, #72	@ 0x48
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b088      	sub	sp, #32
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	4613      	mov	r3, r2
 800236e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d07c      	beq.n	8002474 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	4413      	add	r3, r2
 8002394:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	8b7b      	ldrh	r3, [r7, #26]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d306      	bcc.n	80023b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	8b7b      	ldrh	r3, [r7, #26]
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	e002      	b.n	80023be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d123      	bne.n	800240e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023e0:	833b      	strh	r3, [r7, #24]
 80023e2:	8b3b      	ldrh	r3, [r7, #24]
 80023e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80023e8:	833b      	strh	r3, [r7, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	441a      	add	r2, r3
 80023f8:	8b3b      	ldrh	r3, [r7, #24]
 80023fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800240a:	b29b      	uxth	r3, r3
 800240c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01f      	beq.n	8002458 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800242e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002432:	82fb      	strh	r3, [r7, #22]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	8afb      	ldrh	r3, [r7, #22]
 8002444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800244c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002450:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002454:	b29b      	uxth	r3, r3
 8002456:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002458:	8b7b      	ldrh	r3, [r7, #26]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8085 	beq.w	800256a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6959      	ldr	r1, [r3, #20]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	891a      	ldrh	r2, [r3, #8]
 800246c:	8b7b      	ldrh	r3, [r7, #26]
 800246e:	f003 fb10 	bl	8005a92 <USB_ReadPMA>
 8002472:	e07a      	b.n	800256a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4413      	add	r3, r2
 800248e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002498:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	8b7b      	ldrh	r3, [r7, #26]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d306      	bcc.n	80024b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	8b7b      	ldrh	r3, [r7, #26]
 80024aa:	1ad2      	subs	r2, r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	619a      	str	r2, [r3, #24]
 80024b0:	e002      	b.n	80024b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d123      	bne.n	8002508 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024da:	83fb      	strh	r3, [r7, #30]
 80024dc:	8bfb      	ldrh	r3, [r7, #30]
 80024de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80024e2:	83fb      	strh	r3, [r7, #30]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	8bfb      	ldrh	r3, [r7, #30]
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11f      	bne.n	8002552 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252c:	83bb      	strh	r3, [r7, #28]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	441a      	add	r2, r3
 800253c:	8bbb      	ldrh	r3, [r7, #28]
 800253e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800254e:	b29b      	uxth	r3, r3
 8002550:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002552:	8b7b      	ldrh	r3, [r7, #26]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	895a      	ldrh	r2, [r3, #10]
 8002564:	8b7b      	ldrh	r3, [r7, #26]
 8002566:	f003 fa94 	bl	8005a92 <USB_ReadPMA>
    }
  }

  return count;
 800256a:	8b7b      	ldrh	r3, [r7, #26]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0a6      	sub	sp, #152	@ 0x98
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 81f7 	beq.w	800297c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80025be:	429a      	cmp	r2, r3
 80025c0:	d907      	bls.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80025ca:	1ad2      	subs	r2, r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	619a      	str	r2, [r3, #24]
 80025d0:	e002      	b.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 80e1 	bne.w	80027a4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d126      	bne.n	8002638 <HAL_PCD_EP_DB_Transmit+0xc4>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	4413      	add	r3, r2
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00da      	lsls	r2, r3, #3
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	4413      	add	r3, r2
 800260c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261c:	b29a      	uxth	r2, r3
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002630:	b29a      	uxth	r2, r3
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	e01a      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d116      	bne.n	800266e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	4413      	add	r3, r2
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	00da      	lsls	r2, r3, #3
 800265e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002660:	4413      	add	r3, r2
 8002662:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34
 8002668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d126      	bne.n	80026ca <HAL_PCD_EP_DB_Transmit+0x156>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	4413      	add	r3, r2
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	4413      	add	r3, r2
 800269e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	e017      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x186>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d113      	bne.n	80026fa <HAL_PCD_EP_DB_Transmit+0x186>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e0:	4413      	add	r3, r2
 80026e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	00da      	lsls	r2, r3, #3
 80026ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ec:	4413      	add	r3, r2
 80026ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	2200      	movs	r2, #0
 80026f8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	78db      	ldrb	r3, [r3, #3]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d123      	bne.n	800274a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800271c:	837b      	strh	r3, [r7, #26]
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	f083 0320 	eor.w	r3, r3, #32
 8002724:	837b      	strh	r3, [r7, #26]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	441a      	add	r2, r3
 8002734:	8b7b      	ldrh	r3, [r7, #26]
 8002736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800273a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800273e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002746:	b29b      	uxth	r3, r3
 8002748:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4619      	mov	r1, r3
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f005 f8aa 	bl	80078aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01f      	beq.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277a:	833b      	strh	r3, [r7, #24]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	441a      	add	r2, r3
 800278a:	8b3b      	ldrh	r3, [r7, #24]
 800278c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002794:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279c:	b29b      	uxth	r3, r3
 800279e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e31f      	b.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d021      	beq.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80027de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 82ca 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002806:	441a      	add	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002814:	441a      	add	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	429a      	cmp	r2, r3
 8002824:	d309      	bcc.n	800283a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e015      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002842:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002846:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002850:	e009      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d15f      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	643b      	str	r3, [r7, #64]	@ 0x40
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002882:	4413      	add	r3, r2
 8002884:	643b      	str	r3, [r7, #64]	@ 0x40
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	00da      	lsls	r2, r3, #3
 800288c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288e:	4413      	add	r3, r2
 8002890:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x34e>
 80028ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e051      	b.n	8002966 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80028c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80028c6:	d816      	bhi.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x382>
 80028c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_PCD_EP_DB_Transmit+0x36a>
 80028d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028da:	3301      	adds	r3, #1
 80028dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80028de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	e037      	b.n	8002966 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80028f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80028fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_PCD_EP_DB_Transmit+0x398>
 8002906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002908:	3b01      	subs	r3, #1
 800290a:	653b      	str	r3, [r7, #80]	@ 0x50
 800290c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29a      	uxth	r2, r3
 8002912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	029b      	lsls	r3, r3, #10
 8002918:	b29b      	uxth	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002926:	b29a      	uxth	r2, r3
 8002928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e01b      	b.n	8002966 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d117      	bne.n	8002966 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800294a:	4413      	add	r3, r2
 800294c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002956:	4413      	add	r3, r2
 8002958:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800295c:	647b      	str	r3, [r7, #68]	@ 0x44
 800295e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002960:	b29a      	uxth	r2, r3
 8002962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002964:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6959      	ldr	r1, [r3, #20]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	891a      	ldrh	r2, [r3, #8]
 8002972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002974:	b29b      	uxth	r3, r3
 8002976:	f003 f84a 	bl	8005a0e <USB_WritePMA>
 800297a:	e20a      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002984:	b29b      	uxth	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4413      	add	r3, r2
 8002996:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d307      	bcc.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80029b8:	1ad2      	subs	r2, r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	619a      	str	r2, [r3, #24]
 80029be:	e002      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80f6 	bne.w	8002bbc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d126      	bne.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	4413      	add	r3, r2
 80029ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f8:	4413      	add	r3, r2
 80029fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80029fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e01a      	b.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d116      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a42:	4413      	add	r3, r2
 8002a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00da      	lsls	r2, r3, #3
 8002a4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a4e:	4413      	add	r3, r2
 8002a50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002a54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a58:	2200      	movs	r2, #0
 8002a5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d12f      	bne.n	8002acc <HAL_PCD_EP_DB_Transmit+0x558>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a84:	4413      	add	r3, r2
 8002a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	00da      	lsls	r2, r3, #3
 8002a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	e01c      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x592>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d118      	bne.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x592>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00da      	lsls	r2, r3, #3
 8002af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002af4:	4413      	add	r3, r2
 8002af6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002afa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b02:	2200      	movs	r2, #0
 8002b04:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d127      	bne.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b28:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002b2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002b30:	f083 0320 	eor.w	r3, r3, #32
 8002b34:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f004 fea0 	bl	80078aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d121      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b8e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e113      	b.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d121      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 80be 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c1e:	441a      	add	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c2c:	441a      	add	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d309      	bcc.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	621a      	str	r2, [r3, #32]
 8002c50:	e015      	b.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002c5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c68:	e009      	b.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d15f      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ca0:	4413      	add	r3, r2
 8002ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	00da      	lsls	r2, r3, #3
 8002caa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cac:	4413      	add	r3, r2
 8002cae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	e04e      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8002ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ce2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ce4:	d816      	bhi.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x788>
 8002cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	029b      	lsls	r3, r3, #10
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	e034      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8002d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d26:	3b01      	subs	r3, #1
 8002d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	029b      	lsls	r3, r3, #10
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	e018      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d114      	bne.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d62:	4413      	add	r3, r2
 8002d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	00da      	lsls	r2, r3, #3
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6e:	4413      	add	r3, r2
 8002d70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d7c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6959      	ldr	r1, [r3, #20]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	895a      	ldrh	r2, [r3, #10]
 8002d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f002 fe3e 	bl	8005a0e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dac:	82fb      	strh	r3, [r7, #22]
 8002dae:	8afb      	ldrh	r3, [r7, #22]
 8002db0:	f083 0310 	eor.w	r3, r3, #16
 8002db4:	82fb      	strh	r3, [r7, #22]
 8002db6:	8afb      	ldrh	r3, [r7, #22]
 8002db8:	f083 0320 	eor.w	r3, r3, #32
 8002dbc:	82fb      	strh	r3, [r7, #22]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	8afb      	ldrh	r3, [r7, #22]
 8002dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3798      	adds	r7, #152	@ 0x98
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	f003 0207 	and.w	r2, r3, #7
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3310      	adds	r3, #16
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e009      	b.n	8002e36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e22:	897a      	ldrh	r2, [r7, #10]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	80da      	strh	r2, [r3, #6]
 8002e4a:	e00b      	b.n	8002e64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d141      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee2:	d131      	bne.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee4:	4b47      	ldr	r3, [pc, #284]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eea:	4a46      	ldr	r2, [pc, #280]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef4:	4b43      	ldr	r3, [pc, #268]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002efc:	4a41      	ldr	r2, [pc, #260]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f04:	4b40      	ldr	r3, [pc, #256]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2232      	movs	r2, #50	@ 0x32
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	0c9b      	lsrs	r3, r3, #18
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1a:	e002      	b.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f22:	4b38      	ldr	r3, [pc, #224]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2e:	d102      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f2      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f36:	4b33      	ldr	r3, [pc, #204]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f42:	d158      	bne.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e057      	b.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f48:	4b2e      	ldr	r3, [pc, #184]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f58:	e04d      	b.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f60:	d141      	bne.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f62:	4b28      	ldr	r3, [pc, #160]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d131      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f70:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f76:	4a23      	ldr	r2, [pc, #140]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f80:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f88:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f90:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2232      	movs	r2, #50	@ 0x32
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	0c9b      	lsrs	r3, r3, #18
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa6:	e002      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fba:	d102      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f2      	bne.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fce:	d112      	bne.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e011      	b.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fe4:	e007      	b.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fee:	4a05      	ldr	r2, [pc, #20]	@ (8003004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40007000 	.word	0x40007000
 8003008:	20000000 	.word	0x20000000
 800300c:	431bde83 	.word	0x431bde83

08003010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a04      	ldr	r2, [pc, #16]	@ (800302c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800301a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800301e:	6093      	str	r3, [r2, #8]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40007000 	.word	0x40007000

08003030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e2fe      	b.n	8003640 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d075      	beq.n	800313a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4b97      	ldr	r3, [pc, #604]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	4b94      	ldr	r3, [pc, #592]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0x3e>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d002      	beq.n	8003074 <HAL_RCC_OscConfig+0x44>
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d10b      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	4b8d      	ldr	r3, [pc, #564]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05b      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d157      	bne.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e2d9      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x74>
 8003096:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a84      	ldr	r2, [pc, #528]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x98>
 80030ae:	4b7f      	ldr	r3, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b7c      	ldr	r3, [pc, #496]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7b      	ldr	r2, [pc, #492]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030c8:	4b78      	ldr	r3, [pc, #480]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a77      	ldr	r2, [pc, #476]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b75      	ldr	r3, [pc, #468]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a74      	ldr	r2, [pc, #464]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fd fb08 	bl	80006fc <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fd fb04 	bl	80006fc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e29e      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fd faf4 	bl	80006fc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fd faf0 	bl	80006fc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e28a      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800312a:	4b60      	ldr	r3, [pc, #384]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d075      	beq.n	8003232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003146:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003150:	4b56      	ldr	r3, [pc, #344]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d102      	bne.n	8003166 <HAL_RCC_OscConfig+0x136>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d002      	beq.n	800316c <HAL_RCC_OscConfig+0x13c>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d11f      	bne.n	80031ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800316c:	4b4f      	ldr	r3, [pc, #316]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x154>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e25d      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	4946      	ldr	r1, [pc, #280]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003198:	4b45      	ldr	r3, [pc, #276]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd fa61 	bl	8000664 <HAL_InitTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d043      	beq.n	8003230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e249      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3c      	ldr	r2, [pc, #240]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fa9c 	bl	80006fc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fd fa98 	bl	80006fc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e232      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031da:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	492d      	ldr	r1, [pc, #180]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
 80031fa:	e01a      	b.n	8003232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fc:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2a      	ldr	r2, [pc, #168]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd fa78 	bl	80006fc <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fd fa74 	bl	80006fc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e20e      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003222:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1e0>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d041      	beq.n	80032c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01c      	beq.n	8003280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003246:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324c:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fd fa51 	bl	80006fc <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325e:	f7fd fa4d 	bl	80006fc <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1e7      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ef      	beq.n	800325e <HAL_RCC_OscConfig+0x22e>
 800327e:	e020      	b.n	80032c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fd fa34 	bl	80006fc <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003296:	e00d      	b.n	80032b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fa30 	bl	80006fc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d906      	bls.n	80032b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1ca      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b4:	4b8c      	ldr	r3, [pc, #560]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ea      	bne.n	8003298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80a6 	beq.w	800341c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d4:	4b84      	ldr	r3, [pc, #528]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2b4>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x2b6>
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b7f      	ldr	r3, [pc, #508]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	4a7e      	ldr	r2, [pc, #504]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f6:	4b7c      	ldr	r3, [pc, #496]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003302:	2301      	movs	r3, #1
 8003304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003306:	4b79      	ldr	r3, [pc, #484]	@ (80034ec <HAL_RCC_OscConfig+0x4bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003312:	4b76      	ldr	r3, [pc, #472]	@ (80034ec <HAL_RCC_OscConfig+0x4bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	@ (80034ec <HAL_RCC_OscConfig+0x4bc>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fd f9ed 	bl	80006fc <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fd f9e9 	bl	80006fc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e183      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003338:	4b6c      	ldr	r3, [pc, #432]	@ (80034ec <HAL_RCC_OscConfig+0x4bc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d108      	bne.n	800335e <HAL_RCC_OscConfig+0x32e>
 800334c:	4b66      	ldr	r3, [pc, #408]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	4a65      	ldr	r2, [pc, #404]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335c:	e024      	b.n	80033a8 <HAL_RCC_OscConfig+0x378>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d110      	bne.n	8003388 <HAL_RCC_OscConfig+0x358>
 8003366:	4b60      	ldr	r3, [pc, #384]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336c:	4a5e      	ldr	r2, [pc, #376]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003376:	4b5c      	ldr	r3, [pc, #368]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003386:	e00f      	b.n	80033a8 <HAL_RCC_OscConfig+0x378>
 8003388:	4b57      	ldr	r3, [pc, #348]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	4a56      	ldr	r2, [pc, #344]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003398:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	4a52      	ldr	r2, [pc, #328]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fd f9a4 	bl	80006fc <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fd f9a0 	bl	80006fc <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e138      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ce:	4b46      	ldr	r3, [pc, #280]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ed      	beq.n	80033b8 <HAL_RCC_OscConfig+0x388>
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fd f98d 	bl	80006fc <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fd f989 	bl	80006fc <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e121      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fc:	4b3a      	ldr	r3, [pc, #232]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ed      	bne.n	80033e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800340a:	7ffb      	ldrb	r3, [r7, #31]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b35      	ldr	r3, [pc, #212]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	4a34      	ldr	r2, [pc, #208]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d03c      	beq.n	80034a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01c      	beq.n	800346a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003436:	4a2c      	ldr	r2, [pc, #176]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fd f95c 	bl	80006fc <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003448:	f7fd f958 	bl	80006fc <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0f2      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345a:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800345c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ef      	beq.n	8003448 <HAL_RCC_OscConfig+0x418>
 8003468:	e01b      	b.n	80034a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800346a:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 800346c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fd f93f 	bl	80006fc <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003482:	f7fd f93b 	bl	80006fc <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0d5      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003494:	4b14      	ldr	r3, [pc, #80]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ef      	bne.n	8003482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80c9 	beq.w	800363e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ac:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	f000 8083 	beq.w	80035c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d15e      	bne.n	8003580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a08      	ldr	r2, [pc, #32]	@ (80034e8 <HAL_RCC_OscConfig+0x4b8>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fd f915 	bl	80006fc <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e00c      	b.n	80034f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd f911 	bl	80006fc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d905      	bls.n	80034f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0ab      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	4b55      	ldr	r3, [pc, #340]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ec      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fc:	4b52      	ldr	r3, [pc, #328]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4b52      	ldr	r3, [pc, #328]	@ (800364c <HAL_RCC_OscConfig+0x61c>)
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6a11      	ldr	r1, [r2, #32]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800350c:	3a01      	subs	r2, #1
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003516:	0212      	lsls	r2, r2, #8
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0552      	lsls	r2, r2, #21
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0652      	lsls	r2, r2, #25
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003536:	06d2      	lsls	r2, r2, #27
 8003538:	430a      	orrs	r2, r1
 800353a:	4943      	ldr	r1, [pc, #268]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 800353c:	4313      	orrs	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b41      	ldr	r3, [pc, #260]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a40      	ldr	r2, [pc, #256]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800354c:	4b3e      	ldr	r3, [pc, #248]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a3d      	ldr	r2, [pc, #244]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fd f8d0 	bl	80006fc <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fd f8cc 	bl	80006fc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e066      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x530>
 800357e:	e05e      	b.n	800363e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b31      	ldr	r3, [pc, #196]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a30      	ldr	r2, [pc, #192]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 8003586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd f8b6 	bl	80006fc <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd f8b2 	bl	80006fc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e04c      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a6:	4b28      	ldr	r3, [pc, #160]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035b2:	4b25      	ldr	r3, [pc, #148]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4924      	ldr	r1, [pc, #144]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 80035b8:	4b25      	ldr	r3, [pc, #148]	@ (8003650 <HAL_RCC_OscConfig+0x620>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	60cb      	str	r3, [r1, #12]
 80035be:	e03e      	b.n	800363e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e039      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003648 <HAL_RCC_OscConfig+0x618>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d12c      	bne.n	800363a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	3b01      	subs	r3, #1
 80035ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d123      	bne.n	800363a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d11b      	bne.n	800363a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d113      	bne.n	800363a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	3b01      	subs	r3, #1
 8003620:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d109      	bne.n	800363a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	3b01      	subs	r3, #1
 8003634:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	019f800c 	.word	0x019f800c
 8003650:	feeefffc 	.word	0xfeeefffc

08003654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e11e      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b91      	ldr	r3, [pc, #580]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d910      	bls.n	800369c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b8e      	ldr	r3, [pc, #568]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 020f 	bic.w	r2, r3, #15
 8003682:	498c      	ldr	r1, [pc, #560]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b8a      	ldr	r3, [pc, #552]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e106      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d073      	beq.n	8003790 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d129      	bne.n	8003704 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b0:	4b81      	ldr	r3, [pc, #516]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0f4      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036c0:	f000 f966 	bl	8003990 <RCC_GetSysClockFreqFromPLLSource>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4a7c      	ldr	r2, [pc, #496]	@ (80038bc <HAL_RCC_ClockConfig+0x268>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d93f      	bls.n	800374e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036ce:	4b7a      	ldr	r3, [pc, #488]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d033      	beq.n	800374e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d12f      	bne.n	800374e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036ee:	4b72      	ldr	r3, [pc, #456]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f6:	4a70      	ldr	r2, [pc, #448]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e024      	b.n	800374e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d107      	bne.n	800371c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370c:	4b6a      	ldr	r3, [pc, #424]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0c6      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371c:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0be      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800372c:	f000 f8ce 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4a61      	ldr	r2, [pc, #388]	@ (80038bc <HAL_RCC_ClockConfig+0x268>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d909      	bls.n	800374e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800373a:	4b5f      	ldr	r3, [pc, #380]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003742:	4a5d      	ldr	r2, [pc, #372]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 8003744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003748:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b5a      	ldr	r3, [pc, #360]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4957      	ldr	r1, [pc, #348]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800375c:	4313      	orrs	r3, r2
 800375e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003760:	f7fc ffcc 	bl	80006fc <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	e00a      	b.n	800377e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fc ffc8 	bl	80006fc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e095      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 020c 	and.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	429a      	cmp	r2, r3
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a8:	4b43      	ldr	r3, [pc, #268]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a42      	ldr	r2, [pc, #264]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037c0:	4b3d      	ldr	r3, [pc, #244]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037c8:	4a3b      	ldr	r2, [pc, #236]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b39      	ldr	r3, [pc, #228]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4936      	ldr	r1, [pc, #216]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b80      	cmp	r3, #128	@ 0x80
 80037e8:	d105      	bne.n	80037f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037ea:	4b33      	ldr	r3, [pc, #204]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4a32      	ldr	r2, [pc, #200]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 80037f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037f6:	4b2f      	ldr	r3, [pc, #188]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d21d      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003804:	4b2b      	ldr	r3, [pc, #172]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 020f 	bic.w	r2, r3, #15
 800380c:	4929      	ldr	r1, [pc, #164]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003814:	f7fc ff72 	bl	80006fc <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fc ff6e 	bl	80006fc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e03b      	b.n	80038aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b20      	ldr	r3, [pc, #128]	@ (80038b4 <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d1ed      	bne.n	800381c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4917      	ldr	r1, [pc, #92]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	490f      	ldr	r1, [pc, #60]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800387e:	f000 f825 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <HAL_RCC_ClockConfig+0x264>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490c      	ldr	r1, [pc, #48]	@ (80038c0 <HAL_RCC_ClockConfig+0x26c>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fede 	bl	8000664 <HAL_InitTick>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40022000 	.word	0x40022000
 80038b8:	40021000 	.word	0x40021000
 80038bc:	04c4b400 	.word	0x04c4b400
 80038c0:	08007e98 	.word	0x08007e98
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000004 	.word	0x20000004

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d102      	bne.n	80038e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038de:	4b2a      	ldr	r3, [pc, #168]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e047      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038e4:	4b27      	ldr	r3, [pc, #156]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d102      	bne.n	80038f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038f0:	4b26      	ldr	r3, [pc, #152]	@ (800398c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	e03e      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038f6:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d136      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003902:	4b20      	ldr	r3, [pc, #128]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800390c:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3301      	adds	r3, #1
 8003918:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d10c      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003920:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	4a16      	ldr	r2, [pc, #88]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392a:	68d2      	ldr	r2, [r2, #12]
 800392c:	0a12      	lsrs	r2, r2, #8
 800392e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	617b      	str	r3, [r7, #20]
      break;
 8003938:	e00c      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800393a:	4a13      	ldr	r2, [pc, #76]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	4a10      	ldr	r2, [pc, #64]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	0a12      	lsrs	r2, r2, #8
 8003948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
      break;
 8003952:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0e5b      	lsrs	r3, r3, #25
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e001      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003974:	693b      	ldr	r3, [r7, #16]
}
 8003976:	4618      	mov	r0, r3
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003996:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d10c      	bne.n	80039ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b4:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039be:	68d2      	ldr	r2, [r2, #12]
 80039c0:	0a12      	lsrs	r2, r2, #8
 80039c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	617b      	str	r3, [r7, #20]
    break;
 80039cc:	e00c      	b.n	80039e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d8:	68d2      	ldr	r2, [r2, #12]
 80039da:	0a12      	lsrs	r2, r2, #8
 80039dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    break;
 80039e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0e5b      	lsrs	r3, r3, #25
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	3301      	adds	r3, #1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a02:	687b      	ldr	r3, [r7, #4]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40021000 	.word	0x40021000
 8003a14:	007a1200 	.word	0x007a1200
 8003a18:	00f42400 	.word	0x00f42400

08003a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a28:	2300      	movs	r3, #0
 8003a2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8098 	beq.w	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b43      	ldr	r3, [pc, #268]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	4b40      	ldr	r3, [pc, #256]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a56:	4b3d      	ldr	r3, [pc, #244]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a62:	2301      	movs	r3, #1
 8003a64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a66:	4b3a      	ldr	r3, [pc, #232]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a39      	ldr	r2, [pc, #228]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a72:	f7fc fe43 	bl	80006fc <HAL_GetTick>
 8003a76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a78:	e009      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fc fe3f 	bl	80006fc <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d902      	bls.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a8c:	e005      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8e:	4b30      	ldr	r3, [pc, #192]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ef      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d159      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01e      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d019      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003abc:	4b23      	ldr	r3, [pc, #140]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac8:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	4a1f      	ldr	r2, [pc, #124]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	4a1b      	ldr	r2, [pc, #108]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae8:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fc fdff 	bl	80006fc <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b00:	e00b      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fc fdfb 	bl	80006fc <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d902      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	74fb      	strb	r3, [r7, #19]
            break;
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ec      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	4903      	ldr	r1, [pc, #12]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	74bb      	strb	r3, [r7, #18]
 8003b4a:	e005      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b58:	7c7b      	ldrb	r3, [r7, #17]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5e:	4ba6      	ldr	r3, [pc, #664]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4aa5      	ldr	r2, [pc, #660]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b76:	4ba0      	ldr	r3, [pc, #640]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7c:	f023 0203 	bic.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	499c      	ldr	r1, [pc, #624]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b98:	4b97      	ldr	r3, [pc, #604]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f023 020c 	bic.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	4994      	ldr	r1, [pc, #592]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bba:	4b8f      	ldr	r3, [pc, #572]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	498b      	ldr	r1, [pc, #556]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bdc:	4b86      	ldr	r3, [pc, #536]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	4983      	ldr	r1, [pc, #524]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	497a      	ldr	r1, [pc, #488]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c20:	4b75      	ldr	r3, [pc, #468]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	4972      	ldr	r1, [pc, #456]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c42:	4b6d      	ldr	r3, [pc, #436]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4969      	ldr	r1, [pc, #420]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c64:	4b64      	ldr	r3, [pc, #400]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4961      	ldr	r1, [pc, #388]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c86:	4b5c      	ldr	r3, [pc, #368]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	4958      	ldr	r1, [pc, #352]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca8:	4b53      	ldr	r3, [pc, #332]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	4950      	ldr	r1, [pc, #320]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cd2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce0:	4b45      	ldr	r3, [pc, #276]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	4942      	ldr	r1, [pc, #264]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b3d      	ldr	r3, [pc, #244]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a3c      	ldr	r2, [pc, #240]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d18:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	4934      	ldr	r1, [pc, #208]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d36:	d105      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d38:	4b2f      	ldr	r3, [pc, #188]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d015      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d50:	4b29      	ldr	r3, [pc, #164]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5e:	4926      	ldr	r1, [pc, #152]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d70:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a20      	ldr	r2, [pc, #128]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d015      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d96:	4918      	ldr	r1, [pc, #96]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da6:	d105      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da8:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	490a      	ldr	r1, [pc, #40]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dde:	d105      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000

08003dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e0c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003e10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e32:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003e36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4013      	ands	r3, r2
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b0a7      	sub	sp, #156	@ 0x9c
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	78db      	ldrb	r3, [r3, #3]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d81f      	bhi.n	8003f0e <USB_ActivateEndpoint+0x72>
 8003ece:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed4 <USB_ActivateEndpoint+0x38>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f17 	.word	0x08003f17
 8003ee0:	08003ef3 	.word	0x08003ef3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ee4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003ef0:	e012      	b.n	8003f18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ef2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003ef6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003efa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003efe:	e00b      	b.n	8003f18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f00:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003f0c:	e004      	b.n	8003f18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8003f14:	e000      	b.n	8003f18 <USB_ActivateEndpoint+0x7c>
      break;
 8003f16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	b21b      	sxth	r3, r3
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	b21b      	sxth	r3, r3
 8003f5e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	7b1b      	ldrb	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 8180 	bne.w	800428e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8084 	beq.w	80040a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	4413      	add	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	00da      	lsls	r2, r3, #3
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	88db      	ldrh	r3, [r3, #6]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	827b      	strh	r3, [r7, #18]
 8003fda:	8a7b      	ldrh	r3, [r7, #18]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <USB_ActivateEndpoint+0x180>
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	823b      	strh	r3, [r7, #16]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	441a      	add	r2, r3
 8004006:	8a3b      	ldrh	r3, [r7, #16]
 8004008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800400c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004014:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004018:	b29b      	uxth	r3, r3
 800401a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	78db      	ldrb	r3, [r3, #3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d020      	beq.n	8004066 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800403a:	81bb      	strh	r3, [r7, #12]
 800403c:	89bb      	ldrh	r3, [r7, #12]
 800403e:	f083 0320 	eor.w	r3, r3, #32
 8004042:	81bb      	strh	r3, [r7, #12]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	89bb      	ldrh	r3, [r7, #12]
 8004050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800405c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004060:	b29b      	uxth	r3, r3
 8004062:	8013      	strh	r3, [r2, #0]
 8004064:	e3f9      	b.n	800485a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407c:	81fb      	strh	r3, [r7, #14]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800408e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800409a:	b29b      	uxth	r3, r3
 800409c:	8013      	strh	r3, [r2, #0]
 800409e:	e3dc      	b.n	800485a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	4413      	add	r3, r2
 80040b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	00da      	lsls	r2, r3, #3
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	4413      	add	r3, r2
 80040be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	88db      	ldrh	r3, [r3, #6]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	4413      	add	r3, r2
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	00da      	lsls	r2, r3, #3
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	4413      	add	r3, r2
 80040f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004102:	b29a      	uxth	r2, r3
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <USB_ActivateEndpoint+0x28a>
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411e:	b29a      	uxth	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e041      	b.n	80041aa <USB_ActivateEndpoint+0x30e>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b3e      	cmp	r3, #62	@ 0x3e
 800412c:	d81c      	bhi.n	8004168 <USB_ActivateEndpoint+0x2cc>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <USB_ActivateEndpoint+0x2b2>
 8004144:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004148:	3301      	adds	r3, #1
 800414a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29a      	uxth	r2, r3
 8004154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004158:	b29b      	uxth	r3, r3
 800415a:	029b      	lsls	r3, r3, #10
 800415c:	b29b      	uxth	r3, r3
 800415e:	4313      	orrs	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e020      	b.n	80041aa <USB_ActivateEndpoint+0x30e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <USB_ActivateEndpoint+0x2ec>
 800417e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004182:	3b01      	subs	r3, #1
 8004184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29a      	uxth	r2, r3
 800418e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004192:	b29b      	uxth	r3, r3
 8004194:	029b      	lsls	r3, r3, #10
 8004196:	b29b      	uxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80041b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01b      	beq.n	80041fa <USB_ActivateEndpoint+0x35e>
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d8:	843b      	strh	r3, [r7, #32]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	8c3b      	ldrh	r3, [r7, #32]
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d124      	bne.n	800424c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004218:	83bb      	strh	r3, [r7, #28]
 800421a:	8bbb      	ldrh	r3, [r7, #28]
 800421c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004220:	83bb      	strh	r3, [r7, #28]
 8004222:	8bbb      	ldrh	r3, [r7, #28]
 8004224:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004228:	83bb      	strh	r3, [r7, #28]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8bbb      	ldrh	r3, [r7, #28]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
 800424a:	e306      	b.n	800485a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	83fb      	strh	r3, [r7, #30]
 8004264:	8bfb      	ldrh	r3, [r7, #30]
 8004266:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800426a:	83fb      	strh	r3, [r7, #30]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	441a      	add	r2, r3
 8004276:	8bfb      	ldrh	r3, [r7, #30]
 8004278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800427c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004288:	b29b      	uxth	r3, r3
 800428a:	8013      	strh	r3, [r2, #0]
 800428c:	e2e5      	b.n	800485a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	78db      	ldrb	r3, [r3, #3]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d11e      	bne.n	80042d4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ac:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80042ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
 80042d2:	e01d      	b.n	8004310 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80042e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ea:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800431a:	b29b      	uxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004320:	4413      	add	r3, r2
 8004322:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	00da      	lsls	r2, r3, #3
 800432a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800432c:	4413      	add	r3, r2
 800432e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004332:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	891b      	ldrh	r3, [r3, #8]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	677b      	str	r3, [r7, #116]	@ 0x74
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004354:	4413      	add	r3, r2
 8004356:	677b      	str	r3, [r7, #116]	@ 0x74
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004360:	4413      	add	r3, r2
 8004362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004366:	673b      	str	r3, [r7, #112]	@ 0x70
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	895b      	ldrh	r3, [r3, #10]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004376:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 81af 	bne.w	80046e0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8004392:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8004396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01d      	beq.n	80043da <USB_ActivateEndpoint+0x53e>
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80043ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01d      	beq.n	8004432 <USB_ActivateEndpoint+0x596>
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800441e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800442a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d16b      	bne.n	8004512 <USB_ActivateEndpoint+0x676>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800444a:	4413      	add	r3, r2
 800444c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	00da      	lsls	r2, r3, #3
 8004454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004456:	4413      	add	r3, r2
 8004458:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800445c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004468:	b29a      	uxth	r2, r3
 800446a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <USB_ActivateEndpoint+0x5f0>
 8004476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004484:	b29a      	uxth	r2, r3
 8004486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e05d      	b.n	8004548 <USB_ActivateEndpoint+0x6ac>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b3e      	cmp	r3, #62	@ 0x3e
 8004492:	d81c      	bhi.n	80044ce <USB_ActivateEndpoint+0x632>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <USB_ActivateEndpoint+0x618>
 80044aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ae:	3301      	adds	r3, #1
 80044b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044be:	b29b      	uxth	r3, r3
 80044c0:	029b      	lsls	r3, r3, #10
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e03c      	b.n	8004548 <USB_ActivateEndpoint+0x6ac>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <USB_ActivateEndpoint+0x652>
 80044e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044e8:	3b01      	subs	r3, #1
 80044ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450a:	b29a      	uxth	r2, r3
 800450c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	e01a      	b.n	8004548 <USB_ActivateEndpoint+0x6ac>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	785b      	ldrb	r3, [r3, #1]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d116      	bne.n	8004548 <USB_ActivateEndpoint+0x6ac>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	657b      	str	r3, [r7, #84]	@ 0x54
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004524:	b29b      	uxth	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452a:	4413      	add	r3, r2
 800452c:	657b      	str	r3, [r7, #84]	@ 0x54
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00da      	lsls	r2, r3, #3
 8004534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004536:	4413      	add	r3, r2
 8004538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800453c:	653b      	str	r3, [r7, #80]	@ 0x50
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	b29a      	uxth	r2, r3
 8004544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	647b      	str	r3, [r7, #68]	@ 0x44
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d16b      	bne.n	800462c <USB_ActivateEndpoint+0x790>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	4413      	add	r3, r2
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00da      	lsls	r2, r3, #3
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	4413      	add	r3, r2
 8004572:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004582:	b29a      	uxth	r2, r3
 8004584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <USB_ActivateEndpoint+0x70a>
 8004590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	e05b      	b.n	800465e <USB_ActivateEndpoint+0x7c2>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80045ac:	d81c      	bhi.n	80045e8 <USB_ActivateEndpoint+0x74c>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <USB_ActivateEndpoint+0x732>
 80045c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045c8:	3301      	adds	r3, #1
 80045ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045d8:	b29b      	uxth	r3, r3
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	e03a      	b.n	800465e <USB_ActivateEndpoint+0x7c2>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <USB_ActivateEndpoint+0x76c>
 80045fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004602:	3b01      	subs	r3, #1
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29a      	uxth	r2, r3
 800460e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004612:	b29b      	uxth	r3, r3
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	b29b      	uxth	r3, r3
 8004618:	4313      	orrs	r3, r2
 800461a:	b29b      	uxth	r3, r3
 800461c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004624:	b29a      	uxth	r2, r3
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e018      	b.n	800465e <USB_ActivateEndpoint+0x7c2>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d114      	bne.n	800465e <USB_ActivateEndpoint+0x7c2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800463a:	b29b      	uxth	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004640:	4413      	add	r3, r2
 8004642:	647b      	str	r3, [r7, #68]	@ 0x44
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	00da      	lsls	r2, r3, #3
 800464a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800464c:	4413      	add	r3, r2
 800464e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004652:	643b      	str	r3, [r7, #64]	@ 0x40
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	b29a      	uxth	r2, r3
 800465a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800465c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004674:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004676:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004678:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800467c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800467e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004680:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004684:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800469a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800469e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]
 80046de:	e0bc      	b.n	800485a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80046f0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80046f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01d      	beq.n	8004738 <USB_ActivateEndpoint+0x89c>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004712:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004748:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01d      	beq.n	8004790 <USB_ActivateEndpoint+0x8f4>
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004788:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	78db      	ldrb	r3, [r3, #3]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d024      	beq.n	80047e2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80047b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80047b6:	f083 0320 	eor.w	r3, r3, #32
 80047ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
 80047e0:	e01d      	b.n	800481e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004834:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800485a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800485e:	4618      	mov	r0, r3
 8004860:	379c      	adds	r7, #156	@ 0x9c
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800486c:	b480      	push	{r7}
 800486e:	b08d      	sub	sp, #52	@ 0x34
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	7b1b      	ldrb	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 808e 	bne.w	800499c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d044      	beq.n	8004912 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	81bb      	strh	r3, [r7, #12]
 8004896:	89bb      	ldrh	r3, [r7, #12]
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <USB_DeactivateEndpoint+0x6c>
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b6:	817b      	strh	r3, [r7, #10]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ee:	813b      	strh	r3, [r7, #8]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	893b      	ldrh	r3, [r7, #8]
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
 8004910:	e192      	b.n	8004c38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	827b      	strh	r3, [r7, #18]
 8004920:	8a7b      	ldrh	r3, [r7, #18]
 8004922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01b      	beq.n	8004962 <USB_DeactivateEndpoint+0xf6>
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004940:	823b      	strh	r3, [r7, #16]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8a3b      	ldrh	r3, [r7, #16]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800495a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004978:	81fb      	strh	r3, [r7, #14]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	89fb      	ldrh	r3, [r7, #14]
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800498e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
 800499a:	e14d      	b.n	8004c38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 80a5 	bne.w	8004af0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	843b      	strh	r3, [r7, #32]
 80049b4:	8c3b      	ldrh	r3, [r7, #32]
 80049b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01b      	beq.n	80049f6 <USB_DeactivateEndpoint+0x18a>
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d4:	83fb      	strh	r3, [r7, #30]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8bfb      	ldrh	r3, [r7, #30]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	83bb      	strh	r3, [r7, #28]
 8004a04:	8bbb      	ldrh	r3, [r7, #28]
 8004a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01b      	beq.n	8004a46 <USB_DeactivateEndpoint+0x1da>
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a24:	837b      	strh	r3, [r7, #26]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8b7b      	ldrh	r3, [r7, #26]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5c:	833b      	strh	r3, [r7, #24]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8b3b      	ldrh	r3, [r7, #24]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a94:	82fb      	strh	r3, [r7, #22]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8afb      	ldrh	r3, [r7, #22]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004acc:	82bb      	strh	r3, [r7, #20]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8abb      	ldrh	r3, [r7, #20]
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
 8004aee:	e0a3      	b.n	8004c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004afe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <USB_DeactivateEndpoint+0x2d4>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004b4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <USB_DeactivateEndpoint+0x324>
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3734      	adds	r7, #52	@ 0x34
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b0ac      	sub	sp, #176	@ 0xb0
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 84ca 	bne.w	80055ee <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d904      	bls.n	8004c70 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c6e:	e003      	b.n	8004c78 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	7b1b      	ldrb	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d122      	bne.n	8004cc6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6959      	ldr	r1, [r3, #20]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	88da      	ldrh	r2, [r3, #6]
 8004c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 febd 	bl	8005a0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	00da      	lsls	r2, r3, #3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	f000 bc6f 	b.w	80055a4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	78db      	ldrb	r3, [r3, #3]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	f040 831e 	bne.w	800530c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6a1a      	ldr	r2, [r3, #32]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	f240 82cf 	bls.w	800527c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6a1a      	ldr	r2, [r3, #32]
 8004d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 814f 	beq.w	8004fde <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d16b      	bne.n	8004e24 <USB_EPStartXfer+0x1de>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	4413      	add	r3, r2
 8004d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	00da      	lsls	r2, r3, #3
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <USB_EPStartXfer+0x158>
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e05b      	b.n	8004e56 <USB_EPStartXfer+0x210>
 8004d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004da2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004da4:	d81c      	bhi.n	8004de0 <USB_EPStartXfer+0x19a>
 8004da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <USB_EPStartXfer+0x180>
 8004dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	029b      	lsls	r3, r3, #10
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e03a      	b.n	8004e56 <USB_EPStartXfer+0x210>
 8004de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <USB_EPStartXfer+0x1ba>
 8004df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	029b      	lsls	r3, r3, #10
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	4313      	orrs	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e018      	b.n	8004e56 <USB_EPStartXfer+0x210>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d114      	bne.n	8004e56 <USB_EPStartXfer+0x210>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	4413      	add	r3, r2
 8004e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	00da      	lsls	r2, r3, #3
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	895b      	ldrh	r3, [r3, #10]
 8004e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6959      	ldr	r1, [r3, #20]
 8004e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fdce 	bl	8005a0e <USB_WritePMA>
            ep->xfer_buff += len;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e7a:	441a      	add	r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d907      	bls.n	8004e9c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	621a      	str	r2, [r3, #32]
 8004e9a:	e006      	b.n	8004eaa <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d16b      	bne.n	8004f8a <USB_EPStartXfer+0x344>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	00da      	lsls	r2, r3, #3
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <USB_EPStartXfer+0x2be>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e05d      	b.n	8004fc0 <USB_EPStartXfer+0x37a>
 8004f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f08:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f0a:	d81c      	bhi.n	8004f46 <USB_EPStartXfer+0x300>
 8004f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <USB_EPStartXfer+0x2e6>
 8004f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e03c      	b.n	8004fc0 <USB_EPStartXfer+0x37a>
 8004f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <USB_EPStartXfer+0x320>
 8004f5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f60:	3b01      	subs	r3, #1
 8004f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	4313      	orrs	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	e01a      	b.n	8004fc0 <USB_EPStartXfer+0x37a>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d116      	bne.n	8004fc0 <USB_EPStartXfer+0x37a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	00da      	lsls	r2, r3, #3
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	891b      	ldrh	r3, [r3, #8]
 8004fc4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6959      	ldr	r1, [r3, #20]
 8004fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fd19 	bl	8005a0e <USB_WritePMA>
 8004fdc:	e2e2      	b.n	80055a4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d16b      	bne.n	80050be <USB_EPStartXfer+0x478>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff6:	4413      	add	r3, r2
 8004ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	00da      	lsls	r2, r3, #3
 8005000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005002:	4413      	add	r3, r2
 8005004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005008:	647b      	str	r3, [r7, #68]	@ 0x44
 800500a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005014:	b29a      	uxth	r2, r3
 8005016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <USB_EPStartXfer+0x3f2>
 8005022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005030:	b29a      	uxth	r2, r3
 8005032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	e05d      	b.n	80050f4 <USB_EPStartXfer+0x4ae>
 8005038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800503c:	2b3e      	cmp	r3, #62	@ 0x3e
 800503e:	d81c      	bhi.n	800507a <USB_EPStartXfer+0x434>
 8005040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800504a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <USB_EPStartXfer+0x41a>
 8005056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800505a:	3301      	adds	r3, #1
 800505c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800506a:	b29b      	uxth	r3, r3
 800506c:	029b      	lsls	r3, r3, #10
 800506e:	b29b      	uxth	r3, r3
 8005070:	4313      	orrs	r3, r2
 8005072:	b29a      	uxth	r2, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e03c      	b.n	80050f4 <USB_EPStartXfer+0x4ae>
 800507a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <USB_EPStartXfer+0x454>
 8005090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005094:	3b01      	subs	r3, #1
 8005096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800509a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4313      	orrs	r3, r2
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	e01a      	b.n	80050f4 <USB_EPStartXfer+0x4ae>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d116      	bne.n	80050f4 <USB_EPStartXfer+0x4ae>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d6:	4413      	add	r3, r2
 80050d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	00da      	lsls	r2, r3, #3
 80050e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	891b      	ldrh	r3, [r3, #8]
 80050f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6959      	ldr	r1, [r3, #20]
 8005100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005104:	b29b      	uxth	r3, r3
 8005106:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fc7f 	bl	8005a0e <USB_WritePMA>
            ep->xfer_buff += len;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005118:	441a      	add	r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d907      	bls.n	800513a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	621a      	str	r2, [r3, #32]
 8005138:	e006      	b.n	8005148 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2200      	movs	r2, #0
 8005146:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	643b      	str	r3, [r7, #64]	@ 0x40
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d16b      	bne.n	800522c <USB_EPStartXfer+0x5e6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	4413      	add	r3, r2
 8005166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	00da      	lsls	r2, r3, #3
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	4413      	add	r3, r2
 8005172:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005176:	637b      	str	r3, [r7, #52]	@ 0x34
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005182:	b29a      	uxth	r2, r3
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <USB_EPStartXfer+0x560>
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519e:	b29a      	uxth	r2, r3
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	e05b      	b.n	800525e <USB_EPStartXfer+0x618>
 80051a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80051ac:	d81c      	bhi.n	80051e8 <USB_EPStartXfer+0x5a2>
 80051ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <USB_EPStartXfer+0x588>
 80051c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051c8:	3301      	adds	r3, #1
 80051ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051d8:	b29b      	uxth	r3, r3
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4313      	orrs	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e03a      	b.n	800525e <USB_EPStartXfer+0x618>
 80051e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <USB_EPStartXfer+0x5c2>
 80051fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005202:	3b01      	subs	r3, #1
 8005204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29a      	uxth	r2, r3
 800520e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005212:	b29b      	uxth	r3, r3
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	b29b      	uxth	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005224:	b29a      	uxth	r2, r3
 8005226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e018      	b.n	800525e <USB_EPStartXfer+0x618>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d114      	bne.n	800525e <USB_EPStartXfer+0x618>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005240:	4413      	add	r3, r2
 8005242:	643b      	str	r3, [r7, #64]	@ 0x40
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	00da      	lsls	r2, r3, #3
 800524a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800524c:	4413      	add	r3, r2
 800524e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005258:	b29a      	uxth	r2, r3
 800525a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	895b      	ldrh	r3, [r3, #10]
 8005262:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6959      	ldr	r1, [r3, #20]
 800526a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526e:	b29b      	uxth	r3, r3
 8005270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fbca 	bl	8005a0e <USB_WritePMA>
 800527a:	e193      	b.n	80055a4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052d0:	4413      	add	r3, r2
 80052d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	00da      	lsls	r2, r3, #3
 80052da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	891b      	ldrh	r3, [r3, #8]
 80052f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6959      	ldr	r1, [r3, #20]
 80052fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fb82 	bl	8005a0e <USB_WritePMA>
 800530a:	e14b      	b.n	80055a4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005314:	1ad2      	subs	r2, r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 809a 	beq.w	8005466 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	673b      	str	r3, [r7, #112]	@ 0x70
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d16b      	bne.n	8005416 <USB_EPStartXfer+0x7d0>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800534e:	4413      	add	r3, r2
 8005350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00da      	lsls	r2, r3, #3
 8005358:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800535a:	4413      	add	r3, r2
 800535c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005360:	667b      	str	r3, [r7, #100]	@ 0x64
 8005362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536c:	b29a      	uxth	r2, r3
 800536e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <USB_EPStartXfer+0x74a>
 800537a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005388:	b29a      	uxth	r2, r3
 800538a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e05b      	b.n	8005448 <USB_EPStartXfer+0x802>
 8005390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005394:	2b3e      	cmp	r3, #62	@ 0x3e
 8005396:	d81c      	bhi.n	80053d2 <USB_EPStartXfer+0x78c>
 8005398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d004      	beq.n	80053b8 <USB_EPStartXfer+0x772>
 80053ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053b2:	3301      	adds	r3, #1
 80053b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	029b      	lsls	r3, r3, #10
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	4313      	orrs	r3, r2
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	e03a      	b.n	8005448 <USB_EPStartXfer+0x802>
 80053d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <USB_EPStartXfer+0x7ac>
 80053e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053ec:	3b01      	subs	r3, #1
 80053ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	029b      	lsls	r3, r3, #10
 8005400:	b29b      	uxth	r3, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	b29b      	uxth	r3, r3
 8005406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540e:	b29a      	uxth	r2, r3
 8005410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	e018      	b.n	8005448 <USB_EPStartXfer+0x802>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d114      	bne.n	8005448 <USB_EPStartXfer+0x802>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005424:	b29b      	uxth	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800542a:	4413      	add	r3, r2
 800542c:	673b      	str	r3, [r7, #112]	@ 0x70
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	00da      	lsls	r2, r3, #3
 8005434:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005436:	4413      	add	r3, r2
 8005438:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800543c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800543e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005442:	b29a      	uxth	r2, r3
 8005444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005446:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	895b      	ldrh	r3, [r3, #10]
 800544c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6959      	ldr	r1, [r3, #20]
 8005454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005458:	b29b      	uxth	r3, r3
 800545a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fad5 	bl	8005a0e <USB_WritePMA>
 8005464:	e09e      	b.n	80055a4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d16b      	bne.n	8005546 <USB_EPStartXfer+0x900>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800547e:	4413      	add	r3, r2
 8005480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	00da      	lsls	r2, r3, #3
 8005488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800548a:	4413      	add	r3, r2
 800548c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005490:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549c:	b29a      	uxth	r2, r3
 800549e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <USB_EPStartXfer+0x87a>
 80054aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e063      	b.n	8005588 <USB_EPStartXfer+0x942>
 80054c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80054c6:	d81c      	bhi.n	8005502 <USB_EPStartXfer+0x8bc>
 80054c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <USB_EPStartXfer+0x8a2>
 80054de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054e2:	3301      	adds	r3, #1
 80054e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4313      	orrs	r3, r2
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	e042      	b.n	8005588 <USB_EPStartXfer+0x942>
 8005502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800550c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <USB_EPStartXfer+0x8dc>
 8005518:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800551c:	3b01      	subs	r3, #1
 800551e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29a      	uxth	r2, r3
 8005528:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800552c:	b29b      	uxth	r3, r3
 800552e:	029b      	lsls	r3, r3, #10
 8005530:	b29b      	uxth	r3, r3
 8005532:	4313      	orrs	r3, r2
 8005534:	b29b      	uxth	r3, r3
 8005536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553e:	b29a      	uxth	r2, r3
 8005540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	e020      	b.n	8005588 <USB_EPStartXfer+0x942>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d11c      	bne.n	8005588 <USB_EPStartXfer+0x942>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005562:	4413      	add	r3, r2
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	00da      	lsls	r2, r3, #3
 800556e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005572:	4413      	add	r3, r2
 8005574:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800557c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005580:	b29a      	uxth	r2, r3
 8005582:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005586:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	891b      	ldrh	r3, [r3, #8]
 800558c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6959      	ldr	r1, [r3, #20]
 8005594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005598:	b29b      	uxth	r3, r3
 800559a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fa35 	bl	8005a0e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ba:	817b      	strh	r3, [r7, #10]
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	f083 0310 	eor.w	r3, r3, #16
 80055c2:	817b      	strh	r3, [r7, #10]
 80055c4:	897b      	ldrh	r3, [r7, #10]
 80055c6:	f083 0320 	eor.w	r3, r3, #32
 80055ca:	817b      	strh	r3, [r7, #10]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	897b      	ldrh	r3, [r7, #10]
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]
 80055ec:	e0d5      	b.n	800579a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d156      	bne.n	80056a4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d122      	bne.n	8005644 <USB_EPStartXfer+0x9fe>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	78db      	ldrb	r3, [r3, #3]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11e      	bne.n	8005644 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005636:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800563a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
 8005642:	e01d      	b.n	8005680 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800566c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d907      	bls.n	800569c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	619a      	str	r2, [r3, #24]
 800569a:	e054      	b.n	8005746 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	619a      	str	r2, [r3, #24]
 80056a2:	e050      	b.n	8005746 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	78db      	ldrb	r3, [r3, #3]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d142      	bne.n	8005732 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d048      	beq.n	8005746 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80056c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <USB_EPStartXfer+0xa96>
 80056d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80056e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d12e      	bne.n	8005746 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d128      	bne.n	8005746 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005728:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]
 8005730:	e009      	b.n	8005746 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	78db      	ldrb	r3, [r3, #3]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d103      	bne.n	8005742 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	619a      	str	r2, [r3, #24]
 8005740:	e001      	b.n	8005746 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e02a      	b.n	800579c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005760:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005764:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005768:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800576c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005770:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005774:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800578a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005796:	b29b      	uxth	r3, r3
 8005798:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	37b0      	adds	r7, #176	@ 0xb0
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d020      	beq.n	80057f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057cc:	81bb      	strh	r3, [r7, #12]
 80057ce:	89bb      	ldrh	r3, [r7, #12]
 80057d0:	f083 0310 	eor.w	r3, r3, #16
 80057d4:	81bb      	strh	r3, [r7, #12]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	89bb      	ldrh	r3, [r7, #12]
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]
 80057f6:	e01f      	b.n	8005838 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	81fb      	strh	r3, [r7, #14]
 8005810:	89fb      	ldrh	r3, [r7, #14]
 8005812:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005816:	81fb      	strh	r3, [r7, #14]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	89fb      	ldrh	r3, [r7, #14]
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d04c      	beq.n	80058f2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	823b      	strh	r3, [r7, #16]
 8005866:	8a3b      	ldrh	r3, [r7, #16]
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <USB_EPClearStall+0x62>
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	81fb      	strh	r3, [r7, #14]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	78db      	ldrb	r3, [r3, #3]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d06c      	beq.n	800598a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c6:	81bb      	strh	r3, [r7, #12]
 80058c8:	89bb      	ldrh	r3, [r7, #12]
 80058ca:	f083 0320 	eor.w	r3, r3, #32
 80058ce:	81bb      	strh	r3, [r7, #12]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	89bb      	ldrh	r3, [r7, #12]
 80058dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	8013      	strh	r3, [r2, #0]
 80058f0:	e04b      	b.n	800598a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	82fb      	strh	r3, [r7, #22]
 8005900:	8afb      	ldrh	r3, [r7, #22]
 8005902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01b      	beq.n	8005942 <USB_EPClearStall+0xfc>
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800591c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005920:	82bb      	strh	r3, [r7, #20]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	8abb      	ldrh	r3, [r7, #20]
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800593a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005958:	827b      	strh	r3, [r7, #18]
 800595a:	8a7b      	ldrh	r3, [r7, #18]
 800595c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005960:	827b      	strh	r3, [r7, #18]
 8005962:	8a7b      	ldrh	r3, [r7, #18]
 8005964:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005968:	827b      	strh	r3, [r7, #18]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	441a      	add	r2, r3
 8005974:	8a7b      	ldrh	r3, [r7, #18]
 8005976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800597e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005986:	b29b      	uxth	r3, r3
 8005988:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2280      	movs	r2, #128	@ 0x80
 80059ae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a00:	68fb      	ldr	r3, [r7, #12]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b08b      	sub	sp, #44	@ 0x2c
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	80fb      	strh	r3, [r7, #6]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a24:	88bb      	ldrh	r3, [r7, #4]
 8005a26:	3301      	adds	r3, #1
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a44:	e01b      	b.n	8005a7e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	b21a      	sxth	r2, r3
 8005a56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	b21b      	sxth	r3, r3
 8005a5e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	8a7a      	ldrh	r2, [r7, #18]
 8005a64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e0      	bne.n	8005a46 <USB_WritePMA+0x38>
  }
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	372c      	adds	r7, #44	@ 0x2c
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b08b      	sub	sp, #44	@ 0x2c
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	80fb      	strh	r3, [r7, #6]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005aa8:	88bb      	ldrh	r3, [r7, #4]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ac2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac8:	e018      	b.n	8005afc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	3b01      	subs	r3, #1
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e3      	bne.n	8005aca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	701a      	strb	r2, [r3, #0]
  }
}
 8005b1e:	bf00      	nop
 8005b20:	372c      	adds	r7, #44	@ 0x2c
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b36:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005b3a:	f002 f907 	bl	8007d4c <USBD_static_malloc>
 8005b3e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d105      	bne.n	8005b52 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e066      	b.n	8005c20 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	7c1b      	ldrb	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d119      	bne.n	8005b96 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b66:	2202      	movs	r2, #2
 8005b68:	2181      	movs	r1, #129	@ 0x81
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 ff95 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 ff8b 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8005b94:	e016      	b.n	8005bc4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b96:	2340      	movs	r3, #64	@ 0x40
 8005b98:	2202      	movs	r2, #2
 8005b9a:	2181      	movs	r1, #129	@ 0x81
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 ff7c 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ba8:	2340      	movs	r3, #64	@ 0x40
 8005baa:	2202      	movs	r2, #2
 8005bac:	2101      	movs	r1, #1
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 ff73 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	2182      	movs	r1, #130	@ 0x82
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 ff65 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	7c1b      	ldrb	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c04:	2101      	movs	r1, #1
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f002 f836 	bl	8007c78 <USBD_LL_PrepareReceive>
 8005c0c:	e007      	b.n	8005c1e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c14:	2340      	movs	r3, #64	@ 0x40
 8005c16:	2101      	movs	r1, #1
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 f82d 	bl	8007c78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c34:	2181      	movs	r1, #129	@ 0x81
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 ff55 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c42:	2101      	movs	r1, #1
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 ff4e 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c52:	2182      	movs	r1, #130	@ 0x82
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 ff46 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00e      	beq.n	8005c92 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005c84:	4618      	mov	r0, r3
 8005c86:	f002 f86f 	bl	8007d68 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0af      	b.n	8005e24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03f      	beq.n	8005d50 <USBD_CDC_Setup+0xb4>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 809f 	bne.w	8005e14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	88db      	ldrh	r3, [r3, #6]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02e      	beq.n	8005d3c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da16      	bge.n	8005d16 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005cf4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	88d2      	ldrh	r2, [r2, #6]
 8005cfa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	88db      	ldrh	r3, [r3, #6]
 8005d00:	2b07      	cmp	r3, #7
 8005d02:	bf28      	it	cs
 8005d04:	2307      	movcs	r3, #7
 8005d06:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	89fa      	ldrh	r2, [r7, #14]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 facd 	bl	80072ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005d14:	e085      	b.n	8005e22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	785a      	ldrb	r2, [r3, #1]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	88db      	ldrh	r3, [r3, #6]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d2c:	6939      	ldr	r1, [r7, #16]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	88db      	ldrh	r3, [r3, #6]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 fae6 	bl	8007306 <USBD_CtlPrepareRx>
      break;
 8005d3a:	e072      	b.n	8005e22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	7850      	ldrb	r0, [r2, #1]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4798      	blx	r3
      break;
 8005d4e:	e068      	b.n	8005e22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b0b      	cmp	r3, #11
 8005d56:	d852      	bhi.n	8005dfe <USBD_CDC_Setup+0x162>
 8005d58:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <USBD_CDC_Setup+0xc4>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d91 	.word	0x08005d91
 8005d64:	08005e0d 	.word	0x08005e0d
 8005d68:	08005dff 	.word	0x08005dff
 8005d6c:	08005dff 	.word	0x08005dff
 8005d70:	08005dff 	.word	0x08005dff
 8005d74:	08005dff 	.word	0x08005dff
 8005d78:	08005dff 	.word	0x08005dff
 8005d7c:	08005dff 	.word	0x08005dff
 8005d80:	08005dff 	.word	0x08005dff
 8005d84:	08005dff 	.word	0x08005dff
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005de5 	.word	0x08005de5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d107      	bne.n	8005dac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d9c:	f107 030a 	add.w	r3, r7, #10
 8005da0:	2202      	movs	r2, #2
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fa82 	bl	80072ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005daa:	e032      	b.n	8005e12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fa0c 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	75fb      	strb	r3, [r7, #23]
          break;
 8005db8:	e02b      	b.n	8005e12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d107      	bne.n	8005dd6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005dc6:	f107 030d 	add.w	r3, r7, #13
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fa6d 	bl	80072ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dd4:	e01d      	b.n	8005e12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 f9f7 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 8005dde:	2303      	movs	r3, #3
 8005de0:	75fb      	strb	r3, [r7, #23]
          break;
 8005de2:	e016      	b.n	8005e12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d00f      	beq.n	8005e10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 f9ea 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005dfc:	e008      	b.n	8005e10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f9e3 	bl	80071cc <USBD_CtlError>
          ret = USBD_FAIL;
 8005e06:	2303      	movs	r3, #3
 8005e08:	75fb      	strb	r3, [r7, #23]
          break;
 8005e0a:	e002      	b.n	8005e12 <USBD_CDC_Setup+0x176>
          break;
 8005e0c:	bf00      	nop
 8005e0e:	e008      	b.n	8005e22 <USBD_CDC_Setup+0x186>
          break;
 8005e10:	bf00      	nop
      }
      break;
 8005e12:	e006      	b.n	8005e22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f9d8 	bl	80071cc <USBD_CtlError>
      ret = USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e20:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005e3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e04f      	b.n	8005eee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	3318      	adds	r3, #24
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d029      	beq.n	8005ec0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	78f9      	ldrb	r1, [r7, #3]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	460b      	mov	r3, r1
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4403      	add	r3, r0
 8005e8c:	3320      	adds	r3, #32
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d110      	bne.n	8005ec0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	3318      	adds	r3, #24
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005eb2:	78f9      	ldrb	r1, [r7, #3]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 febc 	bl	8007c36 <USBD_LL_Transmit>
 8005ebe:	e015      	b.n	8005eec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e015      	b.n	8005f44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fecc 	bl	8007cba <USBD_LL_GetRxDataSize>
 8005f22:	4602      	mov	r2, r0
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e01a      	b.n	8005f9c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d014      	beq.n	8005f9a <USBD_CDC_EP0_RxReady+0x4e>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f76:	2bff      	cmp	r3, #255	@ 0xff
 8005f78:	d00f      	beq.n	8005f9a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8005f88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	22ff      	movs	r2, #255	@ 0xff
 8005f96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2243      	movs	r2, #67	@ 0x43
 8005fb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005fb2:	4b03      	ldr	r3, [pc, #12]	@ (8005fc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	20000094 	.word	0x20000094

08005fc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2243      	movs	r2, #67	@ 0x43
 8005fd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005fd2:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000050 	.word	0x20000050

08005fe4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2243      	movs	r2, #67	@ 0x43
 8005ff0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ff2:	4b03      	ldr	r3, [pc, #12]	@ (8006000 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	200000d8 	.word	0x200000d8

08006004 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	220a      	movs	r2, #10
 8006010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006012:	4b03      	ldr	r3, [pc, #12]	@ (8006020 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	2000000c 	.word	0x2000000c

08006024 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006034:	2303      	movs	r3, #3
 8006036:	e004      	b.n	8006042 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800604e:	b480      	push	{r7}
 8006050:	b087      	sub	sp, #28
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006060:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006068:	2303      	movs	r3, #3
 800606a:	e008      	b.n	800607e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800609a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e004      	b.n	80060b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	e01a      	b.n	8006114 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d114      	bne.n	8006112 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006106:	2181      	movs	r1, #129	@ 0x81
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 fd94 	bl	8007c36 <USBD_LL_Transmit>

    ret = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800612a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	e016      	b.n	8006168 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7c1b      	ldrb	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800614c:	2101      	movs	r1, #1
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fd92 	bl	8007c78 <USBD_LL_PrepareReceive>
 8006154:	e007      	b.n	8006166 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800615c:	2340      	movs	r3, #64	@ 0x40
 800615e:	2101      	movs	r1, #1
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 fd89 	bl	8007c78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	4613      	mov	r3, r2
 800617c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	e01f      	b.n	80061c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	79fa      	ldrb	r2, [r7, #7]
 80061ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f001 fbf1 	bl	80079a4 <USBD_LL_Init>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e016      	b.n	8006216 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	f107 020e 	add.w	r2, r7, #14
 8006208:	4610      	mov	r0, r2
 800620a:	4798      	blx	r3
 800620c:	4602      	mov	r2, r0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fc1c 	bl	8007a64 <USBD_LL_Start>
 800622c:	4603      	mov	r3, r0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	4611      	mov	r1, r2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	78fa      	ldrb	r2, [r7, #3]
 80062a4:	4611      	mov	r1, r2
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
  }

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 ff46 	bl	8007158 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d01a      	beq.n	8006326 <USBD_LL_SetupStage+0x72>
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d822      	bhi.n	800633a <USBD_LL_SetupStage+0x86>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <USBD_LL_SetupStage+0x4a>
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d00a      	beq.n	8006312 <USBD_LL_SetupStage+0x5e>
 80062fc:	e01d      	b.n	800633a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f9ee 	bl	80066e8 <USBD_StdDevReq>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]
      break;
 8006310:	e020      	b.n	8006354 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa52 	bl	80067c4 <USBD_StdItfReq>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e016      	b.n	8006354 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa91 	bl	8006856 <USBD_StdEPReq>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
      break;
 8006338:	e00c      	b.n	8006354 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006340:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006344:	b2db      	uxtb	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 fbeb 	bl	8007b24 <USBD_LL_StallEP>
 800634e:	4603      	mov	r3, r0
 8006350:	73fb      	strb	r3, [r7, #15]
      break;
 8006352:	bf00      	nop
  }

  return ret;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	460b      	mov	r3, r1
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d138      	bne.n	80063e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006378:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006380:	2b03      	cmp	r3, #3
 8006382:	d14a      	bne.n	800641a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d913      	bls.n	80063b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	1ad2      	subs	r2, r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	bf28      	it	cs
 80063aa:	4613      	movcs	r3, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 ffc5 	bl	8007340 <USBD_CtlContinueRx>
 80063b6:	e030      	b.n	800641a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d10b      	bne.n	80063dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 ffc0 	bl	8007362 <USBD_CtlSendStatus>
 80063e2:	e01a      	b.n	800641a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d114      	bne.n	800641a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	7afa      	ldrb	r2, [r7, #11]
 8006406:	4611      	mov	r1, r2
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	4798      	blx	r3
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	e000      	b.n	800641c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	460b      	mov	r3, r1
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d16b      	bne.n	8006510 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3314      	adds	r3, #20
 800643c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006444:	2b02      	cmp	r3, #2
 8006446:	d156      	bne.n	80064f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	429a      	cmp	r2, r3
 8006452:	d914      	bls.n	800647e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	1ad2      	subs	r2, r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	461a      	mov	r2, r3
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 ff3a 	bl	80072e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006470:	2300      	movs	r3, #0
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 fbfe 	bl	8007c78 <USBD_LL_PrepareReceive>
 800647c:	e03b      	b.n	80064f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	429a      	cmp	r2, r3
 8006488:	d11c      	bne.n	80064c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006492:	429a      	cmp	r2, r3
 8006494:	d316      	bcc.n	80064c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d20f      	bcs.n	80064c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064a4:	2200      	movs	r2, #0
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 ff1b 	bl	80072e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064b6:	2300      	movs	r3, #0
 80064b8:	2200      	movs	r2, #0
 80064ba:	2100      	movs	r1, #0
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f001 fbdb 	bl	8007c78 <USBD_LL_PrepareReceive>
 80064c2:	e018      	b.n	80064f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d10b      	bne.n	80064e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064e8:	2180      	movs	r1, #128	@ 0x80
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f001 fb1a 	bl	8007b24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 ff49 	bl	8007388 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d122      	bne.n	8006546 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff fe98 	bl	8006236 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800650e:	e01a      	b.n	8006546 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d114      	bne.n	8006546 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	7afa      	ldrb	r2, [r7, #11]
 8006532:	4611      	mov	r1, r2
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	4798      	blx	r3
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	e000      	b.n	8006548 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006580:	2303      	movs	r3, #3
 8006582:	e02f      	b.n	80065e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6852      	ldr	r2, [r2, #4]
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	4611      	mov	r1, r2
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065ae:	2340      	movs	r3, #64	@ 0x40
 80065b0:	2200      	movs	r2, #0
 80065b2:	2100      	movs	r1, #0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fa70 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2240      	movs	r2, #64	@ 0x40
 80065c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065ca:	2340      	movs	r3, #64	@ 0x40
 80065cc:	2200      	movs	r2, #0
 80065ce:	2180      	movs	r1, #128	@ 0x80
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fa62 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2240      	movs	r2, #64	@ 0x40
 80065e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800661a:	b2da      	uxtb	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2204      	movs	r2, #4
 8006626:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b04      	cmp	r3, #4
 800664a:	d106      	bne.n	800665a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006652:	b2da      	uxtb	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800667a:	2303      	movs	r3, #3
 800667c:	e012      	b.n	80066a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d10b      	bne.n	80066a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3301      	adds	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066ca:	8a3b      	ldrh	r3, [r7, #16]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	b21a      	sxth	r2, r3
 80066d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	b21b      	sxth	r3, r3
 80066d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066da:	89fb      	ldrh	r3, [r7, #14]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066fe:	2b40      	cmp	r3, #64	@ 0x40
 8006700:	d005      	beq.n	800670e <USBD_StdDevReq+0x26>
 8006702:	2b40      	cmp	r3, #64	@ 0x40
 8006704:	d853      	bhi.n	80067ae <USBD_StdDevReq+0xc6>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <USBD_StdDevReq+0x3a>
 800670a:	2b20      	cmp	r3, #32
 800670c:	d14f      	bne.n	80067ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]
      break;
 8006720:	e04a      	b.n	80067b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d83b      	bhi.n	80067a2 <USBD_StdDevReq+0xba>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <USBD_StdDevReq+0x48>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006785 	.word	0x08006785
 8006734:	08006799 	.word	0x08006799
 8006738:	080067a3 	.word	0x080067a3
 800673c:	0800678f 	.word	0x0800678f
 8006740:	080067a3 	.word	0x080067a3
 8006744:	08006763 	.word	0x08006763
 8006748:	08006759 	.word	0x08006759
 800674c:	080067a3 	.word	0x080067a3
 8006750:	0800677b 	.word	0x0800677b
 8006754:	0800676d 	.word	0x0800676d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9de 	bl	8006b1c <USBD_GetDescriptor>
          break;
 8006760:	e024      	b.n	80067ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fb6d 	bl	8006e44 <USBD_SetAddress>
          break;
 800676a:	e01f      	b.n	80067ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fbac 	bl	8006ecc <USBD_SetConfig>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]
          break;
 8006778:	e018      	b.n	80067ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fc4b 	bl	8007018 <USBD_GetConfig>
          break;
 8006782:	e013      	b.n	80067ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fc7c 	bl	8007084 <USBD_GetStatus>
          break;
 800678c:	e00e      	b.n	80067ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fcab 	bl	80070ec <USBD_SetFeature>
          break;
 8006796:	e009      	b.n	80067ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fcba 	bl	8007114 <USBD_ClrFeature>
          break;
 80067a0:	e004      	b.n	80067ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fd11 	bl	80071cc <USBD_CtlError>
          break;
 80067aa:	bf00      	nop
      }
      break;
 80067ac:	e004      	b.n	80067b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fd0b 	bl	80071cc <USBD_CtlError>
      break;
 80067b6:	bf00      	nop
  }

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop

080067c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	d005      	beq.n	80067ea <USBD_StdItfReq+0x26>
 80067de:	2b40      	cmp	r3, #64	@ 0x40
 80067e0:	d82f      	bhi.n	8006842 <USBD_StdItfReq+0x7e>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <USBD_StdItfReq+0x26>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d12b      	bne.n	8006842 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d81d      	bhi.n	8006834 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	889b      	ldrh	r3, [r3, #4]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d813      	bhi.n	800682a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	88db      	ldrh	r3, [r3, #6]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d110      	bne.n	800683e <USBD_StdItfReq+0x7a>
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fd9d 	bl	8007362 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006828:	e009      	b.n	800683e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fccd 	bl	80071cc <USBD_CtlError>
          break;
 8006832:	e004      	b.n	800683e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fcc8 	bl	80071cc <USBD_CtlError>
          break;
 800683c:	e000      	b.n	8006840 <USBD_StdItfReq+0x7c>
          break;
 800683e:	bf00      	nop
      }
      break;
 8006840:	e004      	b.n	800684c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fcc1 	bl	80071cc <USBD_CtlError>
      break;
 800684a:	bf00      	nop
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	889b      	ldrh	r3, [r3, #4]
 8006868:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006872:	2b40      	cmp	r3, #64	@ 0x40
 8006874:	d007      	beq.n	8006886 <USBD_StdEPReq+0x30>
 8006876:	2b40      	cmp	r3, #64	@ 0x40
 8006878:	f200 8145 	bhi.w	8006b06 <USBD_StdEPReq+0x2b0>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <USBD_StdEPReq+0x44>
 8006880:	2b20      	cmp	r3, #32
 8006882:	f040 8140 	bne.w	8006b06 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
      break;
 8006898:	e13a      	b.n	8006b10 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d007      	beq.n	80068b2 <USBD_StdEPReq+0x5c>
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	f300 8129 	bgt.w	8006afa <USBD_StdEPReq+0x2a4>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d07f      	beq.n	80069ac <USBD_StdEPReq+0x156>
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d03c      	beq.n	800692a <USBD_StdEPReq+0xd4>
 80068b0:	e123      	b.n	8006afa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d002      	beq.n	80068c4 <USBD_StdEPReq+0x6e>
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d016      	beq.n	80068f0 <USBD_StdEPReq+0x9a>
 80068c2:	e02c      	b.n	800691e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <USBD_StdEPReq+0x90>
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	2b80      	cmp	r3, #128	@ 0x80
 80068ce:	d00a      	beq.n	80068e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 f925 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068da:	2180      	movs	r1, #128	@ 0x80
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f921 	bl	8007b24 <USBD_LL_StallEP>
 80068e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068e4:	e020      	b.n	8006928 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fc6f 	bl	80071cc <USBD_CtlError>
              break;
 80068ee:	e01b      	b.n	8006928 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	885b      	ldrh	r3, [r3, #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10e      	bne.n	8006916 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <USBD_StdEPReq+0xc0>
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b80      	cmp	r3, #128	@ 0x80
 8006902:	d008      	beq.n	8006916 <USBD_StdEPReq+0xc0>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	88db      	ldrh	r3, [r3, #6]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f907 	bl	8007b24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fd23 	bl	8007362 <USBD_CtlSendStatus>

              break;
 800691c:	e004      	b.n	8006928 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fc53 	bl	80071cc <USBD_CtlError>
              break;
 8006926:	bf00      	nop
          }
          break;
 8006928:	e0ec      	b.n	8006b04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d002      	beq.n	800693c <USBD_StdEPReq+0xe6>
 8006936:	2b03      	cmp	r3, #3
 8006938:	d016      	beq.n	8006968 <USBD_StdEPReq+0x112>
 800693a:	e030      	b.n	800699e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <USBD_StdEPReq+0x108>
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b80      	cmp	r3, #128	@ 0x80
 8006946:	d00a      	beq.n	800695e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f8e9 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006952:	2180      	movs	r1, #128	@ 0x80
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 f8e5 	bl	8007b24 <USBD_LL_StallEP>
 800695a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800695c:	e025      	b.n	80069aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fc33 	bl	80071cc <USBD_CtlError>
              break;
 8006966:	e020      	b.n	80069aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	885b      	ldrh	r3, [r3, #2]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11b      	bne.n	80069a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f8ef 	bl	8007b62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fcec 	bl	8007362 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800699c:	e004      	b.n	80069a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc13 	bl	80071cc <USBD_CtlError>
              break;
 80069a6:	e000      	b.n	80069aa <USBD_StdEPReq+0x154>
              break;
 80069a8:	bf00      	nop
          }
          break;
 80069aa:	e0ab      	b.n	8006b04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d002      	beq.n	80069be <USBD_StdEPReq+0x168>
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d032      	beq.n	8006a22 <USBD_StdEPReq+0x1cc>
 80069bc:	e097      	b.n	8006aee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <USBD_StdEPReq+0x17e>
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b80      	cmp	r3, #128	@ 0x80
 80069c8:	d004      	beq.n	80069d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fbfd 	bl	80071cc <USBD_CtlError>
                break;
 80069d2:	e091      	b.n	8006af8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da0b      	bge.n	80069f4 <USBD_StdEPReq+0x19e>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	3310      	adds	r3, #16
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	e00b      	b.n	8006a0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2202      	movs	r2, #2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fc47 	bl	80072ae <USBD_CtlSendData>
              break;
 8006a20:	e06a      	b.n	8006af8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da11      	bge.n	8006a4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3324      	adds	r3, #36	@ 0x24
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d117      	bne.n	8006a74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fbc0 	bl	80071cc <USBD_CtlError>
                  break;
 8006a4c:	e054      	b.n	8006af8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fbad 	bl	80071cc <USBD_CtlError>
                  break;
 8006a72:	e041      	b.n	8006af8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da0b      	bge.n	8006a94 <USBD_StdEPReq+0x23e>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3310      	adds	r3, #16
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	e00b      	b.n	8006aac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <USBD_StdEPReq+0x264>
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b80      	cmp	r3, #128	@ 0x80
 8006ab8:	d103      	bne.n	8006ac2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e00e      	b.n	8006ae0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f86a 	bl	8007ba0 <USBD_LL_IsStallEP>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e002      	b.n	8006ae0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fbe1 	bl	80072ae <USBD_CtlSendData>
              break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb6b 	bl	80071cc <USBD_CtlError>
              break;
 8006af6:	bf00      	nop
          }
          break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fb65 	bl	80071cc <USBD_CtlError>
          break;
 8006b02:	bf00      	nop
      }
      break;
 8006b04:	e004      	b.n	8006b10 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fb5f 	bl	80071cc <USBD_CtlError>
      break;
 8006b0e:	bf00      	nop
  }

  return ret;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b0e      	cmp	r3, #14
 8006b3e:	f200 8152 	bhi.w	8006de6 <USBD_GetDescriptor+0x2ca>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <USBD_GetDescriptor+0x2c>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006bb9 	.word	0x08006bb9
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006c11 	.word	0x08006c11
 8006b54:	08006de7 	.word	0x08006de7
 8006b58:	08006de7 	.word	0x08006de7
 8006b5c:	08006d87 	.word	0x08006d87
 8006b60:	08006db3 	.word	0x08006db3
 8006b64:	08006de7 	.word	0x08006de7
 8006b68:	08006de7 	.word	0x08006de7
 8006b6c:	08006de7 	.word	0x08006de7
 8006b70:	08006de7 	.word	0x08006de7
 8006b74:	08006de7 	.word	0x08006de7
 8006b78:	08006de7 	.word	0x08006de7
 8006b7c:	08006de7 	.word	0x08006de7
 8006b80:	08006b85 	.word	0x08006b85
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7c12      	ldrb	r2, [r2, #16]
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ba6:	e126      	b.n	8006df6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fb0e 	bl	80071cc <USBD_CtlError>
        err++;
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006bb6:	e11e      	b.n	8006df6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
      break;
 8006bce:	e112      	b.n	8006df6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7c1b      	ldrb	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10d      	bne.n	8006bf4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	f107 0208 	add.w	r2, r7, #8
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	2202      	movs	r2, #2
 8006bf0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bf2:	e100      	b.n	8006df6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	f107 0208 	add.w	r2, r7, #8
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	701a      	strb	r2, [r3, #0]
      break;
 8006c0e:	e0f2      	b.n	8006df6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	f200 80ac 	bhi.w	8006d74 <USBD_GetDescriptor+0x258>
 8006c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <USBD_GetDescriptor+0x108>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c3d 	.word	0x08006c3d
 8006c28:	08006c71 	.word	0x08006c71
 8006c2c:	08006ca5 	.word	0x08006ca5
 8006c30:	08006cd9 	.word	0x08006cd9
 8006c34:	08006d0d 	.word	0x08006d0d
 8006c38:	08006d41 	.word	0x08006d41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	7c12      	ldrb	r2, [r2, #16]
 8006c54:	f107 0108 	add.w	r1, r7, #8
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5e:	e091      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fab2 	bl	80071cc <USBD_CtlError>
            err++;
 8006c68:	7afb      	ldrb	r3, [r7, #11]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6e:	e089      	b.n	8006d84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	7c12      	ldrb	r2, [r2, #16]
 8006c88:	f107 0108 	add.w	r1, r7, #8
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
 8006c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c92:	e077      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa98 	bl	80071cc <USBD_CtlError>
            err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca2:	e06f      	b.n	8006d84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc6:	e05d      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa7e 	bl	80071cc <USBD_CtlError>
            err++;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd6:	e055      	b.n	8006d84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	7c12      	ldrb	r2, [r2, #16]
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfa:	e043      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa64 	bl	80071cc <USBD_CtlError>
            err++;
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	3301      	adds	r3, #1
 8006d08:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0a:	e03b      	b.n	8006d84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7c12      	ldrb	r2, [r2, #16]
 8006d24:	f107 0108 	add.w	r1, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2e:	e029      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa4a 	bl	80071cc <USBD_CtlError>
            err++;
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3e:	e021      	b.n	8006d84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7c12      	ldrb	r2, [r2, #16]
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
 8006d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d62:	e00f      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa30 	bl	80071cc <USBD_CtlError>
            err++;
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	72fb      	strb	r3, [r7, #11]
          break;
 8006d72:	e007      	b.n	8006d84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa28 	bl	80071cc <USBD_CtlError>
          err++;
 8006d7c:	7afb      	ldrb	r3, [r7, #11]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006d82:	bf00      	nop
      }
      break;
 8006d84:	e037      	b.n	8006df6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7c1b      	ldrb	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d96:	f107 0208 	add.w	r2, r7, #8
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	4798      	blx	r3
 8006d9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006da0:	e029      	b.n	8006df6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fa11 	bl	80071cc <USBD_CtlError>
        err++;
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	3301      	adds	r3, #1
 8006dae:	72fb      	strb	r3, [r7, #11]
      break;
 8006db0:	e021      	b.n	8006df6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7c1b      	ldrb	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc2:	f107 0208 	add.w	r2, r7, #8
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4798      	blx	r3
 8006dca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd4:	e00f      	b.n	8006df6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f9f7 	bl	80071cc <USBD_CtlError>
        err++;
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	3301      	adds	r3, #1
 8006de2:	72fb      	strb	r3, [r7, #11]
      break;
 8006de4:	e007      	b.n	8006df6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f9ef 	bl	80071cc <USBD_CtlError>
      err++;
 8006dee:	7afb      	ldrb	r3, [r7, #11]
 8006df0:	3301      	adds	r3, #1
 8006df2:	72fb      	strb	r3, [r7, #11]
      break;
 8006df4:	bf00      	nop
  }

  if (err != 0U)
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11e      	bne.n	8006e3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e04:	893b      	ldrh	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00e      	beq.n	8006e28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	88da      	ldrh	r2, [r3, #6]
 8006e0e:	893b      	ldrh	r3, [r7, #8]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	bf28      	it	cs
 8006e14:	4613      	movcs	r3, r2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e1a:	893b      	ldrh	r3, [r7, #8]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa44 	bl	80072ae <USBD_CtlSendData>
 8006e26:	e009      	b.n	8006e3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f9ce 	bl	80071cc <USBD_CtlError>
 8006e30:	e004      	b.n	8006e3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa95 	bl	8007362 <USBD_CtlSendStatus>
 8006e38:	e000      	b.n	8006e3c <USBD_GetDescriptor+0x320>
    return;
 8006e3a:	bf00      	nop
  }
}
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop

08006e44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	889b      	ldrh	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d131      	bne.n	8006eba <USBD_SetAddress+0x76>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	88db      	ldrh	r3, [r3, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d12d      	bne.n	8006eba <USBD_SetAddress+0x76>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	885b      	ldrh	r3, [r3, #2]
 8006e62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e64:	d829      	bhi.n	8006eba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	885b      	ldrh	r3, [r3, #2]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d104      	bne.n	8006e88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f9a3 	bl	80071cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e86:	e01d      	b.n	8006ec4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7bfa      	ldrb	r2, [r7, #15]
 8006e8c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 feaf 	bl	8007bf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa61 	bl	8007362 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eae:	e009      	b.n	8006ec4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb8:	e004      	b.n	8006ec4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f985 	bl	80071cc <USBD_CtlError>
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	885b      	ldrh	r3, [r3, #2]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8007014 <USBD_SetConfig+0x148>)
 8006ee2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8007014 <USBD_SetConfig+0x148>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d905      	bls.n	8006ef8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f96c 	bl	80071cc <USBD_CtlError>
    return USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e088      	b.n	800700a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d002      	beq.n	8006f0a <USBD_SetConfig+0x3e>
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d025      	beq.n	8006f54 <USBD_SetConfig+0x88>
 8006f08:	e071      	b.n	8006fee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f0a:	4b42      	ldr	r3, [pc, #264]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01c      	beq.n	8006f4c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006f12:	4b40      	ldr	r3, [pc, #256]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff f992 	bl	800624c <USBD_SetClassConfig>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f949 	bl	80071cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f3a:	e065      	b.n	8007008 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fa10 	bl	8007362 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2203      	movs	r2, #3
 8006f46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f4a:	e05d      	b.n	8007008 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fa08 	bl	8007362 <USBD_CtlSendStatus>
      break;
 8006f52:	e059      	b.n	8007008 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f54:	4b2f      	ldr	r3, [pc, #188]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d112      	bne.n	8006f82 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f64:	4b2b      	ldr	r3, [pc, #172]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f6e:	4b29      	ldr	r3, [pc, #164]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff f985 	bl	8006284 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9f1 	bl	8007362 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f80:	e042      	b.n	8007008 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006f82:	4b24      	ldr	r3, [pc, #144]	@ (8007014 <USBD_SetConfig+0x148>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d02a      	beq.n	8006fe6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff f973 	bl	8006284 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007014 <USBD_SetConfig+0x148>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8007014 <USBD_SetConfig+0x148>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff f94c 	bl	800624c <USBD_SetClassConfig>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00f      	beq.n	8006fde <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f903 	bl	80071cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff f958 	bl	8006284 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fdc:	e014      	b.n	8007008 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9bf 	bl	8007362 <USBD_CtlSendStatus>
      break;
 8006fe4:	e010      	b.n	8007008 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9bb 	bl	8007362 <USBD_CtlSendStatus>
      break;
 8006fec:	e00c      	b.n	8007008 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8eb 	bl	80071cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ff6:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <USBD_SetConfig+0x148>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff f941 	bl	8006284 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007002:	2303      	movs	r3, #3
 8007004:	73fb      	strb	r3, [r7, #15]
      break;
 8007006:	bf00      	nop
  }

  return ret;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000208 	.word	0x20000208

08007018 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88db      	ldrh	r3, [r3, #6]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d004      	beq.n	8007034 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8cd 	bl	80071cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007032:	e023      	b.n	800707c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	dc02      	bgt.n	8007046 <USBD_GetConfig+0x2e>
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc03      	bgt.n	800704c <USBD_GetConfig+0x34>
 8007044:	e015      	b.n	8007072 <USBD_GetConfig+0x5a>
 8007046:	2b03      	cmp	r3, #3
 8007048:	d00b      	beq.n	8007062 <USBD_GetConfig+0x4a>
 800704a:	e012      	b.n	8007072 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3308      	adds	r3, #8
 8007056:	2201      	movs	r2, #1
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f927 	bl	80072ae <USBD_CtlSendData>
        break;
 8007060:	e00c      	b.n	800707c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3304      	adds	r3, #4
 8007066:	2201      	movs	r2, #1
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f91f 	bl	80072ae <USBD_CtlSendData>
        break;
 8007070:	e004      	b.n	800707c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8a9 	bl	80071cc <USBD_CtlError>
        break;
 800707a:	bf00      	nop
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	2b02      	cmp	r3, #2
 800709a:	d81e      	bhi.n	80070da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	88db      	ldrh	r3, [r3, #6]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d004      	beq.n	80070ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f890 	bl	80071cc <USBD_CtlError>
        break;
 80070ac:	e01a      	b.n	80070e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f043 0202 	orr.w	r2, r3, #2
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	330c      	adds	r3, #12
 80070ce:	2202      	movs	r2, #2
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8eb 	bl	80072ae <USBD_CtlSendData>
      break;
 80070d8:	e004      	b.n	80070e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f875 	bl	80071cc <USBD_CtlError>
      break;
 80070e2:	bf00      	nop
  }
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	885b      	ldrh	r3, [r3, #2]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d106      	bne.n	800710c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f92b 	bl	8007362 <USBD_CtlSendStatus>
  }
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	2b02      	cmp	r3, #2
 800712a:	d80b      	bhi.n	8007144 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	885b      	ldrh	r3, [r3, #2]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d10c      	bne.n	800714e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f910 	bl	8007362 <USBD_CtlSendStatus>
      }
      break;
 8007142:	e004      	b.n	800714e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f840 	bl	80071cc <USBD_CtlError>
      break;
 800714c:	e000      	b.n	8007150 <USBD_ClrFeature+0x3c>
      break;
 800714e:	bf00      	nop
  }
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff fa92 	bl	80066ac <SWAPBYTE>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fa85 	bl	80066ac <SWAPBYTE>
 80071a2:	4603      	mov	r3, r0
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fa78 	bl	80066ac <SWAPBYTE>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	80da      	strh	r2, [r3, #6]
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d6:	2180      	movs	r1, #128	@ 0x80
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fca3 	bl	8007b24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc9f 	bl	8007b24 <USBD_LL_StallEP>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d036      	beq.n	8007272 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007208:	6938      	ldr	r0, [r7, #16]
 800720a:	f000 f836 	bl	800727a <USBD_GetLen>
 800720e:	4603      	mov	r3, r0
 8007210:	3301      	adds	r3, #1
 8007212:	b29b      	uxth	r3, r3
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	7812      	ldrb	r2, [r2, #0]
 8007226:	701a      	strb	r2, [r3, #0]
  idx++;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	3301      	adds	r3, #1
 800722c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	4413      	add	r3, r2
 8007234:	2203      	movs	r2, #3
 8007236:	701a      	strb	r2, [r3, #0]
  idx++;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	3301      	adds	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800723e:	e013      	b.n	8007268 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	4413      	add	r3, r2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	7812      	ldrb	r2, [r2, #0]
 800724a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3301      	adds	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
    idx++;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	3301      	adds	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
    idx++;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	3301      	adds	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e7      	bne.n	8007240 <USBD_GetString+0x52>
 8007270:	e000      	b.n	8007274 <USBD_GetString+0x86>
    return;
 8007272:	bf00      	nop
  }
}
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800727a:	b480      	push	{r7}
 800727c:	b085      	sub	sp, #20
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800728a:	e005      	b.n	8007298 <USBD_GetLen+0x1e>
  {
    len++;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3301      	adds	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3301      	adds	r3, #1
 8007296:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f5      	bne.n	800728c <USBD_GetLen+0x12>
  }

  return len;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2202      	movs	r2, #2
 80072be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	2100      	movs	r1, #0
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fcae 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	2100      	movs	r1, #0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fc9d 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2203      	movs	r2, #3
 8007316:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	2100      	movs	r1, #0
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fca1 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	2100      	movs	r1, #0
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fc90 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2204      	movs	r2, #4
 800736e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007372:	2300      	movs	r3, #0
 8007374:	2200      	movs	r2, #0
 8007376:	2100      	movs	r1, #0
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc5c 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2205      	movs	r2, #5
 8007394:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007398:	2300      	movs	r3, #0
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc6a 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80073b4:	2200      	movs	r2, #0
 80073b6:	4912      	ldr	r1, [pc, #72]	@ (8007400 <MX_USB_Device_Init+0x50>)
 80073b8:	4812      	ldr	r0, [pc, #72]	@ (8007404 <MX_USB_Device_Init+0x54>)
 80073ba:	f7fe fed9 	bl	8006170 <USBD_Init>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80073c4:	f7f9 f878 	bl	80004b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80073c8:	490f      	ldr	r1, [pc, #60]	@ (8007408 <MX_USB_Device_Init+0x58>)
 80073ca:	480e      	ldr	r0, [pc, #56]	@ (8007404 <MX_USB_Device_Init+0x54>)
 80073cc:	f7fe ff00 	bl	80061d0 <USBD_RegisterClass>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80073d6:	f7f9 f86f 	bl	80004b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80073da:	490c      	ldr	r1, [pc, #48]	@ (800740c <MX_USB_Device_Init+0x5c>)
 80073dc:	4809      	ldr	r0, [pc, #36]	@ (8007404 <MX_USB_Device_Init+0x54>)
 80073de:	f7fe fe21 	bl	8006024 <USBD_CDC_RegisterInterface>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80073e8:	f7f9 f866 	bl	80004b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80073ec:	4805      	ldr	r0, [pc, #20]	@ (8007404 <MX_USB_Device_Init+0x54>)
 80073ee:	f7fe ff16 	bl	800621e <USBD_Start>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80073f8:	f7f9 f85e 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80073fc:	bf00      	nop
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000130 	.word	0x20000130
 8007404:	2000020c 	.word	0x2000020c
 8007408:	20000018 	.word	0x20000018
 800740c:	2000011c 	.word	0x2000011c

08007410 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007414:	2200      	movs	r2, #0
 8007416:	4905      	ldr	r1, [pc, #20]	@ (800742c <CDC_Init_FS+0x1c>)
 8007418:	4805      	ldr	r0, [pc, #20]	@ (8007430 <CDC_Init_FS+0x20>)
 800741a:	f7fe fe18 	bl	800604e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800741e:	4905      	ldr	r1, [pc, #20]	@ (8007434 <CDC_Init_FS+0x24>)
 8007420:	4803      	ldr	r0, [pc, #12]	@ (8007430 <CDC_Init_FS+0x20>)
 8007422:	f7fe fe32 	bl	800608a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007426:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007428:	4618      	mov	r0, r3
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200008dc 	.word	0x200008dc
 8007430:	2000020c 	.word	0x2000020c
 8007434:	200004dc 	.word	0x200004dc

08007438 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800743c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	4613      	mov	r3, r2
 8007456:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b23      	cmp	r3, #35	@ 0x23
 800745c:	d84a      	bhi.n	80074f4 <CDC_Control_FS+0xac>
 800745e:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <CDC_Control_FS+0x1c>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	080074f5 	.word	0x080074f5
 8007468:	080074f5 	.word	0x080074f5
 800746c:	080074f5 	.word	0x080074f5
 8007470:	080074f5 	.word	0x080074f5
 8007474:	080074f5 	.word	0x080074f5
 8007478:	080074f5 	.word	0x080074f5
 800747c:	080074f5 	.word	0x080074f5
 8007480:	080074f5 	.word	0x080074f5
 8007484:	080074f5 	.word	0x080074f5
 8007488:	080074f5 	.word	0x080074f5
 800748c:	080074f5 	.word	0x080074f5
 8007490:	080074f5 	.word	0x080074f5
 8007494:	080074f5 	.word	0x080074f5
 8007498:	080074f5 	.word	0x080074f5
 800749c:	080074f5 	.word	0x080074f5
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	080074f5 	.word	0x080074f5
 80074a8:	080074f5 	.word	0x080074f5
 80074ac:	080074f5 	.word	0x080074f5
 80074b0:	080074f5 	.word	0x080074f5
 80074b4:	080074f5 	.word	0x080074f5
 80074b8:	080074f5 	.word	0x080074f5
 80074bc:	080074f5 	.word	0x080074f5
 80074c0:	080074f5 	.word	0x080074f5
 80074c4:	080074f5 	.word	0x080074f5
 80074c8:	080074f5 	.word	0x080074f5
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074f5 	.word	0x080074f5
 80074dc:	080074f5 	.word	0x080074f5
 80074e0:	080074f5 	.word	0x080074f5
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	080074f5 	.word	0x080074f5
 80074ec:	080074f5 	.word	0x080074f5
 80074f0:	080074f5 	.word	0x080074f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074f4:	bf00      	nop
  }

  return (USBD_OK);
 80074f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4808      	ldr	r0, [pc, #32]	@ (8007534 <CDC_Receive_FS+0x30>)
 8007512:	f7fe fdba 	bl	800608a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007516:	4807      	ldr	r0, [pc, #28]	@ (8007534 <CDC_Receive_FS+0x30>)
 8007518:	f7fe fe00 	bl	800611c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f807 	bl	8007538 <CDC_Transmit_FS>
  return (USBD_OK);
 800752a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	2000020c 	.word	0x2000020c

08007538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007548:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <CDC_Transmit_FS+0x48>)
 800754a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800754e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800755a:	2301      	movs	r3, #1
 800755c:	e00b      	b.n	8007576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800755e:	887b      	ldrh	r3, [r7, #2]
 8007560:	461a      	mov	r2, r3
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4806      	ldr	r0, [pc, #24]	@ (8007580 <CDC_Transmit_FS+0x48>)
 8007566:	f7fe fd72 	bl	800604e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800756a:	4805      	ldr	r0, [pc, #20]	@ (8007580 <CDC_Transmit_FS+0x48>)
 800756c:	f7fe fda6 	bl	80060bc <USBD_CDC_TransmitPacket>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2000020c 	.word	0x2000020c

08007584 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2212      	movs	r2, #18
 80075b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80075ba:	4b03      	ldr	r3, [pc, #12]	@ (80075c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20000150 	.word	0x20000150

080075cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2204      	movs	r2, #4
 80075dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075de:	4b03      	ldr	r3, [pc, #12]	@ (80075ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000164 	.word	0x20000164

080075f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4907      	ldr	r1, [pc, #28]	@ (8007624 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007606:	4808      	ldr	r0, [pc, #32]	@ (8007628 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007608:	f7ff fdf1 	bl	80071ee <USBD_GetString>
 800760c:	e004      	b.n	8007618 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4904      	ldr	r1, [pc, #16]	@ (8007624 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007612:	4805      	ldr	r0, [pc, #20]	@ (8007628 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007614:	f7ff fdeb 	bl	80071ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007618:	4b02      	ldr	r3, [pc, #8]	@ (8007624 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000cdc 	.word	0x20000cdc
 8007628:	08007e50 	.word	0x08007e50

0800762c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	6039      	str	r1, [r7, #0]
 8007636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	4904      	ldr	r1, [pc, #16]	@ (800764c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800763c:	4804      	ldr	r0, [pc, #16]	@ (8007650 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800763e:	f7ff fdd6 	bl	80071ee <USBD_GetString>
  return USBD_StrDesc;
 8007642:	4b02      	ldr	r3, [pc, #8]	@ (800764c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000cdc 	.word	0x20000cdc
 8007650:	08007e68 	.word	0x08007e68

08007654 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	221a      	movs	r2, #26
 8007664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007666:	f000 f843 	bl	80076f0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800766a:	4b02      	ldr	r3, [pc, #8]	@ (8007674 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000168 	.word	0x20000168

08007678 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4907      	ldr	r1, [pc, #28]	@ (80076ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800768e:	4808      	ldr	r0, [pc, #32]	@ (80076b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007690:	f7ff fdad 	bl	80071ee <USBD_GetString>
 8007694:	e004      	b.n	80076a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	4904      	ldr	r1, [pc, #16]	@ (80076ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800769a:	4805      	ldr	r0, [pc, #20]	@ (80076b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800769c:	f7ff fda7 	bl	80071ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80076a0:	4b02      	ldr	r3, [pc, #8]	@ (80076ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000cdc 	.word	0x20000cdc
 80076b0:	08007e7c 	.word	0x08007e7c

080076b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4907      	ldr	r1, [pc, #28]	@ (80076e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80076ca:	4808      	ldr	r0, [pc, #32]	@ (80076ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80076cc:	f7ff fd8f 	bl	80071ee <USBD_GetString>
 80076d0:	e004      	b.n	80076dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4904      	ldr	r1, [pc, #16]	@ (80076e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80076d6:	4805      	ldr	r0, [pc, #20]	@ (80076ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80076d8:	f7ff fd89 	bl	80071ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80076dc:	4b02      	ldr	r3, [pc, #8]	@ (80076e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000cdc 	.word	0x20000cdc
 80076ec:	08007e88 	.word	0x08007e88

080076f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007734 <Get_SerialNum+0x44>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <Get_SerialNum+0x48>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007702:	4b0e      	ldr	r3, [pc, #56]	@ (800773c <Get_SerialNum+0x4c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007716:	2208      	movs	r2, #8
 8007718:	4909      	ldr	r1, [pc, #36]	@ (8007740 <Get_SerialNum+0x50>)
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f814 	bl	8007748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007720:	2204      	movs	r2, #4
 8007722:	4908      	ldr	r1, [pc, #32]	@ (8007744 <Get_SerialNum+0x54>)
 8007724:	68b8      	ldr	r0, [r7, #8]
 8007726:	f000 f80f 	bl	8007748 <IntToUnicode>
  }
}
 800772a:	bf00      	nop
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	1fff7590 	.word	0x1fff7590
 8007738:	1fff7594 	.word	0x1fff7594
 800773c:	1fff7598 	.word	0x1fff7598
 8007740:	2000016a 	.word	0x2000016a
 8007744:	2000017a 	.word	0x2000017a

08007748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
 800775e:	e027      	b.n	80077b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	0f1b      	lsrs	r3, r3, #28
 8007764:	2b09      	cmp	r3, #9
 8007766:	d80b      	bhi.n	8007780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	0f1b      	lsrs	r3, r3, #28
 800776c:	b2da      	uxtb	r2, r3
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4619      	mov	r1, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	440b      	add	r3, r1
 8007778:	3230      	adds	r2, #48	@ 0x30
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e00a      	b.n	8007796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	0f1b      	lsrs	r3, r3, #28
 8007784:	b2da      	uxtb	r2, r3
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	4619      	mov	r1, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	440b      	add	r3, r1
 8007790:	3237      	adds	r2, #55	@ 0x37
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	3301      	adds	r3, #1
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	4413      	add	r3, r2
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	3301      	adds	r3, #1
 80077ae:	75fb      	strb	r3, [r7, #23]
 80077b0:	7dfa      	ldrb	r2, [r7, #23]
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d3d3      	bcc.n	8007760 <IntToUnicode+0x18>
  }
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	371c      	adds	r7, #28
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b094      	sub	sp, #80	@ 0x50
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	2244      	movs	r2, #68	@ 0x44
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fb01 	bl	8007de0 <memset>
  if(pcdHandle->Instance==USB)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a19      	ldr	r2, [pc, #100]	@ (8007848 <HAL_PCD_MspInit+0x80>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d12a      	bne.n	800783e <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80077e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80077ee:	2300      	movs	r3, #0
 80077f0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077f2:	f107 030c 	add.w	r3, r7, #12
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fc f910 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007802:	f7f8 fe59 	bl	80004b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007806:	4b11      	ldr	r3, [pc, #68]	@ (800784c <HAL_PCD_MspInit+0x84>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780a:	4a10      	ldr	r2, [pc, #64]	@ (800784c <HAL_PCD_MspInit+0x84>)
 800780c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007810:	6593      	str	r3, [r2, #88]	@ 0x58
 8007812:	4b0e      	ldr	r3, [pc, #56]	@ (800784c <HAL_PCD_MspInit+0x84>)
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800781e:	2200      	movs	r2, #0
 8007820:	2100      	movs	r1, #0
 8007822:	2013      	movs	r0, #19
 8007824:	f7f9 f851 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8007828:	2013      	movs	r0, #19
 800782a:	f7f9 f868 	bl	80008fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800782e:	2200      	movs	r2, #0
 8007830:	2100      	movs	r1, #0
 8007832:	2014      	movs	r0, #20
 8007834:	f7f9 f849 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007838:	2014      	movs	r0, #20
 800783a:	f7f9 f860 	bl	80008fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800783e:	bf00      	nop
 8007840:	3750      	adds	r7, #80	@ 0x50
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40005c00 	.word	0x40005c00
 800784c:	40021000 	.word	0x40021000

08007850 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fe fd24 	bl	80062b4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	440b      	add	r3, r1
 8007894:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	4619      	mov	r1, r3
 800789e:	f7fe fd5e 	bl	800635e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	440b      	add	r3, r1
 80078ca:	3324      	adds	r3, #36	@ 0x24
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	4619      	mov	r1, r3
 80078d2:	f7fe fda7 	bl	8006424 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe febb 	bl	8006668 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007902:	2301      	movs	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	795b      	ldrb	r3, [r3, #5]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d001      	beq.n	8007912 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800790e:	f7f8 fdd3 	bl	80004b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007918:	7bfa      	ldrb	r2, [r7, #15]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fe65 	bl	80065ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fe11 	bl	8006550 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fe60 	bl	800660c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7a5b      	ldrb	r3, [r3, #9]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007954:	4b04      	ldr	r3, [pc, #16]	@ (8007968 <HAL_PCD_SuspendCallback+0x30>)
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	4a03      	ldr	r2, [pc, #12]	@ (8007968 <HAL_PCD_SuspendCallback+0x30>)
 800795a:	f043 0306 	orr.w	r3, r3, #6
 800795e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed00 	.word	0xe000ed00

0800796c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7a5b      	ldrb	r3, [r3, #9]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800797c:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <HAL_PCD_ResumeCallback+0x34>)
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	4a07      	ldr	r2, [pc, #28]	@ (80079a0 <HAL_PCD_ResumeCallback+0x34>)
 8007982:	f023 0306 	bic.w	r3, r3, #6
 8007986:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007988:	f000 f9f8 	bl	8007d7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe fe50 	bl	8006638 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	e000ed00 	.word	0xe000ed00

080079a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80079ac:	4a2b      	ldr	r2, [pc, #172]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a29      	ldr	r2, [pc, #164]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80079bc:	4b27      	ldr	r3, [pc, #156]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079be:	4a28      	ldr	r2, [pc, #160]	@ (8007a60 <USBD_LL_Init+0xbc>)
 80079c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80079c2:	4b26      	ldr	r3, [pc, #152]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079c4:	2208      	movs	r2, #8
 80079c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80079c8:	4b24      	ldr	r3, [pc, #144]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079ca:	2202      	movs	r2, #2
 80079cc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079ce:	4b23      	ldr	r3, [pc, #140]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079d0:	2202      	movs	r2, #2
 80079d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80079d4:	4b21      	ldr	r3, [pc, #132]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80079da:	4b20      	ldr	r3, [pc, #128]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079dc:	2200      	movs	r2, #0
 80079de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80079e0:	4b1e      	ldr	r3, [pc, #120]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80079e6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80079ec:	481b      	ldr	r0, [pc, #108]	@ (8007a5c <USBD_LL_Init+0xb8>)
 80079ee:	f7f9 fd69 	bl	80014c4 <HAL_PCD_Init>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80079f8:	f7f8 fd5e 	bl	80004b8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a02:	2318      	movs	r3, #24
 8007a04:	2200      	movs	r2, #0
 8007a06:	2100      	movs	r1, #0
 8007a08:	f7fb f9f0 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a12:	2358      	movs	r3, #88	@ 0x58
 8007a14:	2200      	movs	r2, #0
 8007a16:	2180      	movs	r1, #128	@ 0x80
 8007a18:	f7fb f9e8 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a22:	23c0      	movs	r3, #192	@ 0xc0
 8007a24:	2200      	movs	r2, #0
 8007a26:	2181      	movs	r1, #129	@ 0x81
 8007a28:	f7fb f9e0 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a32:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007a36:	2200      	movs	r2, #0
 8007a38:	2101      	movs	r1, #1
 8007a3a:	f7fb f9d7 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2182      	movs	r1, #130	@ 0x82
 8007a4c:	f7fb f9ce 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000edc 	.word	0x20000edc
 8007a60:	40005c00 	.word	0x40005c00

08007a64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7f9 fdf0 	bl	8001660 <HAL_PCD_Start>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f97e 	bl	8007d88 <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	70fb      	strb	r3, [r7, #3]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70bb      	strb	r3, [r7, #2]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007ac2:	78bb      	ldrb	r3, [r7, #2]
 8007ac4:	883a      	ldrh	r2, [r7, #0]
 8007ac6:	78f9      	ldrb	r1, [r7, #3]
 8007ac8:	f7f9 ff37 	bl	800193a <HAL_PCD_EP_Open>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f958 	bl	8007d88 <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f9 ff77 	bl	80019f8 <HAL_PCD_EP_Close>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f939 	bl	8007d88 <USBD_Get_USB_Status>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fa f820 	bl	8001b88 <HAL_PCD_EP_SetStall>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f91a 	bl	8007d88 <USBD_Get_USB_Status>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fa f853 	bl	8001c2c <HAL_PCD_EP_ClrStall>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f8fb 	bl	8007d88 <USBD_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007bb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da0b      	bge.n	8007bd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	440b      	add	r3, r1
 8007bce:	3312      	adds	r3, #18
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	e00b      	b.n	8007bec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	440b      	add	r3, r1
 8007be6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007bea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7f9 fe6b 	bl	80018f2 <HAL_PCD_SetAddress>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f8b0 	bl	8007d88 <USBD_Get_USB_Status>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	460b      	mov	r3, r1
 8007c44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007c54:	7af9      	ldrb	r1, [r7, #11]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	f7f9 ff5e 	bl	8001b1a <HAL_PCD_EP_Transmit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f88f 	bl	8007d88 <USBD_Get_USB_Status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007c96:	7af9      	ldrb	r1, [r7, #11]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	f7f9 fef4 	bl	8001a88 <HAL_PCD_EP_Receive>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f86e 	bl	8007d88 <USBD_Get_USB_Status>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7f9 ff0a 	bl	8001aea <HAL_PCD_EP_GetRxCount>
 8007cd6:	4603      	mov	r3, r0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_PCDEx_LPM_Callback+0x18>
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d013      	beq.n	8007d1e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007cf6:	e023      	b.n	8007d40 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	7a5b      	ldrb	r3, [r3, #9]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007d00:	f000 f83c 	bl	8007d7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d04:	4b10      	ldr	r3, [pc, #64]	@ (8007d48 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	4a0f      	ldr	r2, [pc, #60]	@ (8007d48 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d0a:	f023 0306 	bic.w	r3, r3, #6
 8007d0e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fc8e 	bl	8006638 <USBD_LL_Resume>
    break;
 8007d1c:	e010      	b.n	8007d40 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fc71 	bl	800660c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7a5b      	ldrb	r3, [r3, #9]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d32:	4b05      	ldr	r3, [pc, #20]	@ (8007d48 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	4a04      	ldr	r2, [pc, #16]	@ (8007d48 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d38:	f043 0306 	orr.w	r3, r3, #6
 8007d3c:	6113      	str	r3, [r2, #16]
    break;
 8007d3e:	bf00      	nop
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed00 	.word	0xe000ed00

08007d4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d54:	4b03      	ldr	r3, [pc, #12]	@ (8007d64 <USBD_static_malloc+0x18>)
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	200011b8 	.word	0x200011b8

08007d68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007d80:	f7f8 fb58 	bl	8000434 <SystemClock_Config>
}
 8007d84:	bf00      	nop
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d817      	bhi.n	8007dcc <USBD_Get_USB_Status+0x44>
 8007d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <USBD_Get_USB_Status+0x1c>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007dbb 	.word	0x08007dbb
 8007dac:	08007dc1 	.word	0x08007dc1
 8007db0:	08007dc7 	.word	0x08007dc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
    break;
 8007db8:	e00b      	b.n	8007dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007dbe:	e008      	b.n	8007dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc4:	e005      	b.n	8007dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dca:	e002      	b.n	8007dd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd0:	bf00      	nop
  }
  return usb_status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <memset>:
 8007de0:	4402      	add	r2, r0
 8007de2:	4603      	mov	r3, r0
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d100      	bne.n	8007dea <memset+0xa>
 8007de8:	4770      	bx	lr
 8007dea:	f803 1b01 	strb.w	r1, [r3], #1
 8007dee:	e7f9      	b.n	8007de4 <memset+0x4>

08007df0 <__libc_init_array>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4d0d      	ldr	r5, [pc, #52]	@ (8007e28 <__libc_init_array+0x38>)
 8007df4:	4c0d      	ldr	r4, [pc, #52]	@ (8007e2c <__libc_init_array+0x3c>)
 8007df6:	1b64      	subs	r4, r4, r5
 8007df8:	10a4      	asrs	r4, r4, #2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	42a6      	cmp	r6, r4
 8007dfe:	d109      	bne.n	8007e14 <__libc_init_array+0x24>
 8007e00:	4d0b      	ldr	r5, [pc, #44]	@ (8007e30 <__libc_init_array+0x40>)
 8007e02:	4c0c      	ldr	r4, [pc, #48]	@ (8007e34 <__libc_init_array+0x44>)
 8007e04:	f000 f818 	bl	8007e38 <_init>
 8007e08:	1b64      	subs	r4, r4, r5
 8007e0a:	10a4      	asrs	r4, r4, #2
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	42a6      	cmp	r6, r4
 8007e10:	d105      	bne.n	8007e1e <__libc_init_array+0x2e>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e18:	4798      	blx	r3
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7ee      	b.n	8007dfc <__libc_init_array+0xc>
 8007e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e22:	4798      	blx	r3
 8007e24:	3601      	adds	r6, #1
 8007e26:	e7f2      	b.n	8007e0e <__libc_init_array+0x1e>
 8007e28:	08007eb8 	.word	0x08007eb8
 8007e2c:	08007eb8 	.word	0x08007eb8
 8007e30:	08007eb8 	.word	0x08007eb8
 8007e34:	08007ebc 	.word	0x08007ebc

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
